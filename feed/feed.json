{
  "version": "https://jsonfeed.org/version/1",
  "title": "Ken Chen&#39;s Blog",
  "home_page_url": "https://blog.kenwsc.com",
  "feed_url": "https://blog.kenwsc.com/feed/feed.json",
  "description": "Ken Chen&#39;s Blog",
  "author": {
    "name": "Ken Chen",
    "url": ""
  },
  "items": [{
      "id": "https://blog.kenwsc.com/posts/2023/openid-connect/",
      "url": "https://blog.kenwsc.com/posts/2023/openid-connect/",
      "title": "OAuth 2.0 的身份認證：OpenID Connect",
      "content_html": "<p>OAuth 2 讓網路服務可以存取第三方的受保護資源，因此，有些開發者會進一步利用 OAuth 2 來進行使用者認證。但這中間存在著一些語義落差，因為 OAuth 2 當初設計目的是「授權」而不是「認證」，兩者關注的焦點會有些不同。OpenID Connect 是基於 OAuth 2 的一套身份認證協定，讓開發者可以在 OAuth 2 授權的基礎上，再加入標準的認證流程。在這篇文章中，我會說明授權跟認證的場景有何差異，並講解 OpenID Connect 如何滿足認證需求。</p>\n<p>因為 OpenID Connect 是建構在 OAuth 2 的基礎上，我會假設這篇文章的讀者已經知道 OAuth 2 的組件與流程，如果你不熟悉，可以先閱讀另外兩篇文章</p>\n<ul>\n<li><a href=\"https://blog.kenwsc.com/posts/2022/oauth-2-0-roles-and-channels/\">OAuth 2.0：角色與信道</a></li>\n<li><a href=\"https://blog.kenwsc.com/posts/2022/oauth-2-0-authorization-grant/\">OAuth 2.0：授權許可</a></li>\n</ul>\n<h2 id=\"%E8%AA%8D%E8%AD%89-vs-%E6%8E%88%E6%AC%8A\"><a class=\"direct-link\" href=\"#%E8%AA%8D%E8%AD%89-vs-%E6%8E%88%E6%AC%8A\">#</a> 認證 vs 授權</h2>\n<p><strong>認證(Authentication)</strong> 是證明身份(identity)的機制，它包含兩個問題：你是誰？你怎麼證明？想想餐廳訂位的例子，你需要告知服務生你的姓名與手機電話，她才會幫你帶位。在網路服務中，這兩個問題最常見的形式是：你的帳號是什麼？密碼是什麼？通常這兩個問題會一起問，以防止惡意人士探查特定的人(identity)是否是服務的使用者。當然，如果只憑單項證明，只要證明洩漏，身份就會被冒用，因此像是銀行開戶，會需要攜帶雙證件，讓身份更為安全，在資安上，這稱為多重要素認證(MFA)。</p>\n<p><strong>授權(Authorization)</strong> 則是授予資源存取權限的機制，它包含的問題是：要開放哪些資源？開放給誰？假設你有物品遺忘在車上，你將車鑰匙給朋友，請他去車上幫忙把東西拿過來。你就開放了車子這項資源，而對象則是你的朋友。授權跟身份不一定有關，像是 Facebook 的動態可以只設為私人消息，只開放給特定的朋友；也可以設為公開消息，讓所有人都看到。如果你只開放給特定的人，顯然在看到你的訊息前，就需要先經過認證了。</p>\n<p>以 OAuth 2 的流程來說，Client 會要求使用者授權，讓它可以存取第三方資源。當使用者被導向到 Authorization Server 後，Authorization Server 會先請使用者認證，等確認身份沒問題，就會緊接著要求授權。授權結果會用 Token 交給 Client，讓 Client 可以存取受保護資源。</p>\n<h2 id=\"oauth-2-%E7%9A%84%E5%95%8F%E9%A1%8C\"><a class=\"direct-link\" href=\"#oauth-2-%E7%9A%84%E5%95%8F%E9%A1%8C\">#</a> OAuth 2 的問題</h2>\n<p>既然 OAuth 2 的流程有要求使用者認證，也有把授權結果轉成 Token 交給 Client。那為什麼還有問題呢？回到原點，我們來問問 Client 要如何回答認證的兩個問題。首先是「我是誰？」，Client 知道使用者是誰嗎？因為使用者是跟 Authorization Server 認證，Authorization Server 知道使用者的身份，但 Authorization Server 交給 Client 只是個 Token，而依照 OAuth 2 的規範，這個 Token 應該要是不透明的</p>\n<blockquote>\n<p>Access tokens are credentials used to access protected resources. An access token is a string representing an authorization issued to the client. The string is usually opaque to the client.</p>\n<p>訪問令牌是用來訪問受保護資源的憑證。訪問令牌是個字串，用以表達簽發給 Client 的授權。這個字串通常對 Client 來說不透明。</p>\n</blockquote>\n<p>因此，Client 只知道自己拿到授權，如果要知道是「誰」授權的，它需要用 Access Token 存取有使用者身份的資源，例如跟帳號有關的 API，才能知道使用者身份。</p>\n<p>再來，Client 是依據哪項證明，知道跟 Client 互動的是使用者本人呢？它同樣是透過授權結果來得知，如果 Access Token 能拿到使用者資料，代表使用者有經過 Authorization Server 認證，Client 就能把 Access Token 的有效性當成使用者身份的證明。</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2023/openid-connect/oidc-1.png\"/>\n</p>\n<p>換句話說，在流程上我們可以看到，Client 需要存取受保護資源來達成認證，而在 OAuth 2 中，沒有規範使用者身份的格式跟存取端點。每家 Provider 的實作可能不同，例如 A 有支援使用者的 email 而 B 沒有；或者 A、B 都支援，但 response body 的字段名稱不同；又或者字段名稱也相同，但存放在不同的 Endpoint 中。這些差異需要 Client 的開發者開發一套中間層處理，也不利於開放認證環境的推廣。</p>\n<h2 id=\"openid-connect\"><a class=\"direct-link\" href=\"#openid-connect\">#</a> OpenID Connect</h2>\n<p>為了讓使用者能用 OAuth 的基礎建設進行認證，OpenID Foundation 設計出 OpenID Connect。因應認證的場景，它定義出兩個新角色，並將它們映射到 OAuth 的角色上</p>\n<ul>\n<li><strong>OpenID Provider</strong> 負責認證使用者，並提供身份證明給 Relying Party，讓 Relying Party 知道認證發生還有使用者是誰。這可以對照到 OAuth 2 的 Authorization Server 跟 Protected Resource。</li>\n<li><strong>Relying Party</strong> 從 OpenID Provider 獲得認證憑證與使用者資訊。對照到 OAuth 2 的 Client。</li>\n</ul>\n<p>從 OpenID Connect 的角度來看的話，流程變成</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2023/openid-connect/oidc-2.png\"/>\n</p>\n<p>前面的流程都相同，主要差異在 (A)、(B)、(C) 的三個步驟。我們說過，OAuth 要求 Token 對 Client 來說是不透明的，可是認證又要求 Relying Party 能夠由 OpenID Provider 回傳的資訊來知道使用者身份，要如何同時滿足這兩個需求呢？答案是，在 OpenID Provider 的回傳中，多加入一個 ID Token，而該 Token 對 Relying Party 來講可讀。如此就能在兼容 OAuth 的前提下，又取得認證資訊。</p>\n<p>具體來說，當 Relying Party 跟 OpenID Provider 要求 Token 時，OpenID Provider 站在 Authorization Server 的角度會給出 Access Token，同時，它站在 OpenID Provider 的角度，也會附上 ID Token。在同一個 Response 中會帶有這兩項資訊</p>\n<pre class=\"language-json\"><code class=\"language-json\">HTTP/<span class=\"token number\">1.1</span> <span class=\"token number\">200</span> OK<br>Content-Type<span class=\"token operator\">:</span> application/json<br>Cache-Control<span class=\"token operator\">:</span> no-store<br>Pragma<span class=\"token operator\">:</span> no-cache<br><br><span class=\"token punctuation\">{</span><br>  <span class=\"token property\">\"access_token\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SlAV32hkKG\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"token_type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bearer\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"refresh_token\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"8xLOxBtZp8\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"expires_in\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"id_token\"</span><span class=\"token operator\">:</span> \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc<br>    yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5<br>    NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZ<br>    fV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5Nz<br>    AKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6q<br>    Jp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJ<br>    NqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7Tpd<br>    QyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoS<br>    K5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4<br>    XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg\"<br><span class=\"token punctuation\">}</span></code></pre>\n<p>ID Token 是 JWT 的格式，解碼後，內容類似</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>  <span class=\"token property\">\"iss\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://server.example.com\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"sub\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"24400320\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"aud\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"s6BhdRkqt3\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"nonce\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"n-0S6_WzA2Mj\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"exp\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1311281970</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"iat\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1311280970</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"auth_time\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1311280969</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"acr\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"urn:mace:incommon:iap:silver\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>其中 <code>iss</code> 是 ID Token 的簽核者，可以當成是 OpenID Provider 的名稱，而 <code>sub</code> 是簽核者用來標示使用者的唯一碼。<code>iss</code> 跟 <code>sub</code> 可以組合成一個不重複的 ID，用來辨識使用者。</p>\n<p>然而僅僅靠 ID，在應用上仍然稍嫌不夠力，我們在自我介紹時，不會說我是 A123456789，而是會講我的名字是 Ken，居住在台北。這些個人資訊可以給 Relying Party 更充足的訊息，讓它辨識來自不同 OpenID Provider 的相同使用者。為了讓這些資訊的取得有標準可以依循，OpenID Connect 重用 OAuth 2 的 scope 並規範特定的 Endpoint。Relying Party 在向 OpenID Provider 提出授權申請時，可以在 scope 中放入</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">scope</span><span class=\"token operator\">=</span>openid profile email phone</code></pre>\n<p>只要該 OpenID Provider 有支援，Relying Party 就能用 Access Token 向 userinfo 端點發出請求</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">GET /userinfo HTTP/1.1<br>Host: server.example.com<br>Authorization: Bearer SlAV32hkKG</code></pre>\n<p>並得到使用者的完整資訊</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">HTTP/1.1 <span class=\"token number\">200</span> OK<br>Content-Type: application/json<br><br><span class=\"token punctuation\">{</span><br>  <span class=\"token string\">\"sub\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"248289761001\"</span>,<br>  <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Jane Doe\"</span>,<br>  <span class=\"token string\">\"given_name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Jane\"</span>,<br>  <span class=\"token string\">\"family_name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Doe\"</span>,<br>  <span class=\"token string\">\"preferred_username\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"j.doe\"</span>,<br>  <span class=\"token string\">\"email\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"janedoe@example.com\"</span>,<br>  <span class=\"token string\">\"picture\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"http://example.com/janedoe/me.jpg\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"%E4%BD%BF%E7%94%A8-google-%E5%B8%B3%E8%99%9F%E8%AA%8D%E8%AD%89\"><a class=\"direct-link\" href=\"#%E4%BD%BF%E7%94%A8-google-%E5%B8%B3%E8%99%9F%E8%AA%8D%E8%AD%89\">#</a> 使用 Google 帳號認證</h2>\n<p>讓我們實際看一下用 Google 來登入的例子，先給張時序圖，讓大家知道我們需要有哪些 Endpoint</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2023/openid-connect/oidc-3.png\"/>\n</p>\n<p>Client 有三個 Endpoint，分別是 <code>/login</code>、<code>/callback</code> 跟 <code>/</code>。使用者進到 <code>/login</code> 後，會導向到 OpenID Provider 進行認證與授權，之後導回 <code>/callback</code>，接收 ID Token 並綁定 session 後再導到首頁。</p>\n<p>跟 OAuth 有關的部分，在<a href=\"https://blog.kenwsc.com/posts/2022/oauth-2-0-go-and-google-example/\">另一篇文章</a>中有詳細解說，如果不熟的可以翻翻，這邊就不再多說明了。底下會把重點放在實現 OpenID Connect 需要的修改，首先來看端點跟配置</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    sessions <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    cfg <span class=\"token operator\">=</span> <span class=\"token function\">NewGoogleOAuthConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    e <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    e<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"callback\"</span><span class=\"token punctuation\">,</span> OAuth2Callback<span class=\"token punctuation\">)</span><br>    e<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"login\"</span><span class=\"token punctuation\">,</span> Login<span class=\"token punctuation\">)</span><br>    e<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> GetHomePage<span class=\"token punctuation\">)</span><br>    e<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:8080\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">NewGoogleOAuthConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>oauth2<span class=\"token punctuation\">.</span>Config <span class=\"token punctuation\">{</span><br>    config <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>oauth2<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">{</span><br>        ClientID<span class=\"token punctuation\">:</span>     clientID<span class=\"token punctuation\">,</span><br>        ClientSecret<span class=\"token punctuation\">:</span> clientSecret<span class=\"token punctuation\">,</span><br>        RedirectURL<span class=\"token punctuation\">:</span>  <span class=\"token string\">\"http://localhost:8080/callback\"</span><span class=\"token punctuation\">,</span><br>        Scopes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><br>            oidc<span class=\"token punctuation\">.</span>ScopeOpenID<span class=\"token punctuation\">,</span><br>            <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>        Endpoint<span class=\"token punctuation\">:</span> google<span class=\"token punctuation\">.</span>Endpoint<span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> config<br><span class=\"token punctuation\">}</span></code></pre>\n<p>OpenID Connect 的函式庫使用 <a href=\"https://pkg.go.dev/github.com/coreos/go-oidc/v3@v3.5.0/oidc\">github.com/coreos/go-oidc/v3/oidc</a>，能替我們降低一些開發成本。在跟 OpenID Provider 要權限前，記得 Scopes 要帶上 <code>oidc.ScopeOpenID</code>，我們還想知道 <code>email</code>，因此底下也加進去。</p>\n<p>接著來到重頭戲 <code>/callback</code>，用收到的授權碼兌換 Access Token 跟 ID Token</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">OAuth2Callback</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// ...</span><br>    token<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> cfg<span class=\"token punctuation\">.</span><span class=\"token function\">Exchange</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">AbortWithError</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusInternalServerError<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token comment\">// ...</span><br>    provider<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> oidc<span class=\"token punctuation\">.</span><span class=\"token function\">NewProvider</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://accounts.google.com\"</span><span class=\"token punctuation\">)</span><br>    verifier <span class=\"token operator\">:=</span> provider<span class=\"token punctuation\">.</span><span class=\"token function\">Verifier</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>oidc<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">{</span>ClientID<span class=\"token punctuation\">:</span> clientID<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    idToken<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> verifier<span class=\"token punctuation\">.</span><span class=\"token function\">Verify</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">Extra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id_token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">AbortWithError</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusInternalServerError<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span><br>    <span class=\"token punctuation\">}</span><br>    userInfo<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">getUserInfo</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">AbortWithError</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusInternalServerError<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span><br>    <span class=\"token punctuation\">}</span><br>    sid <span class=\"token operator\">:=</span> uuid<span class=\"token punctuation\">.</span><span class=\"token function\">NewV4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    sessions<span class=\"token punctuation\">[</span>sid<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> userInfo<br>    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">SetCookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sid\"</span><span class=\"token punctuation\">,</span> sid<span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><br>    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Redirect</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusFound<span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://localhost:8080\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>取得 ID Token 後，先驗證該 Token 沒問題，解碼後內容是</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>  <span class=\"token property\">\"iss\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://accounts.google.com\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"azp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xxxxxx.apps.googleusercontent.com\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"aud\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xxxxxx.apps.googleusercontent.com\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"sub\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"104498875333XXXXXXXXXX\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"kenxxxxx@gmail.com\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"email_verified\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"at_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2RCplQvBCznJOwok6Yl8GA\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"iat\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1674159649</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"exp\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1674163249</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>以 ID Token 來說，Google 給的資訊已經夠多了，很多 optional 的欄位都有值，但其他的 Provider 未必會在 ID Token 給出詳細資訊，如果沒看到想要的資訊，可以再由 <code>/userinfo</code> 來拿</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">getUserInfo</span><span class=\"token punctuation\">(</span>token <span class=\"token operator\">*</span>oauth2<span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    res<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://openidconnect.googleapis.com/v1/userinfo\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err<br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">defer</span> res<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">var</span> resp <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>    data<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAll</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><br>    json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>resp<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> resp<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這份資料會先綁定 Session，等到使用者來拿時，再回傳回去</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetHomePage</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    sid<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sid\"</span><span class=\"token punctuation\">)</span><br>    userInfo <span class=\"token operator\">:=</span> sessions<span class=\"token punctuation\">[</span>sid<span class=\"token punctuation\">]</span><br>    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> userInfo<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>最後得到 Response 中的個人資訊</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"kenxxxxx@gmail.com\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"email_verified\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"picture\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://lh3.googleusercontent.com/a-/xxxxxx\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"sub\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"104498875333XXXXXXXXXX\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>可以看到要修改的點不多，幾乎都是單純加上 OpenID Connect 的邏輯而已，跟 OAuth 2 的相容性非常好。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>OpenID Connect 像是 OAuth 2 的擴充，儘管原本 OAuth 2 能做到類似認證的效果，但這是憑藉技術上的手段，而不是原本就在規範中。要知道，OAuth 2 的 Protected Resourece 沒有供應身份端點的義務，如果只是單純的 OAuth 2，客戶端沒辦法保證能做到認證的事。當然實際上，因為常串的 OAuth 2 資源都是 Meta / Microsoft / Amazon / Google 這類大廠，真的要找還是找得到，但這就跟「開放認證協定」不是同一回事了。</p>\n<p>OpenID Connect 從規範上補足這件事，如果哪家廠商支援 OpenID Connect，我們可以合理預期，它會有能辨識身份的 ID Token 跟詳細資訊的 userinfo 端點，而身份資訊範圍也能從 OpenID Connect 的 scope 中看到，像是 Google 的 <a href=\"https://accounts.google.com/.well-known/openid-configuration\">Discovery document</a> 就很明確，能讓開發者在初期就確定能否拿到想要的資訊</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>  <span class=\"token comment\">// ...</span><br>  <span class=\"token property\">\"scopes_supported\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>    <span class=\"token string\">\"openid\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"profile\"</span><br>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>  <span class=\"token comment\">// ...</span><br>  <span class=\"token property\">\"claims_supported\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>    <span class=\"token string\">\"aud\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"email_verified\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"exp\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"family_name\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"given_name\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"iat\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"iss\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"locale\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"picture\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"sub\"</span><br>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>  <span class=\"token comment\">// ...</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>希望看完這篇文後，能幫忙釐清 OAuth 2 跟 OpenID Connect 的關係，知道角色間如何對應，也能讓開發者們在開發第三方登入的應用時，更快進入狀況。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://openid.net/connect/\">Welcome to OpenID Connect</a></li>\n<li><a href=\"https://www.rfc-editor.org/rfc/rfc6749#page-10\">RFC 6749</a></li>\n<li><a href=\"https://www.ithome.com.tw/voice/134389\">驗證與授權</a></li>\n<li><a href=\"https://petertc.medium.com/openid-connect-a27e0a3cc2ae\">每當點選社群帳號登入，背後發生了什麼事？</a></li>\n<li><a href=\"https://kimlin20011.medium.com/%E6%B7%B1%E5%85%A5%E6%B7%BA%E5%87%BA-openid-connect-%E4%B8%80-8701bbf00958\">深入淺出 OpenID Connect (一)</a></li>\n<li><a href=\"https://developers.google.com/identity/openid-connect/openid-connect\">OpenID Connect | Authentication | Google Developers</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10300937?sc=iThelpR\">如何驗證 ID Token 的資訊</a></li>\n</ul>\n",
      "date_published": "2023-01-20T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2023/jwt-vs-session/",
      "url": "https://blog.kenwsc.com/posts/2023/jwt-vs-session/",
      "title": "更好的選擇？用 JWT 取代 Session 的風險",
      "content_html": "<p>因為 HTTP 是無狀態協定，為了保持使用者狀態，需要後端實作 Session 管理機制。在早期方式中，使用者狀態會跟 HTTP 的 Cookie 綁定，等到有需要的時候，例如驗證身份，就能使用 Cookie 內的資訊搭配後端 Session 來進行。但自從 JWT 出現後，使用者資訊可以編碼在 JWT 內，也開始有人用它來管理使用者身份。前些日子跟公司的資安團隊討論，發現 JWT 用來管理身份認證會有些風險。在這篇文章中，我會比較原本的 Session 管理跟 JWT 的差異，並說明可能的風險所在。</p>\n<h2 id=\"session-%E7%AE%A1%E7%90%86\"><a class=\"direct-link\" href=\"#session-%E7%AE%A1%E7%90%86\">#</a> Session 管理</h2>\n<p>Session 是什麼意思？為什麼需要管理？我們可以從 HTTP 無狀態的特性聊起。所謂的無狀態，翻譯成白話，就是後面請求不會受前面請求的影響。想像現在有個朋友跟你借錢，借他後他卻沒有還，當他下次再跟你借時，你就會不願意答應，這是因為「這個人不會還錢」的狀態已經建立在你的記憶中了。</p>\n<p>持有「狀態」有時很有用，你看到一筆請求，不用它多說，就知道它之前做過哪些事；但另一方面，也造成每次請求的結果都受前面影響，變成無法預期。想想一個「有狀態」的人，他對美食很有研究，但當他知道你不能吃牛肉，他可能會避免在你面前談日本和牛有多好吃。無法預期對軟體工程而言是個很高的成本，會影響到軟體的可擴展性，因此 HTTP 無狀態的特性就特別適合網路應用開發。</p>\n<p>然而在實務上，偶爾還是需要知道請求背後的狀態，這就不能仰賴 HTTP 幫忙處理，而是要另外建立一套 Session 管理機制。Session 是「具有狀態的一段期間」，當 Session 啟動時，代表要開始記錄狀態，而當 Session 結束時，代表狀態都會被刪除。從後端開發的角度，可以很直覺聯想到，只要把使用者的請求資訊快取起來，不就完成對 Session 的管理了嗎？是的，所以以登入的情境來看，會是</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2023/jwt-vs-session/session-1.png\" />\n</p>\n<p>使用者輸入帳號密碼，後端驗證後，建立一個 Session 將使用者帳號放進去，並將這個 Session 的 ID 設定在 Cookie 中交給 Client，以後如果請求有帶 Session ID，後端只要依照 Session ID 調出資料，就能知道使用者是誰了。</p>\n<h2 id=\"session-%E5%B8%B6%E4%BE%86%E7%9A%84%E5%95%8F%E9%A1%8C\"><a class=\"direct-link\" href=\"#session-%E5%B8%B6%E4%BE%86%E7%9A%84%E5%95%8F%E9%A1%8C\">#</a> Session 帶來的問題</h2>\n<p>既然 Session 管理這麼簡單，為什麼還要嘗試其他方案？問題還是出在開發成本。我們剛剛說建個 Session 來儲存資訊，但這 Session 要放在哪呢？如果是放在 in-memory object 內，像是 Go 的 map，那當你的系統有 Load Balancer 時就會出現問題</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2023/jwt-vs-session/load-balancer.png\" />\n</p>\n<p>Load Balancer 會將收到的請求平均發給後端系統，此時，原本請求的 Session 如果是放在 Server A，當 Load Balancer 將下個請求發給 Server B 時，Server B 會因為沒有 Session 的資訊而產生錯誤的結果。</p>\n<p>你可能會想說，那再加個快取服務來放 Session，像是 Redis，讓各 Server 去 Redis 讀資料，不就解決問題了？</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2023/jwt-vs-session/load-balancer-2.png\" />\n</p>\n<p>原則上沒錯，很多現有方案都是用這個解法。但多加系統就是多增加可用性風險，要是 Redis 當機的話呢？為了防止單點失效，要不要把 Redis 做成 Master-Slave Replication？或者，Redis 所在伺服器的 I/O 流量能支援嗎？會不會影響反應時間跟使用者體驗？是否要套用 Cluster 來加速反應？</p>\n<p>問題開始變得有些複雜了。</p>\n<p>另外，在傳統的 Session 方案中，Session ID 會放在 Cookie，而 Cookie 會在瀏覽器發起請求時自動帶上，這個「自動」就有了 CSRF 的風險。想想你無意中點開惡意網站，你的瀏覽器依照惡意網站的內容發出轉帳請求給銀行，而因為你之前登入過銀行，還保持著 Session，瀏覽器也在請求中「自動」帶上了 Session ID。銀行伺服器收到請求後，認為你已經登入過，就乖乖依照請求轉帳，這樣豈不是很危險？</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2023/jwt-vs-session/csrf-attack.png\" />\n</p>\n<p>要緩解 CSRF 攻擊，需要實作 CSRF Token 的機制，這當然也是另一項開發成本。</p>\n<h2 id=\"jwt-%E5%A6%82%E4%BD%95%E8%99%95%E7%90%86%E5%95%8F%E9%A1%8C%EF%BC%9F\"><a class=\"direct-link\" href=\"#jwt-%E5%A6%82%E4%BD%95%E8%99%95%E7%90%86%E5%95%8F%E9%A1%8C%EF%BC%9F\">#</a> JWT 如何處理問題？</h2>\n<p>於是有人開始研究，有沒有機會用 JWT 來實現真正的無狀態，或者至少，在使用者身份上的無狀態。</p>\n<p>JWT 本質上是個 Token，只是它具備自描述的特性，能夠乘載資訊，我們可以把它想像成是員工證，你要進入門禁系統，會需要在入口刷員工證，員工證上有姓名跟照片，所以只要看到卡片，就知道這張卡是由誰持有。</p>\n<p>在應用中，JWT 會是個編碼過的字串，像是</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</code></pre>\n<p>其中 Payload 解碼後，會是個 JSON 格式的內容，像是</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>  <span class=\"token property\">\"sub\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1234567890\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John Doe\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"iat\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1516239022</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>JWT 都有經過簽名，可以防止偽造問題。同樣是登入情境，流程變成</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2023/jwt-vs-session/session-2.png\" />\n</p>\n<p>後端驗證使用者後，簽發一個 JWT，將使用者資訊放在裡面回覆給 Client，Client 後續的請求都會在 Authorization Header 中放入 JWT，後端只需要解碼 JWT，就能得知使用者是誰。</p>\n<p>這樣能解掉原本 Session 的問題嗎？客觀來看，因為後端收到的不再只是一個 Session ID，而是帶有使用者資訊的 Token，後端不再需要跟快取請求資訊，從而也就避免了快取系統設計的開發成本；而 JWT 因為是放在特定的 Header 中，瀏覽器也不會自動帶上它，自然也避免 CSRF 的可能性。</p>\n<h2 id=\"%E5%95%8F%E9%A1%8C%E7%9C%9F%E7%9A%84%E8%A7%A3%E6%B1%BA%E4%BA%86%E5%97%8E%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E5%95%8F%E9%A1%8C%E7%9C%9F%E7%9A%84%E8%A7%A3%E6%B1%BA%E4%BA%86%E5%97%8E%EF%BC%9F\">#</a> 問題真的解決了嗎？</h2>\n<p>只是事情沒這麼簡單，JWT 無狀態的特性也帶來資安問題。舉例來說，使用者可能拿到 JWT 後又修改密碼，這時因為 Authentication 有變動，要讓改密碼前的 JWT 無效。在 JWT 的體系中，可以怎麼做呢？</p>\n<p>通常 JWT 的內容中有個 <code>exp</code> 的欄位，用來標示 JWT 的過期時間，後端解碼 JWT 後，如果發現過期，就會告訴 Client 該 Token 無效。但這需要等待一定的時間，沒辦法立即失效，想像一下你已經知道你的密碼被盜用了，但後端仍允許攻擊者使用之前的 Token，這顯然是個資安漏洞。</p>\n<p>除了用 <code>exp</code> 外，還有別的方式可以撤銷 Token 嗎？有，當改動密碼時，同時將持有的 JWT 放到快取中，當下次請求進來，先跟快取確認，要是能在快取中查找到 JWT，代表該 JWT 已經失效了</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2023/jwt-vs-session/session-3.png\" />\n</p>\n<p>但如此一來，會在 JWT 的方案中引入快取。使用 JWT 的目的就是為了避免快取相關的開發成本，如果使用 JWT 還要用上快取，等於繞了一圈又回到原點，沒有達到原本的效益。</p>\n<p>另外，使用 Authorization Header 的確能避免 CSRF，但如果 Client 不是把 JWT 放在 Cookie，會放在哪呢？通常是放在 Local Storage，而只要是 JavaScript，就有機會從 Local Storage 取得資料。例如，攻擊者可以用 XSS 將惡意的 JavaScript 程式碼載入到你的瀏覽器中，惡意程式會上傳 Local Storage 的資訊到攻擊者的指定網站，那麼，攻擊者就可以拿著上傳的 JWT，光明正大存取受保護資源。</p>\n<p>相反的，如果放在 Cookie，後端可以在 Set-Cookie 最後設置 HttpOnly，禁止 JavaScript 存取 Cookie，因為瀏覽器會自動帶上 Cookie，JavaScript 也沒有存取的必要，只要確實做好 CSRF Token，就能避免攻擊者發出偽造的請求。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>前面講了這麼多，到底是要用 JWT 還是不用要呢？從我的觀點，如果要替這篇文章下個結論的話，就是：不要用 JWT 來取代 Session。</p>\n<p>Token 的應用場景通常是授權，而且都會有明確的過期時間，像是在 GitHub 上申請 Personal access tokens，讓應用程式不需要帳號密碼，也可以存取 API。但 Session 的目的是保持狀態，且不說 Session 中可能儲存很多除了使用者身份外的資訊，即使只看使用者認證，JWT 也沒辦法保證「使用者在場」（因為它的設計上就是希望使用者不在場也可以運作）。實作 Session 會需要一些成本沒錯，但現在都已經有成熟的解決方案，有些甚至是函式庫直接內建好，開箱即用，權衡兩個方案後，Session 應該會是比較妥當的選擇。</p>\n<p>這麼說也不是要大家不要使用 JWT，只要 Follow 幾個原則，JWT 還是後端開發利器：</p>\n<ul>\n<li>讓 JWT 的生命週期盡量短，如果是長期的，也要設定一個明確的失效時間</li>\n<li>授權範圍盡可能小，只授權需要的 API</li>\n<li>JWT 需要有撤銷機制，即使洩漏了也能緊急處理</li>\n</ul>\n<p>以我自己來講，如果要開發 M2M(Machine-to-machine) 系統，JWT 應該能有不少應用。</p>\n<p>最後提醒一下，資安是我相對陌生的領域，如果看完這篇覺得跟你的認知不同，歡迎留言討論，你想的也許是正確的。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://www.rfc-editor.org/rfc/rfc7519\">RFC 7519</a></li>\n<li><a href=\"https://www.rfc-editor.org/rfc/rfc6265\">RFC 6265</a></li>\n<li><a href=\"http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/\">Stop using JWT for sessions</a></li>\n<li><a href=\"https://yami.io/jwt/\">以 JSON Web Token 替代傳統 Token</a></li>\n<li><a href=\"https://medium.com/@leon740727/%E4%BB%A5-json-web-token-%E5%8F%96%E4%BB%A3-session-bae47556dde2\">以 JSON Web Token 取代 session</a></li>\n<li><a href=\"https://www.cnkirito.moe/jwt-learn-3/\">理解 JWT 的使用场景和优劣</a></li>\n<li><a href=\"https://blog.huli.tw/2019/08/09/session-and-cookie-part2/\">淺談 Session 與 Cookie：一起來讀 RFC</a></li>\n</ul>\n",
      "date_published": "2023-01-13T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2023/concurrency-of-go-goroutine-lifetime/",
      "url": "https://blog.kenwsc.com/posts/2023/concurrency-of-go-goroutine-lifetime/",
      "title": "Goroutine 的併發治理：掌握生命週期",
      "content_html": "<p>從併發的角度來看，Goroutine 跟 Thread 的概念很類似，都是將任務交給一個執行單元來處理。然而不同的是，Goroutine 將調度放在用戶態，因此更加輕量，也能避免多餘的 Context Switch。我們可以說，Go 的併發處理是由語言原生支援，有著更好的開發者體驗，但也因此更容易忘記底層仍存在著輕量成本，當這些成本積沙成塔，就會造成 Out of Memory。這篇文章會從 Goroutine 的生命週期切入，試著說明在併發的情境中，應該如何保持 Goroutine 的正常運作。</p>\n<h2 id=\"goroutine-%E7%9A%84%E8%B3%87%E6%BA%90%E4%BD%BF%E7%94%A8%E9%87%8F\"><a class=\"direct-link\" href=\"#goroutine-%E7%9A%84%E8%B3%87%E6%BA%90%E4%BD%BF%E7%94%A8%E9%87%8F\">#</a> Goroutine 的資源使用量</h2>\n<p>讓我們看個最簡單的例子，假設現在同時開 3M 個 Goroutine 來執行任務</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> n <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">1e6</span><br><br><span class=\"token keyword\">var</span> ch <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup<br><br><span class=\"token keyword\">func</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>wg <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token operator\">&lt;-</span>ch<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">go</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>wg<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>每個 Goroutine 都有自己的 stack，也會需要一些配置放在 heap，天下沒有白吃的午餐，第一個問題是，一個 Goroutine 會消耗多少資源？的確，我們知道 Goroutine 相對 Thread 更為輕量，但這是個比較級的說法，當要評估系統效能時，會需要具體的數字，好在 Go 標準包的 runtime package 可以監控 Goroutine 的數量跟記憶體的使用情況</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">var</span> m0 runtime<span class=\"token punctuation\">.</span>MemStats<br>    runtime<span class=\"token punctuation\">.</span><span class=\"token function\">ReadMemStats</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m0<span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">go</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>wg<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    runtime<span class=\"token punctuation\">.</span><span class=\"token function\">Gosched</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    runtime<span class=\"token punctuation\">.</span><span class=\"token function\">GC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">var</span> m1 runtime<span class=\"token punctuation\">.</span>MemStats<br>    runtime<span class=\"token punctuation\">.</span><span class=\"token function\">ReadMemStats</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m1<span class=\"token punctuation\">)</span><br><br>    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number of goroutines: %d\\n\"</span><span class=\"token punctuation\">,</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">NumGoroutine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Per goroutine:\\n\"</span><span class=\"token punctuation\">)</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  Memory: %.2f bytes\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">.</span>Sys<span class=\"token operator\">-</span>m0<span class=\"token punctuation\">.</span>Sys<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這裡用 m0 紀錄啟動 Goroutine 前的記憶體使用量，再用 m1 紀錄啟動 Goroutine 後的記憶體使用量。執行後可以得到答案</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">Number of goroutines: <span class=\"token number\">3000001</span><br>Per goroutine:<br>  Memory: <span class=\"token number\">2731.46</span> bytes<br>  Time:   <span class=\"token number\">2.083068</span> µs</code></pre>\n<p>每個 Goroutine 的初始大小大約是 2.7KB。可能有人會好奇，這 2.7KB 怎麼來的？就讓我們捲起袖子進一步往下追，如果寫個最簡單的 Goroutine 程式</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>查看它的 assembly code，可以得到</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go tool compile -N -l -S main.go<br><br>0x0014 00020 <span class=\"token punctuation\">(</span>main.go:6<span class=\"token punctuation\">)</span>        LEAQ    main.main.func1·f<span class=\"token punctuation\">(</span>SB<span class=\"token punctuation\">)</span>, AX<br>0x001b 00027 <span class=\"token punctuation\">(</span>main.go:6<span class=\"token punctuation\">)</span>        PCDATA  <span class=\"token variable\">$1</span>, <span class=\"token variable\">$0</span><br>0x001b 00027 <span class=\"token punctuation\">(</span>main.go:6<span class=\"token punctuation\">)</span>        NOP<br>0x0020 00032 <span class=\"token punctuation\">(</span>main.go:6<span class=\"token punctuation\">)</span>        CALL    runtime.newproc<span class=\"token punctuation\">(</span>SB<span class=\"token punctuation\">)</span><br>0x0025 00037 <span class=\"token punctuation\">(</span>main.go:9<span class=\"token punctuation\">)</span>        MOVL    <span class=\"token variable\">$1000000000</span>, AX<br>0x002a 00042 <span class=\"token punctuation\">(</span>main.go:9<span class=\"token punctuation\">)</span>        CALL    time.Sleep<span class=\"token punctuation\">(</span>SB<span class=\"token punctuation\">)</span><br>0x002f 00047 <span class=\"token punctuation\">(</span>main.go:10<span class=\"token punctuation\">)</span>       MOVQ    <span class=\"token number\">8</span><span class=\"token punctuation\">(</span>SP<span class=\"token punctuation\">)</span>, BP<br>0x0034 00052 <span class=\"token punctuation\">(</span>main.go:10<span class=\"token punctuation\">)</span>       ADDQ    <span class=\"token variable\">$16</span>, SP</code></pre>\n<p>Goroutine 關鍵字所在的 L6 會編譯成對 runtime.newproc 的調用，繼續往下查，runtime.newproc 的程式碼是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Create a new g running fn.</span><br><span class=\"token comment\">// Put it on the queue of g's waiting to run.</span><br><span class=\"token comment\">// The compiler turns a go statement into a call to this.</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">newproc</span><span class=\"token punctuation\">(</span>fn <span class=\"token operator\">*</span>funcval<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    gp <span class=\"token operator\">:=</span> <span class=\"token function\">getg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    pc <span class=\"token operator\">:=</span> <span class=\"token function\">getcallerpc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token function\">systemstack</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        newg <span class=\"token operator\">:=</span> <span class=\"token function\">newproc1</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> gp<span class=\"token punctuation\">,</span> pc<span class=\"token punctuation\">)</span><br><br>        _p_ <span class=\"token operator\">:=</span> <span class=\"token function\">getg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token function\">runqput</span><span class=\"token punctuation\">(</span>_p_<span class=\"token punctuation\">,</span> newg<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><br><br>        <span class=\"token keyword\">if</span> mainStarted <span class=\"token punctuation\">{</span><br>            <span class=\"token function\">wakep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>runtime.newproc 會再調用 runtime.newproc1，裡面相關的段落有</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Create a new g in state _Grunnable, starting at fn. callerpc is the</span><br><span class=\"token comment\">// address of the go statement that created this. The caller is responsible</span><br><span class=\"token comment\">// for adding the new g to the scheduler.</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">newproc1</span><span class=\"token punctuation\">(</span>fn <span class=\"token operator\">*</span>funcval<span class=\"token punctuation\">,</span> callergp <span class=\"token operator\">*</span>g<span class=\"token punctuation\">,</span> callerpc <span class=\"token builtin\">uintptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>g <span class=\"token punctuation\">{</span><br>  <span class=\"token comment\">//...</span><br>    newg <span class=\"token operator\">:=</span> <span class=\"token function\">gfget</span><span class=\"token punctuation\">(</span>_p_<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> newg <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        newg <span class=\"token operator\">=</span> <span class=\"token function\">malg</span><span class=\"token punctuation\">(</span>_StackMin<span class=\"token punctuation\">)</span><br>        <span class=\"token function\">casgstatus</span><span class=\"token punctuation\">(</span>newg<span class=\"token punctuation\">,</span> _Gidle<span class=\"token punctuation\">,</span> _Gdead<span class=\"token punctuation\">)</span><br>        <span class=\"token function\">allgadd</span><span class=\"token punctuation\">(</span>newg<span class=\"token punctuation\">)</span> <span class=\"token comment\">// publishes with a g->status of Gdead so GC scanner doesn't look at uninitialized stack.</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token comment\">//...</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>gfget</code> 會嘗試從空閒的 Goroutine 隊列中，取出可以使用的 Goroutine，「空閒」跟「隊列」牽涉到 Go 的排程器設計，有空再另外談，我們現在關心的是資源配置，如果 <code>gfget</code> 拿不到 Goroutine，就會用 <code>malg</code> 來分配記憶體，可以看到這裡使用常數 <code>_StackMin</code> 當參數，它的值是 2KB</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// The minimum size of stack used by Go code</span><br>_StackMin <span class=\"token operator\">=</span> <span class=\"token number\">2048</span></code></pre>\n<p>當然 Goroutine 還有一些其他的配置，但佔用最多的就是 stack，讓我們來想想，假設每個 stack 的配置空間是 2KB，1000 個 Goroutine 就至少需要吃掉 2MB 的記憶體空間。</p>\n<p>1000 個併發才 2MB，難怪會被說是輕量。這個數字聽起來很 ok，現在的記憶體動輒 16G 以上，即使是最低階的 AWS EC2 t2.nano，也是 0.5GB 起跳，區區 2MB 根本不放在眼裡。但問題是，有沒有想過，這些資源什麼時間點會被釋放呢？通常我們使用 Goroutine，會搭配 for 跟 select 來監聽 input，讓 Goroutine 保持 listen 的狀態，例如</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ch<span class=\"token punctuation\">:</span><br>        <span class=\"token comment\">// do something</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>而很不幸的，這個寫法中，因為資源一直保持活躍，它不會被釋放。假設每次呼叫 func 都會創建 Goroutine，但它又不會被釋放，這就造成了 Memory Leak。Go 是有 GC 的語言，開發者不用花太多精神去管理資源的生命週期，但這不代表它不會洩漏，對 Goroutine 的不當使用就是一項 Memory Leak 的常見原因。</p>\n<h2 id=\"%E4%BD%BF%E7%94%A8-context-%E7%AE%A1%E7%90%86-goroutine-%E4%B8%8A%E4%B8%8B%E6%96%87\"><a class=\"direct-link\" href=\"#%E4%BD%BF%E7%94%A8-context-%E7%AE%A1%E7%90%86-goroutine-%E4%B8%8A%E4%B8%8B%E6%96%87\">#</a> 使用 Context 管理 Goroutine 上下文</h2>\n<p>Memory Leak 的主要問題在於「該釋放的資源沒被釋放」，本質上，它是資源生命週期管理的問題，Goroutine 的資源在什麼時間點會被釋放呢？當 Goroutine 執行完畢時，它會呼叫 <code>runtime.goexit1</code></p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Finishes execution of the current goroutine.</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">goexit1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> raceenabled <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">racegoend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">if</span> trace<span class=\"token punctuation\">.</span>enabled <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">traceGoEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token function\">mcall</span><span class=\"token punctuation\">(</span>goexit0<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>runtime.goexit1</code> 又會再輾轉呼叫到 <code>gfput</code></p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Put on gfree list.</span><br><span class=\"token comment\">// If local list is too long, transfer a batch to the global list.</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">gfput</span><span class=\"token punctuation\">(</span>_p_ <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> gp <span class=\"token operator\">*</span>g<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token comment\">//...</span><br>    <span class=\"token keyword\">if</span> stksize <span class=\"token operator\">!=</span> <span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span>startingStackSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// non-standard stack size - free it.</span><br>        <span class=\"token function\">stackfree</span><span class=\"token punctuation\">(</span>gp<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span><br>        gp<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span>lo <span class=\"token operator\">=</span> <span class=\"token number\">0</span><br>        gp<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span>hi <span class=\"token operator\">=</span> <span class=\"token number\">0</span><br>        gp<span class=\"token punctuation\">.</span>stackguard0 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><br>    <span class=\"token punctuation\">}</span><br>    _p_<span class=\"token punctuation\">.</span>gFree<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>gp<span class=\"token punctuation\">)</span><br>    _p_<span class=\"token punctuation\">.</span>gFree<span class=\"token punctuation\">.</span>n<span class=\"token operator\">++</span>cont<br>  <span class=\"token comment\">//...</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>從程式碼可以看到，<code>gfput</code> 會釋放 stack，然後將 Goroutine 放到 Free List 中，等待下次使用。我們可以理解成，當 Goroutine 執行完畢後，它的資源就會被回收。</p>\n<p>因此要管理 Goroutine 的生命週期，要訣就是讓它可以依照調用者的意思來脫離無窮迴圈。實作上，調用者會傳入一個 channel 當 input，Goroutine 監聽這個 input，只要有訊號出現，就結束 Goroutine 的執行</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>finishCh<span class=\"token punctuation\">:</span><br>            <span class=\"token keyword\">return</span><br>        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>dataCh<span class=\"token punctuation\">:</span><br>            <span class=\"token comment\">// Do something</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>但如果直接用原生的 channel 來管理 Goroutine 結束訊號，會變得非常麻煩。舉個例子，G1 會生出一個 G2，G2 會生出一個 G3，他們之間是 G1 -&gt; G2 -&gt; G3 的關係，現在希望上游取消時，下游也跟著取消，你可以理解成父資源的釋放也要讓子資源跟著釋放，因此 G1 需要創建一個 channel，然後傳給 G2, G3，同理，G2 也需要創建自己的 channel，傳給 G3，而 G3 會類似這樣</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>g1Ch<span class=\"token punctuation\">:</span><br>            <span class=\"token keyword\">return</span><br>        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>g2Ch<span class=\"token punctuation\">:</span><br>            <span class=\"token keyword\">return</span><br>        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>dataCh<span class=\"token punctuation\">:</span><br>            <span class=\"token comment\">// Do something</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>可想而知這會讓併發的開發變得麻煩，好在 Go 有內建的 context 包，可以讓開發者更容易管理 Goroutine 間的上下文關係。</p>\n<p>Context 是個 interface，有 4 個 func，其中我們主要關心 <code>Done()</code>，這個 func 會傳回一個 channel，當 context 被取消時，這個 channel 會送出 <code>struct{}</code> 作為訊號</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>            <span class=\"token keyword\">return</span><br>        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>dataCh<span class=\"token punctuation\">:</span><br>            <span class=\"token comment\">// Do something</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span></code></pre>\n<p>你可能會覺得奇怪，Context 的 interface 中沒有 Cancel 這個 func，「取消」context 是什麼意思？這項設計反映了 Go 的 less is more 哲學，因為取消通常跟業務場景密切關聯，像是，有些人可能希望在取消的指令中放進更多資訊，因此 Go 不將具體的 Cancel 放在標準包中，只提供了 <code>Done()</code>，讓各家去實作，儘管如此，因為併發控制是非常常見的情境，Go 也有提供 <code>WithCancel</code> 讓開發者開箱即用。</p>\n<p>對 <code>WithCancel</code> 的使用通常是</p>\n<pre class=\"language-go\"><code class=\"language-go\">ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>            <span class=\"token keyword\">return</span><br>        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>dataCh<span class=\"token punctuation\">:</span><br>            <span class=\"token comment\">// Do something</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><br><span class=\"token comment\">// if you want to cancel goroutine</span><br><span class=\"token keyword\">if</span> IsExecption <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>當調用 <code>WithCancel</code> 傳回的 cancel func 後，<code>ctx.Done</code> 就會送出結束訊號。它的原理是什麼？為什麼能簡化原本的 channel？事實上，Goroutine 間的調用關係可以理解成一個樹狀結構，假設每個 Goroutine 都持有各自的 context，那麼，context 間也能理解成是樹狀結構</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2023/concurrency-of-go-goroutine-lifetime/context_tree.png\" />\n</p>\n<p>如果希望上游的 Context，像是 context 2 取消後，下游的 context 4, 5 也能跟著取消，直覺解法是使用 DFS，讓 context 2 的 cancel 遞迴呼叫下層的 cancel。</p>\n<p>來看看 <code>WithCancel</code> 怎麼實現這個概念。<code>WithCancel</code> 會傳入一個 parent Context</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// A cancelCtx can be canceled. When canceled, it also cancels any children</span><br><span class=\"token comment\">// that implement canceler.</span><br><span class=\"token keyword\">type</span> cancelCtx <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    Context<br><br>    mu       sync<span class=\"token punctuation\">.</span>Mutex            <span class=\"token comment\">// protects following fields</span><br>    done     atomic<span class=\"token punctuation\">.</span>Value          <span class=\"token comment\">// of chan struct{}, created lazily, closed by first cancel call</span><br>    children <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>canceler<span class=\"token punctuation\">]</span><span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// set to nil by the first cancel call</span><br>    err      <span class=\"token builtin\">error</span>                 <span class=\"token comment\">// set to non-nil by the first cancel call</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ctx Context<span class=\"token punctuation\">,</span> cancel CancelFunc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> parent <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot create context from nil parent\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    c <span class=\"token operator\">:=</span> <span class=\"token function\">newCancelCtx</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><br>    <span class=\"token function\">propagateCancel</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> Canceled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// newCancelCtx returns an initialized cancelCtx.</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">newCancelCtx</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">)</span> cancelCtx <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> cancelCtx<span class=\"token punctuation\">{</span>Context<span class=\"token punctuation\">:</span> parent<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這個 parent context 會在 <code>newCancelCtx</code> 中被包進 cancelCtx 這個 struct，cancelCtx 同時實現了 Context 跟 canceler 的 interface，因此它也具有 cancel func。仔細觀察它的字段，Context 用來儲存上游 Context，children 則用來儲存下游 Context，對 cancelCtx 來說，它同時兼具了往上或往下查找的能力。</p>\n<p>當執行 <code>propagateCancel</code> 時，<code>parentCancelCtx</code> 會在樹結構中向上搜尋，直到找到另一個 cancelCtx，然後將當前的 Context 掛進 parent context 的 children 中</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// propagateCancel arranges for child to be canceled when parent is.</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">propagateCancel</span><span class=\"token punctuation\">(</span>parent Context<span class=\"token punctuation\">,</span> child canceler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">//...</span><br>    <span class=\"token keyword\">if</span> p<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token function\">parentCancelCtx</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">//...</span><br>            <span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span>children <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>                p<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>canceler<span class=\"token punctuation\">]</span><span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><br>            p<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>        <span class=\"token comment\">//...</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token comment\">//...</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>當 <code>WithCancel</code> 的 <code>cancel</code> 被執行時，它會呼叫 cancelCtx 的 cancel func</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// cancel closes c.done, cancels each of c's children, and, if</span><br><span class=\"token comment\">// removeFromParent is true, removes c from its parent's children.</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>cancelCtx<span class=\"token punctuation\">)</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span>removeFromParent <span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">//...</span><br>    d<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> d <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        c<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">.</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>closedchan<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">for</span> child <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>children <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// NOTE: acquiring the child's lock while holding parent's lock.</span><br>        child<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token comment\">//...</span><br>    <span class=\"token keyword\">if</span> removeFromParent <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這邊做三件事，關閉 channel，取消所有 child Context，以及從 parent Context 中移除自己。完成這些事情後，所有 select ctx.Done() 的 Goroutine 都可以被釋放，而 context 本身也因為不再有人引用，會自動被 GC 回收。這裡有另一個常見的 Memory Leak，如果使用了 cancelContext，但卻沒有執行 cancel 指令的話，它會持續掛在 parent Context 底下而不會被回收掉，因此記得在離開 func 前，無論 Goroutine 是否有完成任務，都要執行 cancel()。</p>\n<p>雖然程式碼看起來有些複雜，但原理很漂亮，利用 tree 做個雙向連結，就能有效管理 Goroutine 的生命週期，可能也是因為太好用了，基本上大家都用標準包的 Context，不太會看到自己實現 cancel 的例子。</p>\n<h2 id=\"%E6%90%B6%E5%8D%A0%E5%BC%8F%E8%A8%AD%E8%A8%88\"><a class=\"direct-link\" href=\"#%E6%90%B6%E5%8D%A0%E5%BC%8F%E8%A8%AD%E8%A8%88\">#</a> 搶占式設計</h2>\n<p>依照 CSP 的理論，Goroutine 內會是循序操作，這就意味著，雖然 Goroutine 會用 select 來監聽結束訊號，但如果當訊號發出時，Goroutine 正在忙碌中，它會將手中的任務忙完才會關閉 Goroutine。這是個好的特性，能確保 Goroutine 的關閉都是 Graceful，有經過妥善處理，但另一方面也引伸出一些新問題，例如，如果 Goroutine 的忙碌時間太久，久到沒辦法用 ctx.Done 來關閉的話呢？</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>            <span class=\"token keyword\">return</span><br>        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>dataCh<span class=\"token punctuation\">:</span><br>            <span class=\"token function\">DoLongTimeJob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span></code></pre>\n<p>我們來看看 fasthttp 怎麼處理</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">clientDoDeadline</span><span class=\"token punctuation\">(</span>req <span class=\"token operator\">*</span>Request<span class=\"token punctuation\">,</span> resp <span class=\"token operator\">*</span>Response<span class=\"token punctuation\">,</span> deadline time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">,</span> c clientDoer<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>    timeout <span class=\"token operator\">:=</span> <span class=\"token operator\">-</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>deadline<span class=\"token punctuation\">)</span><br>    <span class=\"token comment\">//...</span><br>    <span class=\"token keyword\">var</span> ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">error</span><br>    <span class=\"token comment\">//...</span><br>    <span class=\"token keyword\">var</span> mu sync<span class=\"token punctuation\">.</span>Mutex<br>    <span class=\"token keyword\">var</span> timedout<span class=\"token punctuation\">,</span> responded <span class=\"token builtin\">bool</span><br>    <span class=\"token comment\">//...</span><br>    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">//...</span><br>        errDo <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>reqCopy<span class=\"token punctuation\">,</span> respCopy<span class=\"token punctuation\">)</span><br>        mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>timedout <span class=\"token punctuation\">{</span><br>                <span class=\"token comment\">//...</span><br>                ch <span class=\"token operator\">&lt;-</span> errDo<br>                responded <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>        mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token comment\">//...</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>    tc <span class=\"token operator\">:=</span> <span class=\"token function\">AcquireTimer</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">var</span> err <span class=\"token builtin\">error</span><br>    <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">case</span> err <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;-</span>ch<span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>tc<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">:</span><br>        mu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">if</span> responded <span class=\"token punctuation\">{</span><br>                err <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;-</span>ch<br>            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>                timedout <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><br>                err <span class=\"token operator\">=</span> ErrTimeout<br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>        mu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token comment\">//...</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這個 func 用來處理帶有 timeout 的請求，我們將焦點擺在，fasthttp 是怎麼處理請求時間大於 timeout 的問題？func 主要分成兩塊，一塊是 select，會等待請求完成，或者請求超時；另一塊是 Goroutine，會執行請求，並將結果傳給 select 監聽的 channel。因為 select 會阻塞等待結果或超時，這就達到了類似搶占式的效果，只要一超時，func 就立刻返回，不會再等待。</p>\n<p>那 Goroutine 呢？這裡的 Goroutine 像是用後即棄的資源，它在超時後依然會繼續執行，只是 final statement 的操作都不會放在裡面，不影響 Graceful shutdown。假設 Goroutine 在很久後的某個時間點執行完畢，它看到被放生了，就會默默自行關閉。這給了我們一個提示：重要的不僅是知道 Goroutine 何時關閉，也要知道 Goroutine 關閉前需要處置哪些資源。</p>\n<h2 id=\"%E5%9F%B7%E8%A1%8C%E6%9C%9F%E9%96%93%E7%9A%84%E7%95%B0%E5%B8%B8%E7%8B%80%E6%B3%81\"><a class=\"direct-link\" href=\"#%E5%9F%B7%E8%A1%8C%E6%9C%9F%E9%96%93%E7%9A%84%E7%95%B0%E5%B8%B8%E7%8B%80%E6%B3%81\">#</a> 執行期間的異常狀況</h2>\n<p>前面的例子都在討論怎麼讓 Goroutine 能夠關閉，不要永久佔用資源，但另一方面，Goroutine 也可能因為種種原因突然關閉，例如程式設計不當，存取了 nil address，或是沒設計好 critical section 導致 concurrency access，當然，還有重複關閉 channel。</p>\n<p>為了保證 Goroutine 的錯誤不會造成系統崩潰，通常會在 Goroutine 中放入 recover，確保它能留下錯誤訊息然後結束</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">recover</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"panic\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>另外，Goroutine 也可能在執行期間出現 Dead Lock，導致任務無法正常執行，像這樣無法正常運作的 Goroutine 稱為 unhealthy，要如何確認 Goroutine 是不是 healthy 呢？最簡單的方式，就是定期打 heartbeat 出來，只要 heartbeat 有正常送出，代表 Goroutine 仍然在正常運行。</p>\n<p>讓我們看個例子，底下是由 <a href=\"https://github.com/kat-co/concurrency-in-go-src\"><em>Concurrency In Go</em></a> 中取出的簡化版本</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">const</span> timeout <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<br>    dataCh <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    heartbeat <span class=\"token operator\">:=</span> <span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> dataCh<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>        dataCh <span class=\"token operator\">&lt;-</span> i<br>        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>heartbeat<span class=\"token punctuation\">:</span><br>            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"receive heartbeat\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">After</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker goroutine is not healthy!\"</span><span class=\"token punctuation\">)</span><br>            <span class=\"token keyword\">return</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這個範例會透過 <code>dataCh</code> 將資料傳給 <code>doWork</code> 內的 Goroutine 處理，同時在外面定期接收一個 1s 的 heartbeat，如果 2s 沒收到，就判定 Goroutine unhealthy，印出錯誤訊息。</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> pulseInterval time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">,</span> dataCh <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><br>    heartbeat <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        pulse <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Tick</span><span class=\"token punctuation\">(</span>pulseInterval<span class=\"token punctuation\">)</span><br>        sendPulse <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">case</span> heartbeat <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span><br>            <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">// &lt;1></span><br>                <span class=\"token keyword\">return</span><br>            <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>pulse<span class=\"token punctuation\">:</span>  <span class=\"token comment\">// &lt;2></span><br>                <span class=\"token function\">sendPulse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>            <span class=\"token keyword\">case</span> i <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>dataCh<span class=\"token punctuation\">:</span>  <span class=\"token comment\">// &lt;3></span><br>                fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"processing %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><br>                <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">{</span><br>                    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span> <span class=\"token comment\">// assume dead lock</span><br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> heartbeat<br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>doWork</code> 內會建立 heartbeat channel 並放入閉包中。閉包內有三種 input：(1) 收到 Done 就結束 Goroutine；(2) 收到 timer 的提醒就送出 heartbeat；(3) 收到 data 就進行處理。從 CSP input/output 的觀點來看，加上 heartbeat 就是替 Goroutine 多添上 1 個 input 跟 1 個 output。而因為 CSP 循序執行的特性，如果 (3) 處理太久，將阻塞其他 input 的進行，變相阻止了 (2) 的 output 的輸出，外面監聽的程式就能知道 Goroutine 已經 dead lock 了。</p>\n<p>來執行一下</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> go run main.go<br><br>processing <span class=\"token number\">0</span><br>receive heartbeat<br>processing <span class=\"token number\">1</span><br>receive heartbeat<br>processing <span class=\"token number\">2</span><br>receive heartbeat<br>processing <span class=\"token number\">3</span><br>receive heartbeat<br>processing <span class=\"token number\">4</span><br>receive heartbeat<br>processing <span class=\"token number\">5</span><br>worker goroutine is not healthy<span class=\"token operator\">!</span></code></pre>\n<p>前面五個任務都正常運作，到第六個任務時，刻意讓 Goroutine 進入長時間睡眠，外頭監聽的 select 遲遲沒收到 heartbeat，就印出錯誤訊息並結束程式。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>這篇談的細節比較多，但核心概念都是「如何控制 Goroutine 的狀態」，在設計併發時，盡可能把握住幾個原則</p>\n<ul>\n<li>每個 Goroutine 都要有結束條件</li>\n<li>每個 Goroutine 都要有 recover 來捕捉 panic</li>\n<li>關閉 Goroutine 前，注意相關的資源是不是都有釋放</li>\n<li>Goroutine 的處理任務盡可能簡單，讓它能保持無狀態</li>\n</ul>\n<p>雖然像 heartbeat 這類技巧能更全面監控 Goroutine 的運行，但多少違反了簡單原則，在導入時要特別小心。如果有注意到的話，前面範例中的 heartbeat 不是直接用 time.Tick，而是包了一個 func 來送出，這是因為 receiver 要是沒有好好接收，反而會變成另一個 dead lock，塞住 Goroutine 的執行。</p>\n<p>總之 Goroutine 不是免費的，我曾經遇過因為太方便開了一堆，結果峰值流量衝進來，直接打掛服務，最後還是要用 ratelimit 跟 Worker Pool 來控制數量。也希望看完這篇後，大家都能避免無意間埋下 OOM 的地雷。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://tpaschalis.me/goroutines-size/\">What is a goroutine? And what is their size?</a></li>\n<li><a href=\"https://go.dev/src/runtime/stack.go#L950\">Source file src/runtime/stack.go</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/389029496\">Goroutine 的数量有上限吗？</a></li>\n<li><a href=\"https://github.com/kat-co/concurrency-in-go-src\">GitHub - kat-co/concurrency-in-go-src</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000039294140\">深度解析go context实现原理及其源码</a></li>\n<li><a href=\"https://go.dev/talks/2012/concurrency.slide#1\">Go Concurrency Patterns</a></li>\n</ul>\n",
      "date_published": "2023-01-06T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2022/concurrency-of-go-worker-pool/",
      "url": "https://blog.kenwsc.com/posts/2022/concurrency-of-go-worker-pool/",
      "title": "Goroutine 的併發治理：管理 Worker Pool",
      "content_html": "<p>併發會需要多個 Goroutine 來同時執行任務，Goroutine 雖然輕量，也還是有配置成本，如果每次新的任務進來，都需要重新建立並配置 Goroutine，一方面不容易管理 Goroutine 的記憶體，一方面也會消耗 CPU 的運算效能。這時 Worker Pool 就登場了，我們可以在執行前，先將 Goroutine 配置好放到資源池中，要用時再調用閒置資源來處理，藉此資源回收重複利用。這篇文章會從 0 開始建立 Work Pool，試著丟進不同的場景需求，看看如何實現。</p>\n<h2 id=\"%E5%9F%BA%E6%9C%AC%E7%9A%84-worker-pool\"><a class=\"direct-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%9A%84-worker-pool\">#</a> 基本的 Worker Pool</h2>\n<p>Worker Pool 的概念可以用這張圖來解釋</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2022/concurrency-of-go-worker-pool/worker-1.png\" />\n</p>\n<p>Job 會放在 Queue 中送給 Pool 內配置好的 Worker，Worker 處理完後再將結果送到另一個 Queue 內。因為這是很常見的併發模式，<a href=\"https://gobyexample.com/worker-pools\">Go by Example</a> 有個精簡的例子，說明 Worker Pool 如何實現</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>id <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> jobs <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> results <span class=\"token keyword\">chan</span><span class=\"token operator\">&lt;-</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> jobs <span class=\"token punctuation\">{</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> <span class=\"token string\">\"started  job\"</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><br>        time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> <span class=\"token string\">\"finished job\"</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><br>        results <span class=\"token operator\">&lt;-</span> j <span class=\"token operator\">*</span> <span class=\"token number\">2</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">const</span> numJobs <span class=\"token operator\">=</span> <span class=\"token number\">5</span><br>    jobs <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> numJobs<span class=\"token punctuation\">)</span><br>    results <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> numJobs<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">for</span> w <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> w <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> w<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">go</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> jobs<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> numJobs<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>        jobs <span class=\"token operator\">&lt;-</span> j<br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">for</span> a <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;=</span> numJobs<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token operator\">&lt;-</span>results<br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Worker Pool 的特點是一次配置，多次執行。先建立 Worker 的 input / output channel，這裡用 <code>jobs</code> 跟 <code>results</code>。接著用 Goroutine 起好所有的 worker，並監聽 <code>jobs</code> 的資訊。然後就可以開始往 <code>jobs</code> 內丟工作，並到 <code>results</code> 等著接收處理完的訊息。</p>\n<p>這段程式讓 Job 可以併發執行，但它沒經過封裝，資訊比較散，例如要修改 worker 數量的話，需要修改 <code>numJobs</code> 這個變數；如果希望 channel 可以 buffer 還沒處理的 job，則需要修改 <code>jobs</code> 初始化的命令。這些跟 Goroutine 管理相關的邏輯，可以宣告個 Worker Pool 的 struct 來集中管理。</p>\n<p>經過封裝的 Worker Pool 變成</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    pool <span class=\"token operator\">:=</span> <span class=\"token function\">NewWorkerPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>    pool<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>            pool<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    pool<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">type</span> WorkerPool <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    jobCh     <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><br>    done      <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>    queueLen  <span class=\"token builtin\">int</span><br>    workerCnt <span class=\"token builtin\">int</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">NewWorkerPool</span><span class=\"token punctuation\">(</span>queueLen <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> workerCnt <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>WorkerPool <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>WorkerPool<span class=\"token punctuation\">{</span><br>        jobCh<span class=\"token punctuation\">:</span>     <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> queueLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>        done<span class=\"token punctuation\">:</span>      <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>        queueLen<span class=\"token punctuation\">:</span>  queueLen<span class=\"token punctuation\">,</span><br>        workerCnt<span class=\"token punctuation\">:</span> workerCnt<span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>WorkerPool<span class=\"token punctuation\">)</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> p<span class=\"token punctuation\">.</span>workerCnt<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> p<span class=\"token punctuation\">.</span>jobCh <span class=\"token punctuation\">{</span><br>                time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span><br>                fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token string\">\"finished job\"</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><br>                p<span class=\"token punctuation\">.</span>done <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>WorkerPool<span class=\"token punctuation\">)</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>j <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    p<span class=\"token punctuation\">.</span>jobCh <span class=\"token operator\">&lt;-</span> j<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>WorkerPool<span class=\"token punctuation\">)</span> <span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span>total <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> cnt <span class=\"token builtin\">int</span><br>    <span class=\"token keyword\">for</span> <span class=\"token keyword\">range</span> p<span class=\"token punctuation\">.</span>done <span class=\"token punctuation\">{</span><br>        cnt<span class=\"token operator\">++</span><br>        <span class=\"token keyword\">if</span> cnt <span class=\"token operator\">==</span> total <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>我們把 input/output 兩個 channel 都放進 Worker Pool 內，並在 <code>Run()</code> 中配置與啟動 Goroutine，而 <code>Push</code> 則用來將 Job 放進 Queue 中，最後用 <code>Wait</code> 來等待所有任務執行完成。這與 Go by Example 的邏輯相同，只是外面用 OOP 的概念多封裝一層。</p>\n<p>試著執行一下</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">worker <span class=\"token number\">1</span> finished job <span class=\"token number\">2</span><br>worker <span class=\"token number\">2</span> finished job <span class=\"token number\">1</span><br>worker <span class=\"token number\">4</span> finished job <span class=\"token number\">4</span><br><span class=\"token punctuation\">..</span>.<br>worker <span class=\"token number\">4</span> finished job <span class=\"token number\">98</span><br>worker <span class=\"token number\">1</span> finished job <span class=\"token number\">96</span><br>worker <span class=\"token number\">2</span> finished job <span class=\"token number\">97</span></code></pre>\n<p>這邊有個有意思的問題，task number 該由 WorkPool 來管理，還是該由 main func 來管理？就我的觀點來說，有多少任務只有 Worker Pool 的調用方知道，因此讓 main func 來作這件事比較妥當。</p>\n<h2 id=\"%E6%9C%89-timeout-%E7%9A%84%E7%AD%89%E5%BE%85\"><a class=\"direct-link\" href=\"#%E6%9C%89-timeout-%E7%9A%84%E7%AD%89%E5%BE%85\">#</a> 有 Timeout 的等待</h2>\n<p>讓我們多加一些場景需求進去。假設 Worker 中可能會有長時間執行的任務，為了避免執行時間太長，超過規格容許程度。要在 <code>Wait</code> 時設定 timeout，超過就退出並回覆一個 timeout error。</p>\n<p>這個需求只要活用 Go select 的能力就可以達成。什麼是 select？這是一個用來監聽 input 的命令，只要有 input 進來就會觸發後續的處理。熟悉 C 語言的工程師應該能想到 C 中的 select function，的確，兩者的語義是類似，只是 C 主要是用來監聽文件描述符，而 Go 擴大了 input 的使用範圍。讓我們多問一個問題，假設一個程序有兩個 input，兩個 input 同時有值進來，程序應該要先執行哪個 input 的值？這要回到 CSP 的定義來看</p>\n<p>在 CSP 模型的第五點，Tony Hoare 說</p>\n<blockquote>\n<p>If several input guards of a set of alternatives have ready destinations, only one is selected and the others have no effect; but the choice between them is arbitrary.</p>\n<p>如果多個守護命令成立，只有一個會被執行，其他的沒有效果。但是要選擇哪個執行則是隨機。</p>\n</blockquote>\n<p>事實上，Go 也是這麼實現的</p>\n<blockquote>\n<p>A select blocks until one of its cases can run, then it executes that case. It chooses one at random if multiple are ready.</p>\n<p>select 會阻塞直到其中一個 case 可以執行，當多個 case 可以執行時，則隨機選擇一個。</p>\n</blockquote>\n<p>Tony Hoare 沒詳細解釋這樣設計的原因，但我想，這是避免 input 間存在隱性的相依關係，如果 input 的 select 是隨機的，等於說兩個 input 的地位相等。</p>\n<p>回來看 timeout 的實現，這邊只要修改 <code>Wait()</code> 就可以了</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>WorkerPool<span class=\"token punctuation\">)</span> <span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span>d time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">,</span> total <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> cnt <span class=\"token builtin\">int</span><br>    timeout <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">After</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>timeout<span class=\"token punctuation\">:</span><br>            <span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeout\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>p<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">:</span><br>            cnt<span class=\"token operator\">++</span><br>            <span class=\"token keyword\">if</span> cnt <span class=\"token operator\">==</span> total <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>試著執行，可以看到</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">worker <span class=\"token number\">3</span> finished job <span class=\"token number\">3</span><br>worker <span class=\"token number\">0</span> finished job <span class=\"token number\">0</span><br><span class=\"token punctuation\">..</span>.<br>worker <span class=\"token number\">0</span> finished job <span class=\"token number\">43</span><br>worker <span class=\"token number\">1</span> finished job <span class=\"token number\">44</span><br>worker <span class=\"token number\">4</span> finished job <span class=\"token number\">41</span><br><span class=\"token function\">timeout</span><br>worker <span class=\"token number\">4</span> finished job <span class=\"token number\">49</span><br>worker <span class=\"token number\">3</span> finished job <span class=\"token number\">45</span><br>worker <span class=\"token number\">0</span> finished job <span class=\"token number\">47</span><br>worker <span class=\"token number\">2</span> finished job <span class=\"token number\">46</span><br>worker <span class=\"token number\">1</span> finished job <span class=\"token number\">48</span></code></pre>\n<p>timeout 後，只有還在執行的 job 會被執行完，其他的就不再執行。</p>\n<h2 id=\"%E5%82%B3%E9%81%9E-job-%E8%80%8C%E4%B8%8D%E6%98%AF%E8%B3%87%E6%96%99\"><a class=\"direct-link\" href=\"#%E5%82%B3%E9%81%9E-job-%E8%80%8C%E4%B8%8D%E6%98%AF%E8%B3%87%E6%96%99\">#</a> 傳遞 Job 而不是資料</h2>\n<p>在前面的範例中，我們都是拿 i 當 input，但這是傳遞資料給 worker 處理，處理邏輯還是放在 worker 中。如果處理的邏輯改變了，原本的設計就會失敗。資料跟處理邏輯應該是兩件事，如果想讓調用端自定義 Job 處理的方式，可以怎麼做？直覺做法是類似 callback function，調用端註冊要執行的 func，等到條件符合時，註冊的 func 就會自動被調用。在 Go 語言，func 是一等公民，我們可以換個角度想，如果把 func 也當成一種值，只要把 func 丟進 Queue 中，讓 worker 自行呼叫就好了。</p>\n<p>先來設計 Job 的樣子</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Job <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    Fn <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">NewJob</span><span class=\"token punctuation\">(</span>fn <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> Job <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> Job<span class=\"token punctuation\">{</span><br>        Fn<span class=\"token punctuation\">:</span> fn<span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">*</span>Job<span class=\"token punctuation\">)</span> <span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">.</span><span class=\"token function\">Fn</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>NewJob</code> 會吃進一個 func，把它包裝起來，在 worker 內，只需要用 <code>Do()</code> 來呼叫它</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>WorkerPool<span class=\"token punctuation\">)</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> p<span class=\"token punctuation\">.</span>workerCnt<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> p<span class=\"token punctuation\">.</span>jobCh <span class=\"token punctuation\">{</span><br>                j<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><br>                p<span class=\"token punctuation\">.</span>done <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>而具體的邏輯，會放在 main func 內</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    pool <span class=\"token operator\">:=</span> <span class=\"token function\">NewWorkerPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>    pool<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>            num <span class=\"token operator\">:=</span> i<br>            pool<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span><span class=\"token function\">NewJob</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>                time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span><br>                fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token string\">\"finished job\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><br>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> pool<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"%E9%A9%97%E8%AD%89%E8%A8%AD%E8%A8%88\"><a class=\"direct-link\" href=\"#%E9%A9%97%E8%AD%89%E8%A8%AD%E8%A8%88\">#</a> 驗證設計</h2>\n<p>使用併發後，應該能帶來效能上的提升，但至於實際上改善多少？有沒有如同預期？會需要另外設計 Benchmark 來確認併發有沒有發揮作用。</p>\n<p>關於 Benchmark，可以從三個面向來看，第一個是第一項任務完成時間，在一個響應式的系統中，第一項任務完成時間會關係到使用者多快可以得到回饋，好知道請求有被執行；第二個是每項任務平均完成時間，理想情況下，各任務的完成時間應該會差不多，但如果有資源阻塞的情況，就可能拉長某些任務的處理時間；第三個是全部任務完成時間，從端到端的觀點來看，代表整個請求的處理被完成。</p>\n<p>我們把效能監控交給一個背景執行的 Goroutine 負責，稱它為 Gb，用來統計各個 Worker Pool 中各 Goroutine 的執行情況，Worker Pool 的 Goroutine 會在開始跟結束時，各送一個訊號給 Gb</p>\n<pre class=\"language-go\"><code class=\"language-go\">startCh <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><br>endCh <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><br><br>pool<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span><span class=\"token function\">NewJob</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>    startCh <span class=\"token operator\">&lt;-</span> num<br>    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span><br>    endCh <span class=\"token operator\">&lt;-</span> num<br>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>而 Gb 會監控這個訊號，並轉成需要的 metric，等到執行完畢時印出</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">statWork</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> startCh <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> endCh <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> first time<span class=\"token punctuation\">.</span>Duration<br>    <span class=\"token keyword\">var</span> periods <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>time<span class=\"token punctuation\">.</span>Duration<br>    startTs <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span>time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">)</span><br>    startTime <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    done <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">case</span> n <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>startCh<span class=\"token punctuation\">:</span><br>                startTs<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>            <span class=\"token keyword\">case</span> n <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>endCh<span class=\"token punctuation\">:</span><br>                period <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>startTs<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>                periods <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>periods<span class=\"token punctuation\">,</span> period<span class=\"token punctuation\">)</span><br>                <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>periods<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span><br>                    first <span class=\"token operator\">=</span> period<br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>                total <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>startTime<span class=\"token punctuation\">)</span><br>                <span class=\"token keyword\">var</span> allPeriod time<span class=\"token punctuation\">.</span>Duration<br>                <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> p <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> periods <span class=\"token punctuation\">{</span><br>                    allPeriod <span class=\"token operator\">+=</span> p<br>                <span class=\"token punctuation\">}</span><br>                average <span class=\"token operator\">:=</span> allPeriod <span class=\"token operator\">/</span> <span class=\"token number\">100</span><br>                fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first: %v, average: %v, total: %v\\n\"</span><span class=\"token punctuation\">,</span> first<span class=\"token punctuation\">,</span> average<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">)</span><br>                done <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>                <span class=\"token keyword\">return</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> done<br><span class=\"token punctuation\">}</span></code></pre>\n<p>另外，我們不僅想知道執行後的 metric，我們也想知道執行時的狀況是否如同預期，像是有多少 Job 正在「執行中」，又有多少 Job 已經「被完成」，因此多加一個 ticker，每 20ms 印出一次執行狀況</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">statWork</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> startCh <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> endCh <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><br>    ticker <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">NewTicker</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">var</span> wip<span class=\"token punctuation\">,</span> cnt <span class=\"token builtin\">int</span><br>    <span class=\"token comment\">// ...</span><br>    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ticker<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">:</span><br>                fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ts: %v, wip: %d, cnt: %d \\n\"</span><span class=\"token punctuation\">,</span><br>                    time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                    wip<span class=\"token punctuation\">,</span><br>                    cnt<span class=\"token punctuation\">,</span><br>                <span class=\"token punctuation\">)</span><br>            <span class=\"token comment\">// ...</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token comment\">// ...</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>先看在沒有併發的情況下，得到的結果</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ts: <span class=\"token number\">20</span>.533328ms, wip: <span class=\"token number\">1</span>, cnt: <span class=\"token number\">0</span> <br>ts: <span class=\"token number\">40</span>.240159ms, wip: <span class=\"token number\">1</span>, cnt: <span class=\"token number\">0</span> <br>ts: <span class=\"token number\">61</span>.060294ms, wip: <span class=\"token number\">1</span>, cnt: <span class=\"token number\">0</span> <br>ts: <span class=\"token number\">81</span>.064288ms, wip: <span class=\"token number\">1</span>, cnt: <span class=\"token number\">0</span> <br>ts: <span class=\"token number\">101</span>.070834ms, wip: <span class=\"token number\">1</span>, cnt: <span class=\"token number\">0</span> <br>ts: <span class=\"token number\">120</span>.955999ms, wip: <span class=\"token number\">1</span>, cnt: <span class=\"token number\">1</span> <br>ts: <span class=\"token number\">140</span>.383283ms, wip: <span class=\"token number\">1</span>, cnt: <span class=\"token number\">1</span> <br><span class=\"token comment\"># ...</span><br>ts: <span class=\"token number\">10</span>.001063663s, wip: <span class=\"token number\">1</span>, cnt: <span class=\"token number\">99</span> <br>ts: <span class=\"token number\">10</span>.021033326s, wip: <span class=\"token number\">1</span>, cnt: <span class=\"token number\">99</span> <br>first: <span class=\"token number\">101</span>.164179ms, average: <span class=\"token number\">100</span>.386499ms, total: <span class=\"token number\">10</span>.039199429s</code></pre>\n<p>第一個任務用時 101.16ms，平均 100.38ms，因為總共有 100 個 job，所以總共用了 10s 左右的時間，跟預期差不多。另外執行時的 wip 都是 1，顯示同時間只有一個 worker 在執行。</p>\n<p>再來看有併發的結果</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ts: <span class=\"token number\">20</span>.569597ms, wip: <span class=\"token number\">5</span>, cnt: <span class=\"token number\">0</span> <br>ts: <span class=\"token number\">40</span>.118856ms, wip: <span class=\"token number\">5</span>, cnt: <span class=\"token number\">0</span> <br>ts: <span class=\"token number\">61</span>.041621ms, wip: <span class=\"token number\">5</span>, cnt: <span class=\"token number\">0</span> <br>ts: <span class=\"token number\">80</span>.207746ms, wip: <span class=\"token number\">5</span>, cnt: <span class=\"token number\">0</span> <br>ts: <span class=\"token number\">101</span>.211041ms, wip: <span class=\"token number\">5</span>, cnt: <span class=\"token number\">2</span> <br>ts: <span class=\"token number\">121</span>.074584ms, wip: <span class=\"token number\">5</span>, cnt: <span class=\"token number\">5</span><br><span class=\"token comment\"># ...</span><br>ts: <span class=\"token number\">1</span>.980522061s, wip: <span class=\"token number\">5</span>, cnt: <span class=\"token number\">95</span> <br>ts: <span class=\"token number\">2</span>.000850008s, wip: <span class=\"token number\">5</span>, cnt: <span class=\"token number\">95</span> <br>first: <span class=\"token number\">100</span>.971561ms, average: <span class=\"token number\">99</span>.18092ms, total: <span class=\"token number\">2</span>.003859502s</code></pre>\n<p>第一個任務用時 100.97ms，平均 99.18ms，跟沒併發的情況差異不大，因為開了 5 個 Goroutine 去分擔 Job，全部任務完成時間縮短為 1/5，只有 2s 左右。另外執行時的 wip 都是 5，每個 worker 都有吃到工作，完成數也穩定上升，偶爾有 2 跳到 5 這樣的情況，代表每個 worker 不一定會同時完成任務。</p>\n<p>從結果可以看出來，併發對第一項任務完成時間的幫助不大，因為本質上，併發是利用阻塞的時間處理其他事情，而第一項任務通常還不會有阻塞問題；但由於有效利用了阻塞時間，在全部任務完成時間可以得到有效提升。</p>\n<p>最後，再看看同樣是併發，有 worker pool 跟沒有 worker pool 在效能上會差多少，這邊用 go 的 benchmark 來測試</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkPool</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    pool <span class=\"token operator\">:=</span> <span class=\"token function\">NewWorkerPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>    pool<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    b<span class=\"token punctuation\">.</span><span class=\"token function\">ResetTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>        wg <span class=\"token operator\">:=</span> sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>            pool<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span><span class=\"token function\">NewJob</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>                wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkNoPool</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>        wg <span class=\"token operator\">:=</span> sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>執行後得到</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go <span class=\"token builtin class-name\">test</span> -v -bench<span class=\"token operator\">=</span><span class=\"token string\">\".\"</span> <span class=\"token builtin class-name\">.</span><br>goos: darwin<br>goarch: amd64<br>cpu: Intel<span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span> Core<span class=\"token punctuation\">(</span>TM<span class=\"token punctuation\">)</span> i7-9750H CPU @ <span class=\"token number\">2</span>.60GHz<br>BenchmarkPool<br>BenchmarkPool-12           <span class=\"token number\">70965</span>             <span class=\"token number\">16668</span> ns/op<br>BenchmarkNoPool<br>BenchmarkNoPool-12         <span class=\"token number\">58084</span>             <span class=\"token number\">20715</span> ns/op</code></pre>\n<p>大約能改善 22% 的效能，對計算密集的場景，應該能擠出一些運算能力。</p>\n<h2 id=\"%E5%85%B6%E4%BB%96%E4%BA%BA%E7%9A%84%E5%81%9A%E6%B3%95\"><a class=\"direct-link\" href=\"#%E5%85%B6%E4%BB%96%E4%BA%BA%E7%9A%84%E5%81%9A%E6%B3%95\">#</a> 其他人的做法</h2>\n<p>除了前面自行實現的 Worker Pool 外，也來看看其他人怎麼設計。Github 的 <a href=\"https://github.com/gammazero/workerpool\">gammazero/workerpool</a> 有 900+ 星星，應該具有一定的成熟度，它的 API 包含</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>WorkerPool<span class=\"token punctuation\">)</span> <span class=\"token function\">Pause</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>WorkerPool<span class=\"token punctuation\">)</span> <span class=\"token function\">Size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>WorkerPool<span class=\"token punctuation\">)</span> <span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>WorkerPool<span class=\"token punctuation\">)</span> <span class=\"token function\">StopWait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>WorkerPool<span class=\"token punctuation\">)</span> <span class=\"token function\">Stopped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>WorkerPool<span class=\"token punctuation\">)</span> <span class=\"token function\">Submit</span><span class=\"token punctuation\">(</span>task <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>WorkerPool<span class=\"token punctuation\">)</span> <span class=\"token function\">SubmitWait</span><span class=\"token punctuation\">(</span>task <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>WorkerPool<span class=\"token punctuation\">)</span> <span class=\"token function\">WaitingQueueSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span></code></pre>\n<p>其中 <code>Pause()</code> 有點意思，可以讓 Goroutine 先暫停，不要執行 Job。來看看說明</p>\n<blockquote>\n<p>Pause causes all workers to wait on the given Context, thereby making them unavailable to run tasks. Pause returns when all workers are waiting. Tasks can continue to be queued to the workerpool, but are not executed until the Context is canceled or times out.</p>\n</blockquote>\n<p>這是怎麼辦到的呢？因為理論上，不同 input 間不會彼此影響，因此要讓 Goroutine 停止執行，就需要塞住整個 Goroutine，給它一個持續等待的 Job</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>WorkerPool<span class=\"token punctuation\">)</span> <span class=\"token function\">Pause</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// ...</span><br>    ready <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>sync<span class=\"token punctuation\">.</span>WaitGroup<span class=\"token punctuation\">)</span><br>    ready<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>maxWorkers<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> p<span class=\"token punctuation\">.</span>maxWorkers<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>        p<span class=\"token punctuation\">.</span><span class=\"token function\">Submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            ready<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>            <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>            <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>p<span class=\"token punctuation\">.</span>stopSignal<span class=\"token punctuation\">:</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token comment\">// Wait for workers to all be paused</span><br>    ready<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>在這個 Job 中，會用到 context 來當結束的命令，除非 context cancel 或 timeout，Goroutine 會阻塞在 <code>ctx.Done()</code>。阻塞 Job 的總量跟 Goroutine 最大數量相同，當一個 Goroutine 阻塞後，它就不會再收到新的 Job，因此能確保每個 Goroutine 都能被分配到一個阻塞 Job。</p>\n<p>另一個有意思的設計是，Work Pool 可以根據需求自行 scale out 或 scale in Goroutine 的數量，這段邏輯實作在 dispatch 的 func 中</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>WorkerPool<span class=\"token punctuation\">)</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    timeout <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">NewTimer</span><span class=\"token punctuation\">(</span>idleTimeout<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">var</span> workerCount <span class=\"token builtin\">int</span><br>    <span class=\"token comment\">// ...</span><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// ...</span><br>        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">case</span> task<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>p<span class=\"token punctuation\">.</span>taskQueue<span class=\"token punctuation\">:</span><br>            <span class=\"token comment\">// ...</span><br>            <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">case</span> p<span class=\"token punctuation\">.</span>workerQueue <span class=\"token operator\">&lt;-</span> task<span class=\"token punctuation\">:</span><br>            <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span><br>                <span class=\"token comment\">// Create a new worker, if not at max.</span><br>                <span class=\"token keyword\">if</span> workerCount <span class=\"token operator\">&lt;</span> p<span class=\"token punctuation\">.</span>maxWorkers <span class=\"token punctuation\">{</span><br>                    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br>                    <span class=\"token keyword\">go</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>workerQueue<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wg<span class=\"token punctuation\">)</span><br>                    workerCount<span class=\"token operator\">++</span><br>                <span class=\"token punctuation\">}</span><br>                <span class=\"token comment\">//...</span><br>            <span class=\"token punctuation\">}</span><br>            <span class=\"token comment\">//...</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token comment\">//...</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Job 進來會直接發進 workerQueue 中，如果發不進去，表示每個 worker 都在忙碌，這時先確認當前的 worker 量是否小於最大值，如果是，起一個新的 Goroutine 來幫忙處理 Job。</p>\n<p>至於要回收的話，看 select 的另一條分支</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>WorkerPool<span class=\"token punctuation\">)</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    timeout <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">NewTimer</span><span class=\"token punctuation\">(</span>idleTimeout<span class=\"token punctuation\">)</span><br>    <span class=\"token comment\">//...</span><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">//...</span><br>        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">//...</span><br>        <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>timeout<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">:</span><br>            <span class=\"token keyword\">if</span> idle <span class=\"token operator\">&amp;&amp;</span> workerCount <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">killIdleWorker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    workerCount<span class=\"token operator\">--</span><br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><br>            idle <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><br>            timeout<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span>idleTimeout<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token comment\">//...</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>有個 timer 會每 2s 起來看一次，如果這時發現沒有任務執行，而且 worker 的量大於 0，就送出結束訊號，讓 worker 停止。這樣可以降低記憶體的使用，讓閒置的 worker 不要占用資源。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>Worker Pool 透過資源的重複利用，降低 Goroutine 配置與回收的次數，在高併發的場景中，算是個常見的模式。儘管 Worker Pool 的好處很明顯，我還是會建議在優化前，先確認系統的效能瓶頸在哪裡，例如，如果是個 IO Bound 的系統，採用 Worker Pool 可能不一定有幫助；但如果是個 CPU Bound 的系統，採用 Work Pool 應該能降低 CPU 的壓力。</p>\n<p>這篇放進「驗證設計」一節，也是因為寫一寫突然好奇，花功夫設計完一套機制，能帶來多少改善？在單純只看 Goroutine 配置的情況下，我的實驗是 22% 的提升，但如果加入實際的 Job 內容，還能有同樣的改善幅度嗎？我猜在 GC 壓力很大的情況下，效益應該會變得更明顯，反過來說，如果平常也不太會有 GC，Worker Pool 可能也不是必須的。</p>\n<p>希望看完這篇文章，能讓大家在設計或選擇 Worker Pool 時更有方向。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://gobyexample.com/worker-pools\">Go by Example: Worker Pools</a></li>\n<li>Concurrency in Go</li>\n<li><a href=\"https://hspazio.github.io/2017/worker-pool/\">Implementing a worker pool</a></li>\n<li><a href=\"http://marcio.io/2015/07/handling-1-million-requests-per-minute-with-golang/\">Handling 1 Million Requests per Minute with Go</a></li>\n<li><a href=\"https://itnext.io/explain-to-me-go-concurrency-worker-pool-pattern-like-im-five-e5f1be71e2b0\">Explain to me Go Concurrency Worker Pool Pattern like I’m five</a></li>\n<li><a href=\"https://github.com/gammazero/workerpool\">gammazero/workerpool: Concurrency limiting goroutine pool</a></li>\n<li><a href=\"https://github.com/panjf2000/ants\">panjf2000/ants: 🐜🐜🐜 ants is a high-performance and low-cost goroutine pool in Go</a></li>\n</ul>\n",
      "date_published": "2022-12-20T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2022/concurrency-of-go-input-and-output/",
      "url": "https://blog.kenwsc.com/posts/2022/concurrency-of-go-input-and-output/",
      "title": "Goroutine 的併發治理：值是怎麼傳遞？",
      "content_html": "<p>當併發時，每個 Goroutine 可以看成是一個個單獨的個體，他們維護著自己的 Call Stack，彼此互不干涉。如果希望這些默默運行的 Goroutine 攜手完成任務，就要在他們之間建立一種通訊方式。在 Go 中，資訊應該如何被傳遞？其中的權衡又有哪些？這篇文章會介紹 Goroutine 常用的三種值的傳遞方式，以及相關衍生議題。</p>\n<h2 id=\"%E4%BD%BF%E7%94%A8%E9%96%89%E5%8C%85%E5%8F%96%E5%BE%97%E5%80%BC\"><a class=\"direct-link\" href=\"#%E4%BD%BF%E7%94%A8%E9%96%89%E5%8C%85%E5%8F%96%E5%BE%97%E5%80%BC\">#</a> 使用閉包取得值</h2>\n<p>第一種方式是使用閉包。先來想想輸出應該要長怎樣，假設建立 100 個 Goroutine，每個 Goroutine 會收到一個值並印出來，傳給 Goroutine 的值應該都要不同，最後印出來的結果會是 0 到 99。這裡用 <code>time.Sleep</code> 模擬長時間的處理，用 println 印出值來觀察操作結果。程式碼是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup<br>    <span class=\"token keyword\">var</span> cnt <span class=\"token builtin\">int32</span><br>    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            val <span class=\"token operator\">:=</span> atomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddInt32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cnt<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br>            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in: \"</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><br>            time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span><br>            wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>cnt 是 Goroutine 中需要操作的值，每個 Goroutine 啟動後會將 cnt + 1，經過 100 個 Goroutine 處理後，cnt 會是 100。為了避免 race condition，cnt 要用標準包的 atomic，讓加法成為原子操作。</p>\n<p>跑一下試著印出結果</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">in:  <span class=\"token number\">1</span><br>in:  <span class=\"token number\">2</span><br>in:  <span class=\"token number\">3</span><br>in:  <span class=\"token number\">4</span><br>in:  <span class=\"token number\">5</span><br>in:  <span class=\"token number\">6</span><br>in:  <span class=\"token number\">7</span><br>in:  <span class=\"token number\">9</span><br>in:  <span class=\"token number\">10</span><br>in:  <span class=\"token number\">11</span><br><span class=\"token punctuation\">..</span>.</code></pre>\n<p>因為 Goroutine 只保證內部的操作會依照順序（這件事情並不像直覺感受到的這麼理所當然），而不保證 Goroutine 間的執行會依照順序，因此可以看到 8 的 Goroutine 被放到後面才執行。但總體來說，這個結果是正確的，沒出現 race condition。</p>\n<p>注意 cnt 是在 Func 外宣告，再放到 Func 內使用，這裡的 Func 跟變數會被打包成一個物件，讓 Func 執行時可以取用，這樣的物件稱為閉包(Closure)。</p>\n<p>使用閉包來操作值的問題在於，它很容易寫出 bug，怎麼說呢？讓我們看段程式碼</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup<br>\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in: \"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><br>\t\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span><br>\t\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>放入閉包的值改成用 i，直覺上，它應該也要印出 0 到 99，但實際印出來的結果是</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">in:  <span class=\"token number\">12</span> 0xc0000160c0<br>in:  <span class=\"token number\">29</span> 0xc0000160c0<br>in:  <span class=\"token number\">36</span> 0xc0000160c0<br>in:  <span class=\"token number\">45</span> 0xc0000160c0<br>in:  <span class=\"token number\">45</span> 0xc0000160c0<br>in:  <span class=\"token number\">45</span> 0xc0000160c0<br><span class=\"token punctuation\">..</span>.<br>in:  <span class=\"token number\">100</span> 0xc0000160c0<br>in:  <span class=\"token number\">100</span> 0xc0000160c0<br>in:  <span class=\"token number\">100</span> 0xc0000160c0<br>in:  <span class=\"token number\">100</span> 0xc0000160c0</code></pre>\n<p>像 45 被重複印出，而最後的幾個值都是 100，為什麼會這樣？這就要來看看 Go 是怎麼解釋閉包</p>\n<blockquote>\n<p>Go functions may be closures. A closure is a function value that references variables from outside its body. The function may access and assign to the referenced variables; in this sense the function is &quot;bound&quot; to the variables.</p>\n<p>閉包是個參考函式範圍外變數的函式，它可以在函式內存取該受參考的變數。</p>\n</blockquote>\n<p>Go 用的字是「參考」，儘管 Go 不支援顯式傳遞參考，但閉包內的使用卻是參考沒錯。在剛剛的例子中，我們同時印出變數的 address，可以看到變數的位置是同一個，當迴圈在執行時，i 的值會一直被修改，而等到 Goroutine 起來要使用 i 的值時，它可能已經不是 Goroutine 原本啟動時的值了。這裡的陷阱在於，習慣 Go 的開發者，會用值的角度來思考，但在 Go 這個只有傳值沒有傳參的語言中，這是唯一要用參考思考的地方。</p>\n<p>要防止這問題，開發者要警覺不要在迴圈中使用閉包，並記得開啟靜態分析工具，像是</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go vet main.go<br>main.go:15:16: loop variable i captured by func literal</code></pre>\n<p>讓錯誤在上 code 前可以被檢查出來。</p>\n<p>還有個有趣的問題可以想想，閉包內使用的數值，會被配置在 heap 呢？還是會配置在 stack 呢？要知道答案，可以用逃逸分析看一下編譯結果</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">~/git/playground/playground <span class=\"token operator\">|</span> main<span class=\"token operator\">></span>  go run -gcflags <span class=\"token string\">'-m -l'</span> main.go<br><br>main.go:9:6: moved to heap: wg<br>main.go:11:6: moved to heap: i<br>main.go:12:6: func literal escapes to heap<br>in:  <span class=\"token number\">25</span> 0xc00009e010<br>in:  <span class=\"token number\">28</span> 0xc00009e010<br>in:  <span class=\"token number\">57</span> 0xc00009e010<br>in:  <span class=\"token number\">57</span> 0xc00009e010<br>in:  <span class=\"token number\">73</span> 0xc00009e010<br>in:  <span class=\"token number\">73</span> 0xc00009e010<br>in:  <span class=\"token number\">74</span> 0xc00009e010</code></pre>\n<p>wait group 因為在函式內外都會用到，所以放到 heap，這很合理，而 i 也因為是用參考的方式傳進去，不能在 stack 結束後回收，也會被放到 heap 中。</p>\n<h2 id=\"%E4%BD%BF%E7%94%A8%E5%8F%83%E6%95%B8%E5%82%B3%E9%81%9E%E5%80%BC\"><a class=\"direct-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%8F%83%E6%95%B8%E5%82%B3%E9%81%9E%E5%80%BC\">#</a> 使用參數傳遞值</h2>\n<p>既然閉包容易寫出問題，應該怎麼正確向 Goroutine 傳遞「值」呢？第二種方式跟呼叫 func 一樣，可以用參數來傳遞，舉個例子，改寫原來的迴圈</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup<br>\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><br>\t\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span><br>\t\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>替呼叫的函式加上型別為 int 的參數，這個參數就會在起 Goroutine 時一起被帶進去。來看一下執行結果</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">3</span> 0xc00004b7c8<br><span class=\"token number\">1</span> 0xc00004a7c8<br><span class=\"token number\">0</span> 0xc0000487c8<br><span class=\"token number\">23</span> 0xc0001017c8<br><span class=\"token number\">33</span> 0xc0001127c8<br><span class=\"token number\">4</span> 0xc00004bfc8<br><span class=\"token number\">24</span> 0xc000101fc8<br><span class=\"token number\">5</span> 0xc0000447c8<br><span class=\"token number\">2</span> 0xc00004afc8<br><span class=\"token number\">25</span> 0xc0001027c8</code></pre>\n<p>i 的 address 都不同，而且執行結果也符合預期。也看看它被配置到哪塊記憶體</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">~/git/playground/playground <span class=\"token operator\">|</span> main<span class=\"token operator\">></span>  go run -gcflags <span class=\"token string\">'-m -l'</span> main.go<br><br>main.go:9:6: moved to heap: wg<br>main.go:12:6: func literal escapes to heap<br><span class=\"token number\">5</span> 0xc0000447c8<br><span class=\"token number\">10</span> 0xc000046fc8<br><span class=\"token number\">3</span> 0xc00004b7c8<br><span class=\"token number\">6</span> 0xc000044fc8<br><span class=\"token number\">7</span> 0xc0000457c8<br><span class=\"token number\">8</span> 0xc000045fc8<br><span class=\"token number\">9</span> 0xc0000467c8<br><span class=\"token number\">37</span> 0xc00010c7c8</code></pre>\n<p>這裡沒出現逃逸，也合理，因為 i 在 func 外不會被用到，會配置在 stack 上。</p>\n<h2 id=\"%E4%BD%BF%E7%94%A8-channel-%E5%82%B3%E9%81%9E%E5%80%BC\"><a class=\"direct-link\" href=\"#%E4%BD%BF%E7%94%A8-channel-%E5%82%B3%E9%81%9E%E5%80%BC\">#</a> 使用 channel 傳遞值</h2>\n<p>儘管在大多數的情況下，使用參數傳遞已經能符合需求。但從 CSP 的角度來看，有沒有更系統化的做法？</p>\n<p>Tony Hoare 在 1978 年的 <em>Communicating Sequential Processes</em> 開宗明義寫說</p>\n<blockquote>\n<p>This paper suggests that input and output are basic primitives of programming</p>\n<p>這篇論文建議輸入跟輸出是編程的基本要素</p>\n</blockquote>\n<p>CSP 將輸入輸出視為基本要素，Goroutine 間透過輸入輸出的方式連接，建構出複雜的邏輯。在 Go 中，用來對應輸出輸出的原生語言是 channel。讓我們看段 CSP 跟 channel 的關係，在 CSP 的語法中，輸入是 <code>&lt;source&gt; ? &lt;target var&gt;</code>，輸出是 <code>&lt;destination&gt; ! &lt;expr&gt;</code></p>\n<p>所以當要設計一個 Copy func，用來將 input channel 的字元送到 output channel 時，會是</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">COPY :: *<span class=\"token punctuation\">[</span>c:character<span class=\"token punctuation\">;</span> west?c → east<span class=\"token operator\">!</span>c<span class=\"token punctuation\">]</span></code></pre>\n<p>翻譯成自然語言，大約是「有個名為 COPY 的程序，內部有個迴圈，會由程序 west 取得字元，如果成功，放到程序 east」，這等義於 Go 的</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">COPY</span><span class=\"token punctuation\">(</span>west<span class=\"token punctuation\">,</span> east <span class=\"token keyword\">chan</span> <span class=\"token builtin\">rune</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">for</span> c <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> west <span class=\"token punctuation\">{</span><br>        east <span class=\"token operator\">&lt;-</span> c<br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>east<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>我們不打算在這進行數學論證，就不深究 Tony Hoare 當初提出的語法，重點是明白它是基於數學的語言，並將 input / output 當成一等公民，這樣就好。</p>\n<p>回頭來看基於 CSP 的第三種傳遞方式</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tinCh <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup<br>\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\ti <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>inCh<br>\t\t\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><br>\t\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span><br>\t\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\tinCh <span class=\"token operator\">&lt;-</span> i<br>\t<span class=\"token punctuation\">}</span><br>\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>在迴圈中，會起 Goroutine 並將 i 的值放到 channel 內，channel 的的傳遞是值複製，當把 i 放進去時，等於轉移 i 值的所有權給 channel 的 receiver。Goroutine 內會再從 inCh 取出放入的 i 值，將它印出來。在這個範例中，是先將 channel 傳遞進 Goroutine 再傳遞值，而傳遞 channel 的方式用的是第一種方式講的閉包。</p>\n<p>如果從 CSP 的角度看，這段程式還不夠完整，因為 Goroutine 是單向輸入，沒透過輸出傳遞資訊給其他 Goroutine，這裡的資訊是什麼呢？Goroutine 完成工作後要通知別人吧，這個「完成」的資訊就是輸出。在原本範例中，對輸出資訊的傳遞是用 wait group，但這不是 CSP 的模型，因此再修改一下這段</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tinCh <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><br>\toutCh <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\ti <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>inCh<br>\t\t\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><br>\t\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span><br>\t\t\toutCh <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\tinCh <span class=\"token operator\">&lt;-</span> i<br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">var</span> cnt <span class=\"token builtin\">int</span><br>\t<span class=\"token keyword\">for</span> <span class=\"token keyword\">range</span> outCh <span class=\"token punctuation\">{</span><br>\t\tcnt<span class=\"token operator\">++</span><br>\t\t<span class=\"token keyword\">if</span> cnt <span class=\"token operator\">==</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">break</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>改成用 outCh 來同步完成資訊。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>這篇雖然了介紹三種常見的 Goroutine 傳遞方式，但實務上不是越複雜越好，重點是明白每種方法的限制有哪些，最常用到的可能反而是閉包。以我的經驗來講，通常如果沒有迴圈，我會直接用閉包處理；如果有迴圈但沒有明確的值輸出，我會用參數傳遞；只有當 Goroutine 負責的輸入輸出關係比較複雜，且需要分離責任時，我才會選擇用 channel 傳遞。</p>\n<p>當然，channel 也不見得要弄到很長一串，以標準包 time 來舉例，一個常見的 timeout case 可以是</p>\n<pre class=\"language-go\"><code class=\"language-go\">timeout <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">After</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br><span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span> timeout<span class=\"token punctuation\">:</span><br>\t<span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeout\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這是個很優雅的例子，相關的循序邏輯都封裝在 <code>time.After</code> 內，時間到會透過 channel 發出通知，負責計時的 Goroutine 就不用背負呼叫 callback function 的責任，會讓歸屬上更明確。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://go.dev/tour/moretypes/25\">A Tour of Go</a></li>\n<li><a href=\"https://www.cs.cmu.edu/~crary/819-f09/Hoare78.pdf\">Communicating Sequential Processes</a></li>\n<li><a href=\"https://studygolang.com/topics/10914\">【Go 夜读】第 66 期 #Paper-Reading CSP 理解顺序进程间通信</a></li>\n<li><a href=\"http://rtoal.github.io/csp-talk/#/\">Tony Hoare’s CSP THE OLD SCHOOL VERSION</a></li>\n</ul>\n",
      "date_published": "2022-12-14T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2022/concurrency-of-go-error-handling/",
      "url": "https://blog.kenwsc.com/posts/2022/concurrency-of-go-error-handling/",
      "title": "Goroutine 的併發治理：由錯誤處理談起",
      "content_html": "<p>當需要同時執行多個任務時，Go 開發者會多開 Goroutine 來分擔任務，這稱為併發。併發聽起來似乎很理想，能其他任務等待時，照樣執行需要運算的任務，有效利用 CPU 資源，但如果要用在生產環境，它也需要完善的管理機制。想想看，Goroutine 在哪個情況下會被啟動？哪個情況下會結束？如果任務需要回傳結果，它應該要怎麼回傳？而如果執行中發生錯誤，又應該怎麼處理？</p>\n<p>我們可以稱呼這類主題為「併發治理」，需要開發者理解執行期的運作，而如何處理好 Goroutine 的開始與結束，讓錯誤能被意識到，可說是併發治理的第一關。</p>\n<h2 id=\"%E5%9F%BA%E6%9C%AC%E4%BD%B5%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%9F%BA%E6%9C%AC%E4%BD%B5%E7%99%BC\">#</a> 基本併發</h2>\n<p>來看個基本的併發操作。我們起 100 個 Goroutine，讓它們處理任務。如果執行時發生 error，就呼叫 HandleError 處理錯誤。</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup<br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\terr <span class=\"token operator\">:=</span> <span class=\"token function\">DoTask</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><br>\t\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token function\">HandleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">DoTask</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>\terr <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d: some err\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">return</span> err<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">HandleError</span><span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這裡用 Go 標準包的 wait group 來管理 Goroutine，啟動 Goroutine 前，先用 wg.Add 將計數器加 1，Goroutine 執行完後，再用 wg.Done 將計數器減 1。等所有計數器歸零，代表 Goroutine 全部執行完成。wait group 的功用是同步化，確保主程式結束前，所有的 Goroutine 都執行完畢。</p>\n<p>在這個模型中，Goroutine 的錯誤是在 Goroutine 中被處理，這讓 Goroutine 承擔額外的任務，例如它可能會需要依賴 Logger 才能處理錯誤，這也降低 Goroutine 的可測試性。如果我們希望分離彼此的責任，集中管理錯誤的話，就得想個方式，把錯誤傳出來。</p>\n<h2 id=\"%E5%85%B1%E4%BA%AB%E8%A8%98%E6%86%B6%E9%AB%94%E4%BE%86%E9%80%9A%E8%A8%8A\"><a class=\"direct-link\" href=\"#%E5%85%B1%E4%BA%AB%E8%A8%98%E6%86%B6%E9%AB%94%E4%BE%86%E9%80%9A%E8%A8%8A\">#</a> 共享記憶體來通訊</h2>\n<p>第一種傳遞錯誤的方式稱為 Shared memory，可以想像成把 Goroutine 中發生的錯誤記錄在某個儲存空間，等待 Goroutine 執行完後再來處理，程式碼類似</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> lock sync<span class=\"token punctuation\">.</span>Mutex<br><span class=\"token keyword\">var</span> errs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">error</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup<br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\terr <span class=\"token operator\">:=</span> <span class=\"token function\">DoTask</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><br>\t\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>\t\t\t\tlock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t\t\terrs <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>errs<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><br>\t\t\t\tlock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> errs <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function\">HandleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這段程式用 slice 來存放錯誤，因為 slice 沒保證併發安全，使用時要記得用 sync.Mutex 鎖起來再操作。</p>\n<p>這個模型有什麼問題呢？因為引入互斥鎖，Goroutine 執行期間有了同步化機制，讓不同的 Goroutine 可能會互相等待；再來，當應用變得複雜的時候，可能會存在好幾個鎖，一不小心就會造成 Dead Lock；另外，使用 Shared Memory 意味著所有 Goroutine 都能 Access 共享區塊，如果有哪個 Goroutine 沒有遵守規範，修改了共享區塊內的值，就會影響到其他的 Goroutine。開發者原本從錯誤處理釋放出來的專注力，變成要轉投入到併發處理，從結果來講，對生產力幫助有限。</p>\n<h2 id=\"errgroup\"><a class=\"direct-link\" href=\"#errgroup\">#</a> errGroup</h2>\n<p>既然目標是處理錯誤，我們可以建立一些前提，針對這個情境特化，讓併發治理跟業務邏輯分離開來。具體來講，希望對 wait group 與 Goroutine 的使用進行封裝。這就來到 <a href=\"https://pkg.go.dev/golang.org/x/sync/errgroup\">golang.org/x/sync/errgroup</a> 這個 package 了，先來上 code</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>\t<span class=\"token string\">\"fmt\"</span><br>\t<span class=\"token string\">\"time\"</span><br><br>\t<span class=\"token string\">\"golang.org/x/sync/errgroup\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">var</span> eg errgroup<span class=\"token punctuation\">.</span>Group<br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\teg<span class=\"token punctuation\">.</span><span class=\"token function\">Go</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">DoTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> eg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function\">HandleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>eg.Go 會啟動一個 Goroutine，而 eg.Wait 會等待所有的 Goroutine 都執行完畢，如果在執行過程中有發生錯誤，eg.Wait 會將錯誤回傳給處理函式。</p>\n<p>從名稱看，eg 封裝了 wait group 的邏輯，可以讓操作變得更簡單，它的內部實現跟原本 wait group 的操作類似</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>g <span class=\"token operator\">*</span>Group<span class=\"token punctuation\">)</span> <span class=\"token function\">Go</span><span class=\"token punctuation\">(</span>f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">if</span> g<span class=\"token punctuation\">.</span>sem <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>\t\tg<span class=\"token punctuation\">.</span>sem <span class=\"token operator\">&lt;-</span> token<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><br>\tg<span class=\"token punctuation\">.</span>wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">defer</span> g<span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>\t\t\tg<span class=\"token punctuation\">.</span>errOnce<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\tg<span class=\"token punctuation\">.</span>err <span class=\"token operator\">=</span> err<br>\t\t\t\t<span class=\"token keyword\">if</span> g<span class=\"token punctuation\">.</span>cancel <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\tg<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>只是用到 sync.Once 來鎖定 critical section。</p>\n<p>errgroup 幫助開發者分離併發治理與業務邏輯，也降低無意中引發 Dead Lock 的可能性。</p>\n<h2 id=\"%E7%94%A8%E9%80%9A%E8%A8%8A%E4%BE%86%E5%85%B1%E4%BA%AB%E8%B3%87%E8%A8%8A\"><a class=\"direct-link\" href=\"#%E7%94%A8%E9%80%9A%E8%A8%8A%E4%BE%86%E5%85%B1%E4%BA%AB%E8%B3%87%E8%A8%8A\">#</a> 用通訊來共享資訊</h2>\n<p>還有沒有其他的可能呢？不妨換另一個角度來看待錯誤的傳遞。在 Go 中，錯誤是一種值，如果把 Goroutine 看成是處理值的處理程序，那只要能定義出程序的 input/output，就能將值傳遞出去。可能有人會想，這跟 function 不是差不多的意思嗎？是的，但關鍵在於，Goroutine 間不是順序式的關係，而是程序式的併發關係，在訊息經過 Goroutine 內部循序處理後，它會透過交談的方式，傳遞給另一個 Goroutine，這套模型又因此被稱為交談循序程式(CSP)。依照 CSP 的語法結構，可以修改程式為</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup<br>\terrCh <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span><br>\troutineEndCh <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\tlogEndCh <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\terr <span class=\"token operator\">:=</span> <span class=\"token function\">DoTask</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><br>\t\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>\t\t\t\terrCh <span class=\"token operator\">&lt;-</span> err<br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">case</span> err <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>errCh<span class=\"token punctuation\">:</span><br>\t\t\t\t<span class=\"token function\">HandleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>routineEndCh<span class=\"token punctuation\">:</span><br>\t\t\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>logEndCh<span class=\"token punctuation\">)</span><br>\t\t\t\t<span class=\"token keyword\">return</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>routineEndCh<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token operator\">&lt;-</span>logEndCh<br><span class=\"token punctuation\">}</span></code></pre>\n<p>在這段程式中，Goroutine 產生的錯誤被送進 channel，而錯誤處理的函式則放在另一個 Goroutine，假設稱為 G2，G2 在 channel 的一端接收錯誤，收到後立刻進行錯誤處理。此外，我們需要明訂 G2 的結束時間，因此開了再一個 Goroutine G3 來協調，當 wait group 的任務都結束後，G3 會關閉 routineEndCh，讓 G2 的 case 2 可以執行並關閉，G2 關閉前同樣關閉 logEndCh，讓主程式順利結束。</p>\n<p>儘管用到一些看起來很潮的字，在採用模型前，我們還是得先自問，這個做法真的有比較好嗎？程式碼長度由 20L 變成 30L，還有許多 channel 的同步處理問題，它對生產力真的有幫助嗎？</p>\n<p>唔，這是個好問題，CSP 的設計類似數學，從設計層面上切開彼此的相依性（在數學中，沒有狀態這回事）。在程式碼中，我們可以察覺到，原本的 Goroutine 跟 G2 間變成像是生產者跟消費者的關係，當訊息一生產出來，G2 會立刻消費它，讓程式變成像是生產線一樣，訊息處理完後，會被送到下一站繼續處理。而在共享記憶體的例子中，訊息是先搜集起來放在記憶體中，等待 Goroutine 完成後再批次處理。使用 channel 串接的方式，儘管不見得有更好的總處理時間(total time)，但理論上，避免了批次性的等待，它應該會具備更好的平均處理時間(average time)。</p>\n<p>技術本質上，channel 也是使用加鎖後複製值來實現，但它具備更高級的應用語義，我們可以把 channel 看成是對底層技術的封裝，因為這層封裝，開發者可以區別出生產者與消費者，也保證了消息的唯一性，從而在設計上防止 race condition 的發生。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>在討論 Go 的併發時，質數篩是個很經典的例子，用共享記憶體的方式，質數篩會是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tn <span class=\"token operator\">:=</span> <span class=\"token number\">20</span><br>\tprimes <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">*</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>primes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">*</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\t\t\tprimes<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>primes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><br>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>但如果用 CSP 方式，則會變成</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tc <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">go</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><br><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\tp <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span> c<br>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><br>\t\tprimes <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token keyword\">go</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> primes<span class=\"token punctuation\">)</span><br>\t\tc <span class=\"token operator\">=</span> primes<br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>很明顯，兩個模型一對照，CSP 的可讀性更低，因為人類對訊息的理解是歷時性，而不是共時性的。我們可以輕易回想起某場棒球賽的再見全壘打，卻不容易記得某個賽季的平均打擊率。既然如此，為什麼我們會需要用反人類的方式來設計？因為當程式像數學一樣運作，它會變得無狀態、鬆耦合、更適合機器執行。至於可讀性方面，errgroup 給了一個靈感，我們可以將 channel 的操作封裝起來，透過框架來解決併發問題。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://pkg.go.dev/golang.org/x/sync@v0.1.0/errgroup\">errgroup package - golang.org/x/sync/errgroup - Go Packages</a></li>\n<li><a href=\"https://blog.kennycoder.io/2021/10/03/Golang-errGroup-%E7%94%A8%E6%B3%95%E5%8F%8A%E9%81%A9%E7%94%A8%E6%83%85%E5%A2%83/\">Golang - errGroup 用法及適用情境</a></li>\n</ul>\n",
      "date_published": "2022-12-07T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2022/design-pattern-as-a-language/",
      "url": "https://blog.kenwsc.com/posts/2022/design-pattern-as-a-language/",
      "title": "設計模式作為一種語言：物件導向的語法要素",
      "content_html": "<p>「設計模式」這個詞出自 Christopher Alexander 的《建築模式語言》，這本書出版於 1977 年，主題圍繞著建築，城市設計和社區宜居性。作者 Alexander 是一名建築師，他在意的是，能不能找到一種切實可行的模式語言，讓讀者用以設計辦公室、車庫或公共建築。</p>\n<p>儘管這樣的期待難免於可操作性，但在另一方面，Alexander 同時是名評論家跟創作者，在創作的過程中，他也想知道，現實繁複的表象下，是不是存在某種共通性，能用於解釋建築間特定的規律？我們可以看到作者羅列出 253 個模式，像是活動中心(30)、墓地(70)與啤酒館(90)，Alexander 說：「每一模式描述我們周圍環境中一再發生的某項問題，接著描述解決該問題的關鍵所在，如此一來，你就能上萬次利用這種解決方式，而不必每次從頭來過。」</p>\n<p>如同描述資料的資料稱為「後設資料(metadata)」，描述語言的語言稱為後設語言，而 Alexander 給這套後設語言起的名字是「模式語言」。日後，GoF 仿造 Alexander 的形式，帶著致敬的味道，列舉出軟體開發的「設計模式」。在這裡，我們關注的是「語言」，而不是內在意圖的轉變。如果我們將語言拆分為時間與空間兩塊，由 Alexander 的「模式語言」到 GoF 的「設計模式」就是時間上的啟發，儘管具有歷史學的意義，但不能用來說明語言本身的性質；相對的，語言的內在空間結構 — — 像啤酒館(90)內有凹室(179)跟溫暖的爐火(181)，讓訪客在其間飲酒高歌 — — 才是我們使用它的方式。借用索緒爾的譬喻：「國際象棋由波斯傳到歐洲，這是外部的事實，反之，一切與系統和規則有關的都是內部的。例如我把木頭的棋子換成象牙的棋子，這種改變對於系統是無關緊要的；但是假如我減少或增加了棋子的數目，那麼，這種改變就會深深影響到『棋法』」</p>\n<h2 id=\"%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E8%88%87%E8%87%AA%E7%84%B6%E8%AA%9E%E8%A8%80\"><a class=\"direct-link\" href=\"#%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E8%88%87%E8%87%AA%E7%84%B6%E8%AA%9E%E8%A8%80\">#</a> 物件導向與自然語言</h2>\n<p>GoF 在 1994 年出版的《設計模式：可復用物件導向軟體的基礎》中，描述「設計模式」是「由彼此互動的物件類別所組成，用來解決某特定情境中的一般性設計問題」，由此可知，GoF 在語言中加入的語法要素是物件導向。有別於 Alexander 在每項模式語言中放進實物照片，GoF 用的是結構化的語言，更準確地說，在描述每項設計模式時，他們用的是類別圖</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2022/design-pattern-as-a-language/pattern-1.png\" />\n</p>\n<p>類別圖的「主詞」是類別(Class)，而「動詞」則是它們之間的關係(Relation)，請看這類句子「Creator 創建 Product」「ConcreteCreatorA 繼承 Creator」，這體現了類別圖的本質。在物件導向的世界裡，第一要務是找出物件類別，再來是建構它們之間的互動，設計者相信，這是「一種對真實世界進行建模的方式」。我們不妨比較一下自然語言跟物件導向語言，例如使用一個「主語+謂語+賓語」的結構，「我戴帽子」跟</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hat</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Wear</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Hat</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>具有相同的空間關係，因此在效果上，它們也能表達同樣的意思。</p>\n<p>如果物件導向語言等價於自然語言，開發程式也會等價於開口說話。只要能講出來的，就能寫成程式，兩者間不存在摩擦力，從而解決了軟體開發的一道難題：業務模型與程式碼間的語義鴻溝。可是，事情並沒有這麼單純，讓我們舉出反例，費茲傑羅《大亨小傳》的開頭：「『當你打算批評任何人時，』父親告訴我。『你要記住，世上不是每個人都像你一樣佔了這麼多便宜。』」這要如何翻譯成物件導向語言呢？雖然很荒謬，我們還是盡力試試看，首先，「當」可能是個條件式，而「記住」應該是符合條件時發生的事，因此</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> mostAdvantageAmount <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> advantageAmount<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Remember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advantageAmount <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advantageAmount <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mostAdvantageAmount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token class-name\">IsCriticizingStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Playground</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">person<span class=\"token punctuation\">.</span></span>IsCriticizingStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\"><span class=\"token namespace\">person<span class=\"token punctuation\">.</span></span>Remember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>即使不理會自然語言的高階功能，像是隱喻或象徵。我們也能察覺到翻譯與原句間的落差。父親不見了，「我」變成更普遍的原型，在原文中，當蓋茲比死的時候，只有尼克．卡拉威替他守靈，可是在程式碼內，看不見他跟蓋茲比間共有的特質。事實上，物件導向分析是在另一個層次上運作，它確實致力於拉近兩種語言間的距離，這正意味著語言的空間配置存在落差。</p>\n<p>索緒爾的說明可能更容易理解：「每著棋都會對整個系統有所反響，下棋的人不可能準確地預見到這效果的界限。由此引起的價值上的變化，有的是零，有的很嚴重，有的具有中等的重要性，各視情況而不同。一著棋可能使整盤棋局發生劇變，甚至對暫時沒有關係的棋子也有影響。我們剛才看到，對語言來說，情況也恰好一樣。」GoF 的設計模式是誕生自物件導向的語法要素，跟語言間有緊密的結合，Ralph Johnson 在〈Design Patterns 15 Years Later〉中也說到：「有些語言不需要某些設計模式，這些語言提供了問題的替代方案」。</p>\n<h2 id=\"%E8%AA%9E%E6%B3%95%E8%A6%81%E7%B4%A0%E7%9A%84%E5%BD%B1%E9%9F%BF\"><a class=\"direct-link\" href=\"#%E8%AA%9E%E6%B3%95%E8%A6%81%E7%B4%A0%E7%9A%84%E5%BD%B1%E9%9F%BF\">#</a> 語法要素的影響</h2>\n<p>既然 GoF 在書中也認為「設計結果所得到的類別通常在現實世界中並不存在」，讓我們將問題改成「物件導向語言具有什麼特性？它又是如何影響設計模式？」講到物件導向的特性，直覺可能是繼承、封裝、多態。可是如索緒爾再三提醒我們的，語言與其表達的事物沒有必然的關係。更深入追問什麼是物件導向後，Robert Martin 有段發人深省的話：「物件導向語言為我們消除了人工遵守這些約定的必要，也就等於消除了這方面的危險性。採用物件導向語言讓多型實現變得非常簡單，讓一個傳統 C 語言工程師可以去做以前不敢想的事情。」</p>\n<p>這段話非常有意思，物件導向的功能實際上是種約束，以 Factory Method 為例，C 語言工程師可以用函數指針做到類似多態的事</p>\n<pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>doStuff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span> Product<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">void</span> <span class=\"token function\">doStuffA</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Creator</span> <span class=\"token punctuation\">{</span><br>    Product<span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>createProduct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span> Creator<span class=\"token punctuation\">;</span><br><br>Product<span class=\"token operator\">*</span> <span class=\"token function\">createProductA</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    Product <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Product<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    p<span class=\"token operator\">-></span>doStuff <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>doStuffA<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    Creator <span class=\"token operator\">*</span>c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Creator<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Creator</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    c<span class=\"token operator\">-></span>createProduct <span class=\"token operator\">=</span> createProductA<span class=\"token punctuation\">;</span><br>    Product<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> c<span class=\"token operator\">-></span><span class=\"token function\">createProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    p<span class=\"token operator\">-></span><span class=\"token function\">doStuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>可是這不是 C 語言常見的語法，它更像是某種「方言」，會依照開發者的不同，而有程度不等的變形。假設開發者忘記替 Product 加上 doStuff，C 語言的編譯器還是會成功編譯，因為在 C 語言的設計中，struct 沒有 method 的概念，它用的是函數指針，而指針可以是 NULL，NULL 則會導致執行期錯誤。</p>\n<p>容易發生執行期錯誤的寫法應該成為一種模式嗎？這是個好問題，Robert Martin 所謂「讓一個傳統 C 語言工程師可以去做以前不敢想的事情」應該要倒過來看，在 C 面臨到的技術領域中，它不曾想過要解決多型問題，這是用 C 開發多型會顯得模型不匹配的原因。</p>\n<p>我們用 Java 來看相同的例子</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">void</span> <span class=\"token function\">doStuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcreteProductA</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doStuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Creator</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\">Product</span> <span class=\"token function\">createProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcreteCreatorA</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Creator</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Product</span> <span class=\"token function\">createProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcreteProductA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>完美符合類別圖的敘述。但是就像大家都知道的，類別是物件導向的一等公民，method 依附於類別底下，我們想要進一步詢問，物件導向的語法要素是不是必要的？例如，類別是必須的嗎？讓我們看看 Go 的例子</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Product <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">doStuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">type</span> ConcreteProductA <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>ConcreteProductA<span class=\"token punctuation\">)</span> <span class=\"token function\">doStuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">type</span> Creator <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">createProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> Product<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">type</span> ConcreteCreatorA <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>ConcreteCreatorA<span class=\"token punctuation\">)</span> <span class=\"token function\">createProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> Product <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>ConcreteProductA<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Go 將指向 struct 的指針放在 receiver，類似 C 語言將指針放在第一個參數。不像 Java 需要顯式聲明實作 interface，Go 使用鴨子型別，編譯器會檢查 struct 是否有符合 interface 指定的 func 約束，如果有，它就能以 interface 的方式回傳。這項設計體現了 Go 的「簡潔」哲學，Go 工程師不需要創造無用的（或缺乏語義的）類別來放置 func，而是透過改造 func，讓它能加入約束。</p>\n<p>從 C 到 Java 到 Go 的例子，語法要素具體而微影響一個系統的組成。設計模式使用物件導向來描述問題的解決方案，只是描述的語言與描述的對象不會完全相同。英文要描述「湯圓」時，會用「sweet dumpling」，可是這並不能說明湯圓在食物上特性，另個稱呼方式是用「tangyuan」，藉由中文發音來專指特定食物。這是語法要素重要的原因，「變動的不是整體，也不是一個系統產生了另一個系統，而是頭一個系統的一個要素改變了，而這就足以產生出另一個系統」。</p>\n<h2 id=\"%E5%A0%B4%E6%99%AF%E4%B8%AD%E7%9A%84%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F\"><a class=\"direct-link\" href=\"#%E5%A0%B4%E6%99%AF%E4%B8%AD%E7%9A%84%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F\">#</a> 場景中的設計模式</h2>\n<p>也因為如此，當將設計模式用於真實場景的時候，要特別注意兩者的結構是否吻合。以 Builder Pattern 為例，GoF 解釋該模式的目的是「把一個複雜物件的建構與表示(representations)分離，如此相同的建構過程可以產生不同表示的物件」，它的結構是</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2022/design-pattern-as-a-language/pattern-2.png\" />\n</p>\n<p>Builder 中有許多相鄰排列的 BuildPart，每個 BuildPart 可以對應到 Product 的一項特徵（儘管 BuildPart 的重複性在 GoF 的類別圖中看不出來）。Concrete Builder 實現 Builder 的介面，它也有一個 GetResult，可以用以取得 Product；Director 用 Construct 呼叫 Builder 的介面，因此可以說，Director 跟 Concrete Builder 通過 Builder 實現依賴的隔離。</p>\n<p>來看個現成的場景，<a href=\"https://github.com/go-resty/resty\">resty</a> 是個 HTTP 跟 REST 的函式庫，用來處理 HTTP 客戶端的請求。</p>\n<p>呼叫端的程式碼會類似</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> dao <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>    client <span class=\"token operator\">:=</span> resty<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><br>        <span class=\"token function\">SetLogger</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Logger<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><br>        <span class=\"token function\">OnBeforeRequest</span><span class=\"token punctuation\">(</span>RequestLog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><br>        <span class=\"token function\">OnAfterResponse</span><span class=\"token punctuation\">(</span>ResponseLog<span class=\"token punctuation\">)</span><br>    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">R</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><br>        <span class=\"token function\">SetQueryParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"from\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2022-10-10 00:00:00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><br>        <span class=\"token function\">SetAuthToken</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XXXX4900518B4F7EAC75BD37F01XXXX\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><br>        <span class=\"token function\">SetPathParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><br>        <span class=\"token function\">SetResult</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>dao<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><br>        <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/v1/devices/{id}\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err<br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> dao<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>程式碼可分成兩塊，第一塊用來建立 client，第二塊用來建立 request ，當呼叫 HTTP Method 後，會發出請求，回傳結果。從結構上來看，它跟 Builder Pattern 都具備重複性的特徵，但也僅只於此，另外兩個結構關係：用 GetResult 取回 Construct 後的物件，以及用 Builder 來隔離 Director 跟 Concrete Builder，在 resty 的例子中都沒看到。</p>\n<p>有跟沒有的差別在哪？有沒有可能，只是 resty 依照自身應用修改 Builder Pattern 呢？我們來研究 resty 的應用，它需要發送 HTTP Request，而 HTTP Request 具有大量的參數需要設置，這與 Builder Pattern 的重複性結構是相同的，因此我們能看到 SetQueryParam()、SetAuthToken() 這樣的 setter。另一方面，resty 底層協定用 HTTP，沒有其他選項，當然也沒有隔離層。至於 GetResult()，GoF 的說法是：「將（Product 與 GetResult）兩者分離，就能擁有多種不同的 Concrete Builder」，除非 resty 想提供多種不同的 Request 建構方式給使用者選擇，否則也不符合 GetResult() 的結構。</p>\n<p>Builder Pattern 的三種結構中，只有一種符合應用情境，既然如此，resty 用單純的 setter 就能表達應用，使用 Builder Pattern 只會顯得多餘。這不是修改（時間關係上）的問題，是結構（空間關係上）的問題。味噌湯不放味噌跟豆腐，改放菜頭跟排骨酥加肉燥，那還是味噌湯嗎？不是，那是排骨酥湯。</p>\n<p>如果 resty 不是 Builder Pattern，哪種應用語言符合 Builder Pattern 的結構呢？舉個例子，我們提供客戶購買保險的服務，保險依照種類分為居家險跟火險，每個保險產品依價格有不同的方案，在保單建立前，需要先建立「承保項目」「承保範圍」「受益人」等等。居家險跟火險的承保項目不同，不同方案的承保範圍不同，但它們都適用同樣的流程。這裡有連續性，有隔離的需要，有建構方式的選擇，寫成程式碼會是</p>\n<pre class=\"language-go\"><code class=\"language-go\">homePolicyBuilder <span class=\"token operator\">:=</span> <span class=\"token function\">NewHomePolicyBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>director <span class=\"token operator\">:=</span> <span class=\"token function\">NewPolicyDirector</span><span class=\"token punctuation\">(</span>homePolicyBuilder<span class=\"token punctuation\">)</span><br>director<span class=\"token punctuation\">.</span><span class=\"token function\">Construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>homePolicy <span class=\"token operator\">:=</span> homePolicyBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">GetHomePolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>homePolicy<span class=\"token punctuation\">)</span><br><br>firePolicyBuilder <span class=\"token operator\">:=</span> <span class=\"token function\">NewFirePolicyBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>director <span class=\"token operator\">=</span> <span class=\"token function\">NewPolicyDirector</span><span class=\"token punctuation\">(</span>firePolicyBuilder<span class=\"token punctuation\">)</span><br>director<span class=\"token punctuation\">.</span><span class=\"token function\">Construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>firePolicy <span class=\"token operator\">:=</span> firePolicyBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">GetFirePolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>firePolicy<span class=\"token punctuation\">)</span></code></pre>\n<p>在 Builder Pattern 相關的「效果」中，GoF 更深入說明「改變 Product 的內部表示」「隔離構造代碼與表示代碼」「對構造過程進行更精細的控制」是其主要優點。而這些特徵，如上面看到的，都已經反應在結構中了。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>套用設計模式來設計軟體，有時會遇到模型不匹配的問題。設計者需要先理解領域語言，才能設計出正確的系統，而常常，在理解領域語言後，會發現簡單的結構更能反應系統需求。既然如此，學習設計模式的目的是什麼？我們可以將它看成是一套語言，在其結構中保存了特定的應用情境，「設計模式雖然無法徹底克服這些困難，但它通過對框架設計的主要元素做更顯式的說明可以降低框架學習的難度」。學習這些，就像是在「物件導向語言」跟「自然語言」上，建立起一道可以互相轉換的途徑。</p>\n<p>當設計模式成為一門行業術語，我們能透過它汲取物件導向過往的思考。如果能看穿這些組成規則，將它放入經驗中，我們就能像熟悉一門語言一樣，自然而流暢地對話。這也意謂著，當我們看到其他架構師的設計時，會知道其中的估量與權衡，而這也差不多是藝術的起點了。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"http://teddy-chen-tw.blogspot.com/search?q=%E4%BB%80%E9%BA%BC%E6%98%AFPattern\">搞笑談軟工</a></li>\n<li><a href=\"https://refactoring.guru/design-patterns/builder\">Builder</a></li>\n<li><a href=\"https://www.ithome.com.tw/voice/89076\">設計模式不死？</a></li>\n</ul>\n",
      "date_published": "2022-11-20T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2022/oauth-2-0-go-and-google-example/",
      "url": "https://blog.kenwsc.com/posts/2022/oauth-2-0-go-and-google-example/",
      "title": "OAuth 2.0：用 Go 跟 Google 要資料",
      "content_html": "<p>在<a href=\"/posts/2022/oauth-2-0-authorization-grant\">上一篇</a>的結論中，我們講到開發者通常最想知道，開發 OAuth 2.0 客戶端需要什麼知識。後端工程師要實現 OAuth 2.0，最常見的情境是開發一個客戶端應用，用來存取資源擁有者的受保護資源。因此在這篇中，我們將用 Go 來牛刀小試一番，開發一個網路應用，它會取得使用者同意後，跟 Google 拿取使用者姓名並顯示出來。</p>\n<h2 id=\"%E8%A8%BB%E5%86%8A%E5%AE%A2%E6%88%B6%E7%AB%AF\"><a class=\"direct-link\" href=\"#%E8%A8%BB%E5%86%8A%E5%AE%A2%E6%88%B6%E7%AB%AF\">#</a> 註冊客戶端</h2>\n<p>不是隨便哪個應用都能跟 Google 授權伺服器申請授權，要跟授權伺服器互動，首先要人家願意信任你。因此，在開始寫程式前，要先到 GCP 的 APIs &amp; Services 中註冊客戶端，連結是<a href=\"https://console.developers.google.com/\">這個</a></p>\n<p>點選 CREATE CREDENTIALS 並選擇 OAuth client ID，創造一個新的客戶端憑證</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2022/oauth-2-0-go-and-google-example/oauth-1.png\" />\n</p>\n<p>我們要開發的是個網路應用，Application type 選 Web application。Authorized redirect URIs 是授權伺服器同意的轉址位置，想想，如果今天客戶端要轉到哪，授權伺服器就把瀏覽器轉到哪，連惡意網頁也照轉不誤，這聽起來還挺恐怖的，因此 GCP 希望我們先約定好同意的轉址位置，如果位置不對，授權伺服器會回覆錯誤，不再往下進行。</p>\n<p>在這裡，我們開發的應用會跑在本機，轉址位置用</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">http://localhost:8080/callback</code></pre>\n<p align=\"center\">\n  <img src=\"/img/posts/2022/oauth-2-0-go-and-google-example/oauth-2.png\" />\n</p>\n<p>點選 CREATE 後，GCP 會建立客戶端憑證，其中的 Client ID 跟 Client Secret 是兌換 Token 時需要帶的資訊</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2022/oauth-2-0-go-and-google-example/oauth-3.png\" />\n</p>\n<h2 id=\"%E7%94%B3%E8%AB%8B%E6%8E%88%E6%AC%8A\"><a class=\"direct-link\" href=\"#%E7%94%B3%E8%AB%8B%E6%8E%88%E6%AC%8A\">#</a> 申請授權</h2>\n<p>可以開始來開發客戶端了。客戶端本質上是個網路應用，用 gin 搭建簡單的 http server，它會提供一個 API，使用者呼叫後，返回使用者的姓名。</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    e <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    e<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> GetName<span class=\"token punctuation\">)</span><br>    e<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:8080\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>當然我們現在沒有 Token，要不到姓名，得先跟授權伺服器申請授權碼。因此在 API 前面加一層 middleware，如果沒有 Token 的話，在 middleware 會攔下來，改成跟授權伺服器拿授權碼</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    e <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    e<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>CheckToken<span class=\"token punctuation\">)</span><br>    e<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> GetName<span class=\"token punctuation\">)</span><br>    e<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:8080\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>怎麼申請授權碼呢？Google 有 OAuth 2.0 的庫，並內建各大授權伺服器的端點，拿來用就行了</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"context\"</span><br>    <span class=\"token string\">\"encoding/json\"</span><br>    <span class=\"token string\">\"errors\"</span><br>    <span class=\"token string\">\"io/ioutil\"</span><br>    <span class=\"token string\">\"net/http\"</span><br>    <br>    <span class=\"token string\">\"github.com/gin-gonic/gin\"</span><br>    <span class=\"token string\">\"golang.org/x/oauth2\"</span><br>    <span class=\"token string\">\"golang.org/x/oauth2/google\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    cfg <span class=\"token operator\">=</span> <span class=\"token function\">NewGoogleOAuthConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    e <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    e<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"callback\"</span><span class=\"token punctuation\">,</span> OAuth2Callback<span class=\"token punctuation\">)</span><br>    e<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>CheckToken<span class=\"token punctuation\">)</span><br>    e<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> GetName<span class=\"token punctuation\">)</span><br>    e<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:8080\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">NewGoogleOAuthConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>oauth2<span class=\"token punctuation\">.</span>Config <span class=\"token punctuation\">{</span><br>    config <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>oauth2<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">{</span><br>        ClientID<span class=\"token punctuation\">:</span>     <span class=\"token string\">\"372889357683-xxxxxxxxxx.apps.googleusercontent.com\"</span><span class=\"token punctuation\">,</span><br>        ClientSecret<span class=\"token punctuation\">:</span> <span class=\"token string\">\"GOCSPX-xxxxxxxxxx-fmXr0Dc\"</span><span class=\"token punctuation\">,</span><br>        RedirectURL<span class=\"token punctuation\">:</span>  <span class=\"token string\">\"http://localhost:8080/callback\"</span><span class=\"token punctuation\">,</span><br>        Scopes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><br>            <span class=\"token string\">\"https://www.googleapis.com/auth/userinfo.profile\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>        Endpoint<span class=\"token punctuation\">:</span> google<span class=\"token punctuation\">.</span>Endpoint<span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> config<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">CheckToken</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> token <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Redirect</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusFound<span class=\"token punctuation\">,</span> cfg<span class=\"token punctuation\">.</span><span class=\"token function\">AuthCodeURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"state\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>有讀理論有幫助，放進我們剛剛申請的 ClientID 與 Secret，RedirectURL 也用之前約好的 URL。既然是申請授權，也得讓人知道要授權哪些東西，這裡的 Scopes 可以看 Google OAuth 2.0 文件的<a href=\"https://developers.google.com/identity/protocols/oauth2/scopes#people\">說明</a></p>\n<p>對，你沒看錯，範圍有、夠、多，請自行針對應用需求找到你要的範圍，我們要的基本上是 userinfo 的 profile，放入</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">https://www.googleapis.com/auth/userinfo.profile </code></pre>\n<p>state 是 CSRF Token，記得要用隨機字串，這裡先敷衍過去（資安風險通常是敷衍後忘了改，好孩子不要學）</p>\n<pre class=\"language-go\"><code class=\"language-go\">ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Redirect</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusFound<span class=\"token punctuation\">,</span> cfg<span class=\"token punctuation\">.</span><span class=\"token function\">AuthCodeURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"state\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>做完這些事後，我們可以預期，使用者打 API 後，會跳轉到 Google 的授權頁面，直到客戶端拿到授權碼，實際上也是</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2022/oauth-2-0-go-and-google-example/oauth-4.png\" />\n</p>\n<p>授權伺服器會將授權碼發到接收端點，我們也建立一個，方便它把授權碼丟回來</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    cfg <span class=\"token operator\">=</span> <span class=\"token function\">NewGoogleOAuthConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    e <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    e<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"callback\"</span><span class=\"token punctuation\">,</span> OAuth2Callback<span class=\"token punctuation\">)</span><br>    e<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>CheckToken<span class=\"token punctuation\">)</span><br>    e<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> GetName<span class=\"token punctuation\">)</span><br>    e<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:8080\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">OAuth2Callback</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    state <span class=\"token operator\">:=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"state\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> state <span class=\"token operator\">!=</span> <span class=\"token string\">\"state\"</span> <span class=\"token punctuation\">{</span><br>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">AbortWithError</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusUnauthorized<span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid csrf token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span><br>    <span class=\"token punctuation\">}</span><br>    code <span class=\"token operator\">:=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"code\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">var</span> err <span class=\"token builtin\">error</span><br>    token<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> cfg<span class=\"token punctuation\">.</span><span class=\"token function\">Exchange</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">AbortWithError</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusInternalServerError<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span><br>    <span class=\"token punctuation\">}</span><br>    client <span class=\"token operator\">=</span> cfg<span class=\"token punctuation\">.</span><span class=\"token function\">Client</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><br>    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Redirect</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusFound<span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://localhost:8080/name\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>收到授權伺服器的回應後，記得先確認 CSRF Token 正不正確，避免有人假冒。接著取出授權碼，用它來交換 Token。</p>\n<p>Google 的 OAuth 庫很貼心，只要放上 Token，連 HTTP Client 都幫忙生好了，大致是處理一些 HTTP 的設定，例如像是依照 Token 的類型來設定 Header</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// SetAuthHeader sets the Authorization header to r using the access</span><br><span class=\"token comment\">// token in t.</span><br><span class=\"token comment\">//</span><br><span class=\"token comment\">// This method is unnecessary when using Transport or an HTTP Client</span><br><span class=\"token comment\">// returned by this package.</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>Token<span class=\"token punctuation\">)</span> <span class=\"token function\">SetAuthHeader</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    r<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>t<span class=\"token punctuation\">.</span>AccessToken<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>處理完授權流程，繼續原本執行到一半的 GET /name，用 Redirect 重定向回去</p>\n<pre class=\"language-go\"><code class=\"language-go\">ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Redirect</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusFound<span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://localhost:8080/name\"</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"%E5%AD%98%E5%8F%96%E8%B3%87%E6%BA%90\"><a class=\"direct-link\" href=\"#%E5%AD%98%E5%8F%96%E8%B3%87%E6%BA%90\">#</a> 存取資源</h2>\n<p>跟 Google 拿資源的方式跟呼叫普通的 API 沒兩樣，只是你得先知道要呼叫哪個 API，因為 Google 真的太多服務了，你可以用它的 <a href=\"https://developers.google.com/apis-explorer\">APIs Explorer</a> 來找。</p>\n<p>我們需要呼叫的是 <a href=\"https://developers.google.com/people/api/rest/v1/people/get\">People API</a> 中的 people.get。</p>\n<p>依照 API 文件，放上對應的 URL</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    res<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://people.googleapis.com/v1/people/me?personFields=names\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">AbortWithError</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusInternalServerError<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">defer</span> res<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">var</span> resp <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>    data<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAll</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><br>    json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>resp<span class=\"token punctuation\">)</span><br>    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">[</span><span class=\"token string\">\"names\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>呼叫 API 前，記得到 GCP 的設定上，打開 API，要不然還是不能呼叫，<a href=\"https://console.developers.google.com/apis/api/people.googleapis.com/overview\">連結在這</a></p>\n<p align=\"center\">\n  <img src=\"/img/posts/2022/oauth-2-0-go-and-google-example/oauth-5.png\" />\n</p>\n<p>跑一次看結果，打開瀏覽器，輸入</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">http://localhost:8080/name</code></pre>\n<p>得到</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"displayName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ken Chen\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"displayNameLastFirst\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Chen, Ken\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"familyName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Chen\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"givenName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ken\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"unstructuredName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ken Chen\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>看起來還不錯，有拿到正確的資料。</p>\n<p>當然 Google 的 People API 有提供 Go 的 SDK，所以也可以用現成套件，省掉維護的麻煩</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go get google.golang.org/api/people/v1</code></pre>\n<p>修改原本的 function</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    people<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> service<span class=\"token punctuation\">.</span>People<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"people/me\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PersonFields</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"names\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">AbortWithError</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusInternalServerError<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span><br>    <span class=\"token punctuation\">}</span><br>    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusOK<span class=\"token punctuation\">,</span> people<span class=\"token punctuation\">.</span>Names<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br>    <br><span class=\"token keyword\">func</span> <span class=\"token function\">OAuth2Callback</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    state <span class=\"token operator\">:=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"state\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> state <span class=\"token operator\">!=</span> <span class=\"token string\">\"state\"</span> <span class=\"token punctuation\">{</span><br>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">AbortWithError</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusUnauthorized<span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid csrf token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span><br>    <span class=\"token punctuation\">}</span><br>    code <span class=\"token operator\">:=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"code\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">var</span> err <span class=\"token builtin\">error</span><br>    token<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> cfg<span class=\"token punctuation\">.</span><span class=\"token function\">Exchange</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">AbortWithError</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusInternalServerError<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span><br>    <span class=\"token punctuation\">}</span><br>    client <span class=\"token operator\">=</span> cfg<span class=\"token punctuation\">.</span><span class=\"token function\">Client</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><br>    service<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> people<span class=\"token punctuation\">.</span><span class=\"token function\">NewService</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> option<span class=\"token punctuation\">.</span><span class=\"token function\">WithTokenSource</span><span class=\"token punctuation\">(</span>cfg<span class=\"token punctuation\">.</span><span class=\"token function\">TokenSource</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Redirect</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusFound<span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://localhost:8080/name\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>風格跟 gRPC 有點像，都是稱為 Service，也是用 functional option 的方式來設定，單純從開發者體驗來看，會覺得風格有些強烈。看 Google API 的 Repository，這些 SDK 都是用 generator 產生的，大概也是因為這樣，把抽象層次都拉得比較高。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>有另外兩篇理論打底，這篇實作客戶端就輕鬆多了。像 Google 或 Facebook 這類大型公司都有支援 OAuth 2.0 授權，客戶端只需要呼叫 API 就能完成授權流程，開發體驗算是很完整，也有現成的 SDK 跟 Quick Start 降低開發門檻。真要說問題，大概是要知道去哪裡找開發用的資訊。</p>\n<p>以 Google 來說，我們這次開發用到四、五個網頁，大致可分為 GCP、Scope 跟 People API。這是因為他們對到的 OAuth 2.0 角色有些不同，GCP、Scope 偏授權伺服器那端、People API 偏受保護資源那端，如果對流程不熟，可能逛一逛就迷路了，不知道怎麼進行下去；另外是對開發生態系的熟悉度，看得出來 Google API 文件資訊架構有經過設計，能理解背後組織的邏輯，應該能幫助開發者更快定位到資源。</p>\n<p>希望看完這篇，能讓讀者對 OAuth 2.0 如何落實到實務有個想像。有時候理論講再多都不如親手操作一次來得有感。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://developers.google.com/identity/protocols/oauth2/\">Using OAuth 2.0 to Access Google APIs | Authorization | Google Developers</a></li>\n<li><a href=\"https://developers.google.com/people/quickstart/go\">Go quickstart | People API | Google Developers</a></li>\n</ul>\n",
      "date_published": "2022-11-14T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2022/oauth-2-0-authorization-grant/",
      "url": "https://blog.kenwsc.com/posts/2022/oauth-2-0-authorization-grant/",
      "title": "OAuth 2.0：授權許可",
      "content_html": "<p>在<a href=\"/posts/2022/oauth-2-0-roles-and-channels\">前一篇</a>中，我們討論了 OAuth 2.0 的角色與信道，知道 OAuth 2.0 將授權模型劃分為四個角色，讓它們經由前／後端信道交流，完成整個授權許可流程。在這篇中，我們要進一步來討論，具體的授權許可是什麼？我們將改由時序的角度出發，探討模型中的物件如何交換訊息。如果覺得這段話太抽象，可以理解成，上一篇介紹了遊戲中的角色與道具，而在這篇，我們將來介紹遊戲的流程與規則。</p>\n<p>底下的介紹會著重在授權碼許可(Authorization Code Grant)跟隱式許可(Implicit Grant)兩種 Web 應用場景的授權許可。至於資源擁有者憑證許可(Resource Owner Password Credentials)跟客戶端憑證許可(Client Credentials)，雖然在 RFC 6749 有提到，但因資安風險較高，需要資源擁有者非常信賴客戶端且沒有其他方式情況下，才會拿來使用。</p>\n<h2 id=\"authorization-code-grant\"><a class=\"direct-link\" href=\"#authorization-code-grant\">#</a> Authorization Code Grant</h2>\n<p>顧名思義，授權碼許可是使用臨時的授權碼(code)來進行許可。授權碼有點像是促銷活動用的代碼，可以用來兌換真正的折扣。在流程中，授權伺服器會經由前端信道將授權碼交給客戶端，客戶端拿到代碼後，用它走後端信道，跟授權伺服器兌換 Token。為了怕有資安問題，授權碼的生命週期往往很短，如果沒有兌換，要很快讓它失效。</p>\n<p>透過引入授權碼， OAuth 2.0 將風險分為兩塊，授權碼經由前端信道傳遞，被竊取的風險較高；Token 則經由後端信道傳遞，風險相對低。因此，即使在前端信道的授權碼被竊取了，攻擊者也無法立刻用來兌換 Token，進而避免造成資安問題。</p>\n<p>授權碼許可的流程會長這樣</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2022/oauth-2-0-authorization-grant/oauth-1.png\" />\n</p>\n<p>在啟動授權的階段(A)，客戶端發現需要授權時，它會回覆 302，將需求轉發到授權伺服器，HTTP 響應內容是</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">HTTP/1.1 <span class=\"token number\">302</span> Moved Temporarily<br>x-powered-by: Express<br>Location: http://localhost:9001/authorize?response_type<span class=\"token operator\">=</span>code<span class=\"token operator\">&amp;</span>client<br><span class=\"token assign-left variable\">_id</span><span class=\"token operator\">=</span>oauth-client-1<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">redirect_uri</span><span class=\"token operator\">=</span>http%3A%2F%2Flocalhost%3A9000%2Fcallback<br>Vary: Accept</code></pre>\n<p>瀏覽器收到後，依照 Location，發送 GET 給授權伺服器</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">GET /authorize?response_type<span class=\"token operator\">=</span>code<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">client_id</span><span class=\"token operator\">=</span>oauth-client<br>-1<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">redirect_uri</span><span class=\"token operator\">=</span>http%3A%2F%2Flocalhost%3A9000%<br>2Fcallback<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">state</span><span class=\"token operator\">=</span>Lwt50DDQKUB8U7jtfLQCVGDL9cnmwHH1<br>HTTP/1.1<br>Host: localhost:9001</code></pre>\n<p>可以看到這則訊息的 Query Param 有三個參數，分別是</p>\n<ul>\n<li>response_type：該訊息回覆的類型，因為我們要授權碼，這邊要放 “code”</li>\n<li>client_id：客戶端的 ID，用來讓授權伺服器知道請求授權的客戶端</li>\n<li>redirect_uri：重定向地址，授權完成後，授權伺服器會請瀏覽器再轉回這個地址中。</li>\n</ul>\n<p>授權伺服器解析請求後，會要求資源擁有者認證與授權(B)。接著，授權服器一樣回覆 302(C)，讓瀏覽器跳轉到客戶端</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">HTTP/1.1 <span class=\"token number\">302</span> Found<br>Location: https://client.example.com/cb?code<span class=\"token operator\">=</span>SplxlOBeZQQYbYS6WxSbIA</code></pre>\n<p>其中參數 code 是授權碼。</p>\n<p>客戶端再拿授權碼，用 POST 來兌換 Token (D)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">POST /token<br>Host: localhost:9001<br>Content-type: application/x-www-form-encoded<br>Authorization: Basic b2F1dGgtY2xpZW50LTE6b2F1dGgtY2xpZW50LXNlY3JldC0x<br><br><span class=\"token assign-left variable\">grant_type</span><span class=\"token operator\">=</span>authorization_code<span class=\"token operator\">&amp;</span><br><span class=\"token assign-left variable\">redirect_uri</span><span class=\"token operator\">=</span>http%3A%2F%2Flocalhost%3A9000%2Fcallback<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">code</span><span class=\"token operator\">=</span>8V1pr0rJ</code></pre>\n<p>裡面有三個參數</p>\n<ul>\n<li>grant_type：許可類型，我們是授權碼許可，填 “authorization_code”</li>\n<li>redirect_uri：(A) 提供的客戶端重定向位置，比對用</li>\n<li>code：授權碼</li>\n</ul>\n<p>這裡是關鍵，授權伺服器需要知道申請 Token 的客戶端是受信任的客戶端，還是有人攔截授權碼後，假扮成客戶端來要 Token。授權伺服器跟客戶端因此會有個約定，在開始整個流程之前，客戶端就要到授權伺服器註冊，取得 Client ID 跟認證憑證。申請授權碼時，客戶端會將 Client ID 放入參數內，這讓授權伺服器可以把 Client ID 跟授權碼綁定，接著在兌換 Token 的步驟，客戶端會將自己的認證憑證放在 Authorization Header 中傳給授權伺服器，讓授權伺服器確認客戶端可信任，而且是兌換通過申請的授權碼。</p>\n<p>授權碼只能使用一次，如果被重複使用，授權伺服器要有警覺，授權碼很可能有人盜用了，它應該拒絕核發，並且立刻撤銷之前發送的所有 Token。假設攻擊者搶先兌換到 Token，他的 Token 會因此失效；如果攻擊者是後面才去兌換，他也無法拿到有效 Token。</p>\n<p>如果一切正常，授權伺服器確認沒問題後，會將 Token 返回給客戶端(E)，格式沒特別限定，但通常會用 RFC 6750 描述的 Bearer Token</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">HTTP <span class=\"token number\">200</span> OK<br>Date: Fri, <span class=\"token number\">31</span> Jul <span class=\"token number\">2015</span> <span class=\"token number\">21</span>:19:03 GMT<br>Content-type: application/json<br><br><span class=\"token punctuation\">{</span><br>    <span class=\"token string\">\"access_token\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"987tghjkiu6trfghjuytrghj\"</span>,<br>    <span class=\"token string\">\"token_type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Bearer\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"%E6%AC%8A%E9%99%90%E7%AF%84%E5%9C%8D\"><a class=\"direct-link\" href=\"#%E6%AC%8A%E9%99%90%E7%AF%84%E5%9C%8D\">#</a> 權限範圍</h2>\n<p>只講原理有些枯燥。我們來聊點應用情境。在社群媒體註冊的情境中，資源擁有者用現成的社群媒體來簡化註冊的手續，然而他不想透漏更多的個人資訊，例如好友名單，給第三方應用。這就要求授權機制能限定權限範圍(scope)。</p>\n<p>在權限範圍相關的操作中，客戶端要向資源擁有者請求指定的權限範圍；授權伺服器要依照資源擁有者的核准，發佈對應範圍的 Token；受保護資源要確認請求是不是在權限範圍內。因此這三個角色都需要知道範圍的定義。</p>\n<p>先來看客戶端，修改後，它的請求會是</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">HTTP/1.1 <span class=\"token number\">302</span> Moved Temporarily<br>x-powered-by: Express<br>Location: http://localhost:9001/authorize?response_type<span class=\"token operator\">=</span>code<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">scope</span><span class=\"token operator\">=</span>read<span class=\"token operator\">&amp;</span>client<br><span class=\"token assign-left variable\">_id</span><span class=\"token operator\">=</span>oauth-client-1<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">redirect_uri</span><span class=\"token operator\">=</span>http%3A%2F%2Flocalhost%3A9000%2Fcallback<br>Vary: Accept</code></pre>\n<p>跟前面比起來，多加入 scope，值是 read，這是個自訂值，代表客戶端需要讀取權限。</p>\n<p>然後來看授權伺服器，這邊分為三塊，客戶端在註冊時，應該要把能申請的權限範圍一起註冊進去；在收到客戶端授權申請時，它會將客戶端想要的權限列出來給資源擁有者看，讓資源擁有者確認是否授權；最後，當客戶端要把授權碼兌換成 Token 時，它需要將權限範圍與 Token 綁定。綁定的做法很多，OAuth 2.0 沒有明確規範，最簡單的就是在資料庫建立一個 token 跟 scope 的關係；或者，直接用 JWT 將權限範圍放入 Token 也是個辦法。</p>\n<p>如果給出的權限範圍跟客戶端要的不同，授權伺服器在回覆 Token 的同時，也要給出該 Token 實際的權限</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">HTTP <span class=\"token number\">200</span> OK<br>Date: Fri, <span class=\"token number\">31</span> Jul <span class=\"token number\">2015</span> <span class=\"token number\">21</span>:19:03 GMT<br>Content-type: application/json<br><br><span class=\"token punctuation\">{</span><br>    <span class=\"token string\">\"access_token\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"987tghjkiu6trfghjuytrghj\"</span>,<br>    <span class=\"token string\">\"scope\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"read\"</span>,<br>    <span class=\"token string\">\"token_type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Bearer\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>而受保護資源在收到 Token 時，會確認該 Token 能否存取資源。如果不行，在 HTTP 的慣例中，應該要回覆 401 的狀態碼。</p>\n<p>可以發現 OAuth 2.0 的擴充性不錯，只需要多加一個參數，就能完成權限範圍的需求，而且還可以向下相容，充分體現開閉原則(OCP)的特性。但是它也在客戶端、授權伺服器與受保護資源間創造隱性依賴，它們需要同時實現同樣的授權範圍規格，才能正常運作。實務上，授權伺服器與受保護資源間的依賴可能還好，因為通常會由相同的供應商(Provider)開發。然而客戶端在設計前，就得先自行了解一下需要的權限範圍。</p>\n<h2 id=\"%E8%B7%A8%E7%AB%99%E8%AB%8B%E6%B1%82%E5%81%BD%E9%80%A0\"><a class=\"direct-link\" href=\"#%E8%B7%A8%E7%AB%99%E8%AB%8B%E6%B1%82%E5%81%BD%E9%80%A0\">#</a> 跨站請求偽造</h2>\n<p>在前一篇討論前 / 後端信道時，曾經說道前端信道有資安風險，而 CSRF（跨站請求偽造）是其中一種常見的攻擊手法。從字面上來理解，CSRF 指讓瀏覽器向網站發起偽造的請求，從而達到攻擊目的。我們說過瀏覽器是資源擁有者用來跟網路互動的介面，稱為用戶代理，照理講，用戶代理會忠實依照資源擁有者的意向來操作，然而，它畢竟也是種工具，有自己的運行規則。攻擊者可以利用規則中的模糊地帶，讓瀏覽器發出資源擁有者沒意識到的請求。</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2022/oauth-2-0-authorization-grant/oauth-2.png\" />\n</p>\n<p>用時序圖來看會比較容易理解。攻擊者先執行 (C.1) 的流程，直接跟授權伺服器互動，拿到授權碼。接著，他誘導資源擁有者使用授權碼跟客戶端互動(C.2)，將授權碼換成 Token，這件事做起來很簡單，只要讓資源擁有者瀏覽惡意頁面，並在頁面中放入</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://ouauthclient.com/callback?code=ATTACKER_AUTHORIZATION_CODE<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>瀏覽器會以為這是圖片，自動發出 GET 請求給客戶端，資源擁有者不會知道偽造請求已經默默送出。</p>\n<p>我們可能會納悶，即使如此，兌換到的 Token 也是攻擊者的 Token，只能存取攻擊者的受保護資源，應該沒有資源洩漏的問題？是的沒錯，資源擁有者是存取攻擊者的資源，然而他沒有意識到這件事，資源擁有者以為現在存取的是自己的資源，此時任何操作，都會將資訊放入攻擊者的受保護資源中，像是銀行帳戶或密碼。資安風險不是只有在別人存取你的資源時會發生，你存取別人的資源時一樣有資安風險。</p>\n<p>要怎麼處理這問題？既然它是 CSRF 的風險，我們就使用 CSRF 的對策來緩解。要點很簡單，我們要讓客戶端知道 (C.2) 的請求不是偽造，能對應到 (A) 的重定向，因此需要在 (A) 跟 (C.2) 中間建立關聯。從上面的流程可以看到，由於 (C.2) 是偽造的，沒有對應的 (A)，只要客戶端比對後查無資料，它就能立即中斷 OAuth 2.0 後續的步驟。</p>\n<p>具體來說，修改客戶端 (A) 的重定向</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">HTTP/1.1 <span class=\"token number\">302</span> Moved Temporarily<br>x-powered-by: Express<br>Location: http://localhost:9001/authorize?response_type<span class=\"token operator\">=</span>code<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">scope</span><span class=\"token operator\">=</span>read<span class=\"token operator\">&amp;</span>client<br><span class=\"token assign-left variable\">_id</span><span class=\"token operator\">=</span>oauth-client-1<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">redirect_uri</span><span class=\"token operator\">=</span>http%3A%2F%2Flocalhost%3A9000%2Fcallback<span class=\"token operator\">&amp;</span><br><span class=\"token assign-left variable\">state</span><span class=\"token operator\">=</span>Lwt50DDQKUB8U7jtfLQCVGDL9cnmwHH1<br>Vary: Accept</code></pre>\n<p>加入新的參數 state，這個 state 就是 (A) 跟 (C.2) 的關聯，在術語上稱呼為 CSRF Token。</p>\n<p>授權伺服器會將授權碼傳給客戶端 (C)，這裡把原本的 state 原封不動附上</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">HTTP <span class=\"token number\">302</span> Found<br>Location: http://localhost:9000/oauth_callback?code<span class=\"token operator\">=</span>8V1pr0rJ<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">state</span><span class=\"token operator\">=</span>Lwt50DDQKUB8U7jtfLQCVGDL9cnmwHH1</code></pre>\n<p>客戶端收到 (C.2) 的請求後，驗證 state 跟 (A) 是否相同。對攻擊者來說，他偽造的請求將會被客戶端擋下，因為「客戶端的每個請求都能辨識，只要攻擊者不知道辨識方式，他就無法偽造」。</p>\n<h2 id=\"%E9%8C%AF%E8%AA%A4%E8%99%95%E7%90%86\"><a class=\"direct-link\" href=\"#%E9%8C%AF%E8%AA%A4%E8%99%95%E7%90%86\">#</a> 錯誤處理</h2>\n<p>上面的情況都是假設授權流程正常執行。但有可能，在流程中會發生一些與預期不同的狀況，例如第三方應用要取得的資訊是資源擁有者不願意授權的。當面對這些例外狀況，OAuth 2.0 會怎麼處理呢？</p>\n<p>這裡的錯誤分為兩種，首先，要是客戶端沒到授權伺服器註冊過，授權伺服器會認為該客戶端是個不可信任來源，既然客戶端是個不可信任來源，就沒必要透過前端信道，轉址回客戶端，取而代之，應該要告訴資源擁有者，他正在使用一個不可信任的客戶端，有資安風險存在。這時 error 的回覆對象會是資源擁有者。</p>\n<p>同樣來上個流程圖</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2022/oauth-2-0-authorization-grant/oauth-3.png\" />\n</p>\n<p>而如果錯誤是因為資源擁有者拒絕授權，或者因為授權伺服器內部的問題造成。授權伺服器需要告知客戶端原因，讓客戶端能處理錯誤。雖然中間經過資源擁有者，但我們知道，前端信道本質上是客戶端與授權伺服器間的通信，因此這裡的 error 回覆對象會是客戶端。</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2022/oauth-2-0-authorization-grant/oauth-4.png\" />\n</p>\n<p>要告知客戶端錯誤訊息，要用類似授權碼的傳遞方式。將訊息放在 Query Param</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">HTTP/1.1 <span class=\"token number\">302</span> Found<br>Location: https://client.example.com/callback?error<span class=\"token operator\">=</span>access_denied<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">error_description</span><span class=\"token operator\">=</span>resource_owner_reject<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">state</span><span class=\"token operator\">=</span>Lwt50DDQKUB8U7jtfLQCVGDL9cnmwHH1</code></pre>\n<p>有兩個新參數</p>\n<ul>\n<li>error：OAuth 2.0 定義的錯誤代碼，像是 “invalid_request”、“access_denied”、“server_error”，詳細可以參照 RFC 6749 Sec 4.1.2.1。</li>\n<li>error_description：錯誤的詳細資訊，用來給客戶端的開發者除錯。</li>\n</ul>\n<p>我們可以看到前端信道跟後端信道的通訊模型有些不同，本質上兩者都是要傳遞訊息，但因為前端信道還需要轉址，占用了 status code 的空間，把 server error 這類原本 5xx 的訊息改成放在 Query 中。</p>\n<h2 id=\"implicit-grant\"><a class=\"direct-link\" href=\"#implicit-grant\">#</a> Implicit Grant</h2>\n<p>我們已經討論過很多授權碼許可類型的情境，這些情境是建立在角色分離的前提下，但在實務中，有可能同一個實體會身兼多個角色，例如有些應用是用 JavaScript 跑在瀏覽器中，這時瀏覽器既是資源擁有者的用戶代理，也是要求資源的客戶端。角色混合會讓授權碼失去意義，因為即使拿到授權碼，最後還是得由瀏覽器兌換成 Token，安全邊界沒有發揮作用。</p>\n<p>隱式許可類型(Implicit Grant)可以當成是授權碼許可類型的簡化版本。既然授權碼無法發揮作用，乾脆省略這個步驟，降低設計成本。在隱式許可中，客戶端直接跟授權伺服器取得 Token，兩者間的通訊只使用前端信道。它的流程圖是</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2022/oauth-2-0-authorization-grant/oauth-5.png\" />\n</p>\n<p>請求的內容要稍微修改，response_type 是響應的類型，這裡不再使用 code，改為 token，要求直接回覆 Token，修改後變成</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">HTTP/1.1 <span class=\"token number\">302</span> Moved Temporarily<br>Location: http://localhost:9001/authorize?response_type<span class=\"token operator\">=</span>token<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">scope</span><span class=\"token operator\">=</span>read<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">client_id</span><span class=\"token operator\">=</span>oauth-client-1<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">redirect_uri</span><span class=\"token operator\">=</span>http%3A%2F%2Flocalhost%3A9000%2Fcallback<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">state</span><span class=\"token operator\">=</span>Lwt50DDQKUB8U7jtfLQCVGDL9cnmwHH1<br>Vary: Accept</code></pre>\n<p>授權伺服器的回覆也跟著變成</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">GET /callback<span class=\"token comment\">#access_token=987tghjkiu6trfghjuytrghj&amp;token_type=Bearer&amp;state=Lwt50DDQKUB8U7jtfLQCVGDL9cnmwHH1</span><br>HTTP/1.1<br>Host: localhost:9000</code></pre>\n<p>Token 放在 URL 的錨點(Fragment)回傳，確保該訊息只會在瀏覽器內，不會發送到伺服器。</p>\n<p>使用隱式許可，要付出什麼代價呢？很顯然，由於用戶代理跟客戶端成為一體，我們不可能要求客戶端申請 Token 前先到授權伺服器註冊，授權伺服器因此無法判斷客戶端是否能信任。再來，Token 明確地曝露在資源擁有者眼前，攻擊者可以藉由查看資源擁有者的瀏覽器來取得 Token，如果客戶端設計有問題，或是瀏覽器上有其他惡意程式在執行，Token 就有機會被竊取。從安全性的層面來說，隱式許可有它的風險，通常只會用在很限定的情境。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>這篇以授權碼許可為主，走了一遍授權許可流程。因為要考量資安問題，流程上顯得有些複雜，通常開發者想知道的是，他開發出來的第三方應用，應該如何接入 OAuth 2.0 的流程中？用術語來講，開發客戶端需要有哪些背景知識？</p>\n<p>如果不是因為特別原因，建議一律使用授權碼許可類型，它具有最全面的資安設計，能避免 Token 被盜用。另外，開發者應該要讀授權伺服器與受保護資源提供的技術文件，知道如何註冊客戶端並選擇認證憑證，還有受保護資源的 API 需要哪些範圍的存取權限。最後，如果有資安相關的對策，最好盡可能實作，像是加入 state 之類的欄位，畢竟授權是個相對敏感的題目，多點保護總是好的。</p>\n<p>希望讀完這篇文後，能幫助讀者釐清 OAuth 2.0 的流程，讓開發者在實際開發前，能知道每個步驟與欄位的用途是什麼。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://www.rfc-editor.org/rfc/rfc6749\">RFC 6749: The OAuth 2.0 Authorization Framework</a></li>\n<li><a href=\"https://github.com/oauthinaction/oauth-in-action-code/\">GitHub - oauthinaction/oauth-in-action-code: Source code for OAuth 2 in Action</a></li>\n<li><a href=\"https://www.ithome.com.tw/voice/129385\">從簡單到繁複的OAuth2</a></li>\n<li><a href=\"https://blog.huli.tw/2017/03/12/csrf-introduction/\">讓我們來談談 CSRF</a></li>\n</ul>\n",
      "date_published": "2022-11-09T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2022/oauth-2-0-roles-and-channels/",
      "url": "https://blog.kenwsc.com/posts/2022/oauth-2-0-roles-and-channels/",
      "title": "OAuth 2.0：角色與信道",
      "content_html": "<p>使用者體驗是 B2C 重要的產品面向。通常一個網路服務，會要求使用者註冊帳戶後才能開始使用——以台灣金融保險法規為例，使用者需要建立帳戶後，才能得到報價。站在行銷觀點，註冊會降低用戶的轉換率，因為它需要填寫姓名、暱稱、生日、信箱等資料，步驟相當繁瑣，對行動場景，這百分百是個負面體驗。這讓人不禁想問，這個環節是可以優化的嗎？</p>\n<p>事實上，我們可以合理假設使用者資訊已經存在社群媒體中，例如 Google、Facebook、Twitter、GitHub，而我們需要的只是請求使用者同意，讓我們可以代表使用者，存取社群媒體中受限制的資源。也就是，我們關注的是有沒有一個授權框架，可以讓第三方應用取得對資源的訪問權限。</p>\n<h2 id=\"oauth-2.0\"><a class=\"direct-link\" href=\"#oauth-2.0\">#</a> OAuth 2.0</h2>\n<p>這就帶到 OAuth 2.0 想要解決的問題。在傳統的 Client-Server 認證架構中，當客戶端要存取伺服端資源時，需要提供使用者的帳號密碼。如果發起請求的是第三方應用，則資源擁有者要將帳號密碼提供給第三方應用。可以想像，你需要請人幫你收信，就需要把家裡鑰匙交給對方。而這會有幾個問題：</p>\n<ul>\n<li>第三方應用會儲存使用者帳號密碼，而且為了後續使用，會存成明文。</li>\n<li>第三方應用會得到完整權限，使用者沒辦法限制第三方應用的使用時間與存取範圍。</li>\n<li>第三方應用的存取權無法單方面撤回，如果修改密碼，不只是想撤回的應用，所有應用的存取權都會被撤銷。</li>\n<li>任何第三方應用被駭，所有的用到該密碼的資源都可能被惡意人士存取。</li>\n</ul>\n<h2 id=\"%E8%A7%92%E8%89%B2%E5%AE%9A%E7%BE%A9\"><a class=\"direct-link\" href=\"#%E8%A7%92%E8%89%B2%E5%AE%9A%E7%BE%A9\">#</a> 角色定義</h2>\n<p>你可能會發現，我們要做的是件很衝突的事。一方面希望可以對應用授權，另一方面又希望授權不會有資安問題。處理過金融應用的人應該深有同感，金融的基礎就是信任，而信任關係著角色的分配與互動。以常見的例子來說，開發者跟維運人員的角色不同，不僅是為了讓責任更明確，也是為了防止開發問題影響到生產環境。</p>\n<p>OAuth 2.0 在系統設計中，定義了四個角色</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2022/oauth-2-0-roles-and-channels/oauth-1.png\" />\n</p>\n<p><strong>資源擁有者(Resource Owner)</strong> 是能授權訪問權限的主體。通常資源擁有者是終端使用者，他們握有密碼，能進行身分認證，並核可授權範圍。在網路世界，終端使用者會透過瀏覽器跟網路服務互動，我們可以把瀏覽器看成是使用者的代理人，稱為「用戶代理」，這意味著，安全的瀏覽器非常重要，一名不可靠的代理人容易有資安問題。</p>\n<p><strong>受保護資源(Protected Resource)</strong> 是資源擁有者存放在其他服務的資源，在社群媒體註冊的例子中，受保護資源是資源擁有者的個人資訊。如前面提到的，為降低服務的使用門檻，第三方應用希望取得既有的受保護資源，至於如何取得呢？第三方應用會在請求時攜帶 Token，說明自己有得到授權，受保護資源確認 Token 後，會允許第三方應用訪問核可的資源。</p>\n<p>講到第三方應用，在 OAuth 2.0 的正式名稱叫<strong>客戶端(Client)</strong>，是代表資源擁有者存取受保護資源的主體，可以理解成需要存取資源的應用。如前面講到的，該應用需要攜帶 Token 來請求資源。因此在 OAuth 2.0 中，它主要負責請求和使用 Token。</p>\n<p><strong>授權伺服器(Authorization Server)</strong> 負責認證與授權的伺服器。OAuth 2.0 為區別資源擁有者與客戶端兩個角色，在中間引入授權伺服器，將資源擁有者的權限轉換成客戶端使用的 Token。舉例來說，辦公室的門禁系統，員工可以持員工證進入大門，因為該員工證是系統發放的憑證。但使用同樣的憑證，卻可能進不去 SRE 的機房，因為機房不在該憑證的授權範圍內。藉由這樣的機制，限定受保護資源的存取，讓認證不等同授權。</p>\n<h3 id=\"token\"><a class=\"direct-link\" href=\"#token\">#</a> Token</h3>\n<p>在前面的介紹中，我們說到客戶端跟受保護資源彼此隔離，透過授權服務器核發的 Token 來存取資源。因此在 OAuth 2.0 中，Token 代表著資源擁有者授予客戶端的存取權限。用門禁系統來比喻的話，可以看成是員工證這樣的工具。</p>\n<p>值得注意的是，Token 對不同角色的透明程度不同，對客戶端來說，因為它不需要知道 Token 的內容，只需要在請求資源時攜帶 Token，所以 Token 對它是不透明的存在。這就像我們不需要知道員工證感應時傳遞了哪些資訊，只需要知道員工證可以打開大門。而授權伺服器負責頒發 Token，受保護資源負責驗證 Token，兩者都會需要知道 Token 具體的含意。在這裡，使用 Token，而不是帳號密碼的設計，可以讓客戶端保持單純，因為它不透明的特性，客戶端不會受到 Token 變動的影響。即使使用者的密碼更改了，客戶端仍然可以維持相同設定。</p>\n<p>圍繞著 Token，也延伸出一個議題：權限應該如何獲取？我們可以想像，四個角色在處理授權時應該會遵循一套流程，OAuth 2.0 稱呼這套流程為<strong>授權許可(Authorization Grant)</strong>，客戶端用它來取得 Token，並用 Token 向受保護資源發出請求。為因應不同的應用場景，RFC 6749 有定義出四套授權許可類型，分別是</p>\n<ul>\n<li>授權碼許可類型(Authorization Code)</li>\n<li>隱式許可類型(Implicit)</li>\n<li>資源擁有者憑證許可類型(Resource Owner Password Credentials)</li>\n<li>客戶端憑證許可類型(Client Credentials)</li>\n</ul>\n<p>其中以授權碼許可類型最為普遍。</p>\n<h2 id=\"%E4%BF%A1%E9%81%93\"><a class=\"direct-link\" href=\"#%E4%BF%A1%E9%81%93\">#</a> 信道</h2>\n<p>現在我們有了角色，也有了流程。角色間要交流，就會需要有通信的管道，這稱為信道(Channel)。OAuth 2.0 是基於 HTTP 實現的，因此會使用 HTTP 來傳遞訊息，然而，HTTP 的通訊模型與 OAuth 2.0 的設計存在語義落差，我們需要找出彼此的對應關係，才能實現角色間的通訊。在這裡，我們依照通訊是否經過資源擁有者，將信道分為兩種類型：後端信道(Back-channel)與前端信道(Front-channel)。</p>\n<p><strong>後端信道(Back-channel)</strong> 使用常見的 Client-Server 通訊，因為通訊發生在資源擁有者的可見範圍外，所以稱為後端(Back)。具體來說，會依照授權許可的不同，而有不同的實現。像客戶端跟授權伺服器兌換 Token，或客戶端向受保護資源存取資源，都是通過後端信道。這樣的好處是，使用者不需要參與其中，動作能自動完成，而且因為請求沒有暴露，能降低攻擊面積，從資安的角度來講更加安全。</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2022/oauth-2-0-roles-and-channels/oauth-2.png\" />\n</p>\n<p>常見的後端信道請求類似</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">POST /token<br>Host: localhost:9001<br>Accept: application/json<br>Content-type: application/x-www-form-encoded<br>Authorization: Basic b2F1dGgtY2xpZW50LTE6b2F1dGgtY2xpZW50LXNlY3JldC0x<br><br><span class=\"token assign-left variable\">grant_type</span><span class=\"token operator\">=</span>authorization_code<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">redirect_uri</span><span class=\"token operator\">=</span>http%3A%2F%2Flocalhost%3A9000%2Fcallback<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">code</span><span class=\"token operator\">=</span>8V1pr0rJ</code></pre>\n<p>而響應則是</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">HTTP <span class=\"token number\">200</span> OK<br>Date: Fri, <span class=\"token number\">31</span> Jul <span class=\"token number\">2015</span> <span class=\"token number\">21</span>:19:03 GMT<br>Content-type: application/json<br><br><span class=\"token punctuation\">{</span><br>    <span class=\"token string\">\"access_token\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"987tghjkiu6trfghjuytrghj\"</span>,<br>    <span class=\"token string\">\"token_type\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Bearer\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><strong>前端信道(Front-channel)</strong> 是經過資源擁有者的通信管道，通過瀏覽器使用 HTTP 的重定向來實現。可能有人會好奇，既然已經有後端信道，而且資安防護上更好，為什麼還需要用前端信道來通訊？原因是，我們不希望由客戶端來進行身分認證與授權。資源擁有者可以把授權結果轉交給客戶端，可是不會把帳號密碼交給客戶端。它的目的是隔離客戶端跟授權伺服器間的通訊，讓資源擁有者參與到認證與授權過程，而不是由客戶端自行處理。</p>\n<p align=\"center\">\n  <img src=\"/img/posts/2022/oauth-2-0-roles-and-channels/oauth-3.png\" />\n</p>\n<p>聽起來有些複雜，希望客戶端能得到授權結果，卻又不希望客戶端自行處理，這是什麼意思？當我們覺得軟體太複雜時，請想想身邊的例子。假設你現在想請假，會怎麼做呢？你會上請假系統申請假單，假單經主管簽核後生效，在請假日就可以不用上班。同樣的，當客戶端需要資源時，它會講說，請幫我到授權伺服器核准，核准後，授權結果才會轉交給客戶端。如果讓客戶端自行處理，就像一個員工可以自己簽假單，你會希望他簽核時有摸著良心。</p>\n<p>在授權模型中，真正需要資源擁有者參與的，只有「認證」與「授權」，其他事情都希望能自動完成。前端信道的設計是利用 HTTP 的重定向跟瀏覽器收到重定向後的跳轉來達成。希望獲得授權的客戶端，會在瀏覽器發起請求時回覆</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">HTTP <span class=\"token number\">302</span> Found<br>Location: http://localhost:9001/authorize?client_id<span class=\"token operator\">=</span>oauth-client-1<span class=\"token operator\">&amp;</span>response_<br><span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span>code<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">state</span><span class=\"token operator\">=</span>843hi43824h42tj</code></pre>\n<p>瀏覽器收到回覆後，因為有 302，會自動導向 Location 中的授權伺服器授權端點，交由資源擁有者與授權伺服器進行認證與授權。等到完成後，授權伺服器會回覆瀏覽器</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">HTTP <span class=\"token number\">302</span> Found<br>Location: http://localhost:9000/oauth_callback?code<span class=\"token operator\">=</span>23ASKBWe4<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">state</span><span class=\"token operator\">=</span>843hi438</code></pre>\n<p>瀏覽器收到後，會再重新導向到客戶端。</p>\n<p>跟後端信道比起來，前端信道給了資源擁有者參與的空間，也給了惡意攻擊者攻擊的空間。就像前面討論的，前端信道是透過 HTTP 重定向的方式來傳遞訊息，而重定向是種間接的通訊方式，客戶端跟授權伺服器兩端，沒辦法知道發出的響應是否真的有到達目的地，也不知道中間是不是有被竄改跟複製。攻擊者可以攔截重定向的位置，修改後傳給受害者，而當受害者將修改後的重定向位置傳給授權伺服器時，授權伺服器也不知道這個請求的來源是正常還是惡意。因為這個緣故，在使用前端信道傳遞訊息時，會需要注意相對應的資安措施是否做到位。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>這篇文的出發點是想探討 OAuth 2.0 的授權模型。讓開發者在選擇授權許可時，能理解角色間的互動，還有設計上要注意的資安風險。資安問題也是 OAuth 2.0 這麼複雜的主因，實作上許多細節都是為了處理各種資安漏洞。要理解這些漏洞為什麼存在，就必須理解角色權責與信道，如果我是攻擊者，想取得 Token 好存取受保護資源，我可能會偽造角色（假的客戶端）或偽造信道（修改重定向後讓被害者使用），而這些偽造方式，又跟互動模式有密切關係。</p>\n<p>希望讀完這篇文後，能幫助讀者釐清一些原本的困惑，知道 OAuth 2.0 的原理與限制。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://www.rfc-editor.org/rfc/rfc6749\">RFC 6749: The OAuth 2.0 Authorization Framework</a></li>\n<li><a href=\"https://github.com/oauthinaction/oauth-in-action-code/\">GitHub - oauthinaction/oauth-in-action-code: Source code for OAuth 2 in Action</a></li>\n<li><a href=\"https://l3ouu4n9.github.io/post/learningnotes/2021-05-27-oauth-notes/\">OAuth 2.0 學習筆記</a></li>\n<li><a href=\"https://developers.google.com/identity/protocols/oauth2/web-server#httprest\">Using OAuth 2.0 for Web Server Applications | Authorization | Google Developers</a></li>\n<li><a href=\"https://xiang753017.gitbook.io/zixiang-blog/security/cong-rfc-gui-ge-shu-guan-dian-jie-xi-oauth-2.0\">從 RFC 規格書觀點解析 OAuth 2.0</a></li>\n</ul>\n",
      "date_published": "2022-11-02T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2022/store-config-in-the-environment-golang-practice/",
      "url": "https://blog.kenwsc.com/posts/2022/store-config-in-the-environment-golang-practice/",
      "title": "配置存放於環境：Go 應用的配置實踐",
      "content_html": "<p>在雲原生的環境中，程式通常採用容器部署，而不同環境間所需要的配置也會不同，像是開發環境的資料需要與生產環境分離；金絲雀部署要分流生產環境的流量，但不會寫資料到生產環境中；開發環境為了除錯，要印出 level 低的 log；開發環境跟生產環境要拿取的 key vault 的 key 跟 version 不同；等等。在雲原生的時代前，開發人員或維運人員通常會各自維護一份執行的程式，開發在開發環境中驗證後，交付維運部署上線，一次性處理好配置；但在雲原生時代，部署變得越來越頻繁，幾乎不太可能手動管理。這時要把問題倒過來想，不是因應開發出來的程式來設定配置，而是有沒有可能，因應部署會遇到的問題來設計開發？</p>\n<p><img src=\"/img/posts/2022/store-config-in-the-environment-golang-practice/clond-native-1.png\" alt=\"雲原生常見的部署架構\"></p>\n<h2 id=\"store-config-in-the-environment\"><a class=\"direct-link\" href=\"#store-config-in-the-environment\">#</a> Store config in the environment</h2>\n<p>Heroku 基於 SaaS(Software-as-a-Service) 實踐，歸納出 12 條雲原生應用的設計原則，稱為 The Twelve-Factor App，其中關於配置，Heroku 要求「代碼與配置分離」，讓一份代碼，可以部署在多個環境。在實踐上，硬編碼當然不是個選擇，但即使用配置檔來管理配置，也還是有一些問題：配置文件要放在哪個路徑呢？它的格式應該採用 JSON 還是 YAML？別忘了微服務有可能用不同語言來實現，不同語言都支援選用的格式嗎？</p>\n<p>考量這些問題，Heroku 建議將配置放在環境變數中，這確實更符合雲原生的概念。讓我們假設一個場景，現在是發佈前夕，版本要上到金絲雀部署環境，SRE 需要建立容器後，用命令行進入容器內，修改配置檔，然後重啟容器程序。這個流程聽起來繁複且不太合理。如果好一點，SRE 將這些流程寫成腳本，讓腳本自動修改配置，那當配置檔的路徑或格式變更時，腳本也要跟著異動，這會產生摩擦力，阻止開發者對配置的修改。即使在最好的狀況下，SRE 在啟動容器時指定配置檔，也需要將配置檔事先放入 pod 中。可以看到，單單是路徑跟格式這兩點，就會生出複雜度。</p>\n<p>相較下，環境變數是鍵值對結構，更清晰易讀，更重要的是，它更容易標準化，不會受到語言限制。假設 SRE 要在啟動容器時加入配置，他只需要使用 -e 之類的參數；或者更單純，使用 CI/CD Pipeline 管理環境變數，讓不同的 Job 自行取用。</p>\n<h2 id=\"%E4%BD%BF%E7%94%A8-.env\"><a class=\"direct-link\" href=\"#%E4%BD%BF%E7%94%A8-.env\">#</a> 使用 .env</h2>\n<p>然而從開發者的角度，這勢必關係到開發者體驗的異動。在原本的流程中，開發者可以用配置檔來管理配置，例如在本地環境與開發環境間切換。改成環境變數後，要切換環境需要改用命令行建立環境變數，不容易在專案中管理。</p>\n<p>一個折衷的辦法是將環境變數寫成腳本導出，類似</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># env.sh</span><br><br><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">API_GATEWAY_ENV</span><span class=\"token operator\">=</span>dev<br><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">API_GATEWAY_CORS_ALLOW_ORIGINS</span><span class=\"token operator\">=</span>https://api.gateway.com<br><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">API_GATEWAY_LOG_LOG_LEVEL</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><br><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">API_GATEWAY_LOG_PRETTY_OUTPUT</span><span class=\"token operator\">=</span>false</code></pre>\n<p>然後在執行程式前，先執行腳本導出環境變數，例如修改 makefile 為</p>\n<pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token symbol\">all</span><span class=\"token punctuation\">:</span> api-gateway<br><br><span class=\"token symbol\">api-gateway</span><span class=\"token punctuation\">:</span><br>    source configs/env.sh<br>    go run main.go</code></pre>\n<p>這是從專案著手，解決開發配置問題。相應的，也要求所有專案都採用同樣的慣例，統一 makefile 的寫法。如果想進一步降低複雜度，使用 codebase 來解決開發配置的問題，應該要怎麼做呢？有沒有可能對應配置檔的寫法，讓程式啟動時從檔案讀取環境變數？這裡可以用上 <a href=\"https://github.com/joho/godotenv\">joho/godotenv</a> 這個第三方庫。</p>\n<p>用法是執行 func 後載入環境變數，如果沒指定檔案，載入 .env，.env 在這裡扮演了類似配置檔的角色</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"log\"</span><br>    <span class=\"token string\">\"os\"</span><br>    <span class=\"token string\">\"github.com/joho/godotenv\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    err <span class=\"token operator\">:=</span> godotenv<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>    log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error loading .env file\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    s3Bucket <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Getenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"S3_BUCKET\"</span><span class=\"token punctuation\">)</span><br>    secretKey <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Getenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SECRET_KEY\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token comment\">// now do something with s3 or whatever</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>godotenv 的原理是包裝了標準庫 Env 相關 func</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">loadFile</span><span class=\"token punctuation\">(</span>filename <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> overload <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>    envMap<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><br>    <span class=\"token comment\">// ...</span><br>    currentEnv <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>    rawEnv <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Environ</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> rawEnvLine <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> rawEnv <span class=\"token punctuation\">{</span><br>        key <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span>rawEnvLine<span class=\"token punctuation\">,</span> <span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><br>        currentEnv<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> envMap <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>currentEnv<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> overload <span class=\"token punctuation\">{</span><br>            os<span class=\"token punctuation\">.</span><span class=\"token function\">Setenv</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>而 .env 的內容則是</p>\n<pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token comment\"># .env file</span><br><br><span class=\"token key attr-name\">API_GATEWAY_ENV</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">dev</span><br><span class=\"token key attr-name\">API_GATEWAY_CORS_ALLOW_ORIGINS</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">https://api.gateway.com</span><br><span class=\"token key attr-name\">API_GATEWAY_LOG_LOG_LEVEL</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">0</span><br><span class=\"token key attr-name\">API_GATEWAY_LOG_PRETTY_OUTPUT</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span></code></pre>\n<p>如果環境變數已經存在，使用原本的環境變數，如果環境變數不存在，套用 .env 中的設定。</p>\n<p>但這樣畢竟還是需要手動指定，如果我們想套用「約定優於配置」的原則，讓程式自動載入 .env 的話呢？在 godotenv 底下有個 package 可以用來自動載入</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token boolean\">_</span> <span class=\"token string\">\"github.com/joho/godotenv/autoload\"</span></code></pre>\n<p>利用的是 init() 的機制</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    godotenv<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>使用 .env 的另一個優點是，當開發者需要跟 SRE 溝通要設置的環境變數時，他們可以基於同一份檔案來討論。有必要的話，.env 中還可以加上範例跟註解，幫助 SRE 理解環境變數的用途。</p>\n<h2 id=\"load-environment-variable-as-a-struct\"><a class=\"direct-link\" href=\"#load-environment-variable-as-a-struct\">#</a> Load environment variable as a struct</h2>\n<p>讓我們來看看在 Go 的應用程式中，要如何使用這些環境變數，當然，既然它已經是環境變數了，我們可以用標準庫的 os.Getenv 來讀取</p>\n<pre class=\"language-go\"><code class=\"language-go\">envName <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Getenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"API_GATEWAY_ENV\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>可是假設，你有超過 10 個以上的環境變數，這會變成是一件苦差事，而且難以維護。如果可以，我們希望用一個 struct 來存放環境變數，讓程式在啟動直接讀進 struct，省下後面轉換的功夫</p>\n<p>這裡要用到另一個庫 <a href=\"https://github.com/spf13/viper\">viper</a></p>\n<p>viper 是設計來處理配置，要從環境變數載入配置，可以用</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> LogConfig <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    Level        <span class=\"token builtin\">int</span>    <span class=\"token string\">`yaml:\"level\" mapstructure:\"level\"`</span><br>    PrettyOutput <span class=\"token builtin\">string</span> <span class=\"token string\">`yaml:\"pretty_output\" mapstructure:\"pretty_output\"`</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">type</span> Config <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    Env             <span class=\"token builtin\">string</span>    <span class=\"token string\">`yaml:\"env\" mapstructure:\"env\"`</span><br>    CorsAllowOrigin <span class=\"token builtin\">string</span>    <span class=\"token string\">`yaml:\"cors_allow_origin\" mapstructure:\"cors_allow_origin\"`</span><br>    Log             LogConfig <span class=\"token string\">`yaml:\"log\" mapstructure:\"log\"`</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    b<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> yaml<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Config<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    defaultConfig <span class=\"token operator\">:=</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><br>    viper<span class=\"token punctuation\">.</span><span class=\"token function\">SetConfigType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yaml\"</span><span class=\"token punctuation\">)</span><br>    viper<span class=\"token punctuation\">.</span><span class=\"token function\">MergeConfig</span><span class=\"token punctuation\">(</span>defaultConfig<span class=\"token punctuation\">)</span><br>    viper<span class=\"token punctuation\">.</span><span class=\"token function\">AutomaticEnv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    viper<span class=\"token punctuation\">.</span><span class=\"token function\">SetEnvPrefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"API_GATEWAY\"</span><span class=\"token punctuation\">)</span><br>    viper<span class=\"token punctuation\">.</span><span class=\"token function\">SetEnvKeyReplacer</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">NewReplacer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>viper<span class=\"token punctuation\">.</span><span class=\"token function\">AllSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>    _config <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Config<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> viper<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>_config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span><br>    <span class=\"token punctuation\">}</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>_config<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>坦白說，流程還是有些複雜。因為 viper 是採用覆寫的方式，所以前面要先設定個 yaml 格式的 config 當預設；再用 AutomaticEnv 跟 Unmarshal 把環境變數的值反序列化到 struct 內。為了跟其他環境變數區別，應用相關的環境變數最好加上前綴。</p>\n<p>執行結果可以得到</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go run main.go<br><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">{</span>dev <span class=\"token punctuation\">[</span>https://api.gateway.com<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https://api.gateway.com<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span> true<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n<p>viper v2 可能會讓流程更開發友善些，但在有更好的選擇前，可以先用這方式來降低讀取配置的維護成本。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>這篇嘗試從「Design for Operation」的角度梳理配置設計。不得不說環境變數是個相當漂亮的提案，小小的改動，大大的效益，既符合配置需求，又能簡化原本流程，讓概念變得更加清晰。我們可以注意到，在雲原生時代，有些責任會從原本的位置左移，而面對這樣的轉變，開發者也需要調整思維與手中的彈藥庫，嘗試從設計，而不是從工具來解決問題。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://12factor.net/config\">The Twelve-Factor App</a></li>\n<li><a href=\"https://marcus116.blogspot.com/2020/09/architecture-12-factor-app.html\">[Architecture] The 12 factor App 筆記</a></li>\n</ul>\n",
      "date_published": "2022-10-28T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2022/three-semantics-of-rabbitmq/",
      "url": "https://blog.kenwsc.com/posts/2022/three-semantics-of-rabbitmq/",
      "title": "關於消息的三層語義：以 RabbitMQ 為例",
      "content_html": "<p>對分散式系統來說，消息的可靠性非常重要，想想一個金融應用的場景，如果在支付時，消息遺失了，或是重複遞送了，都會造成使用者的困擾。當我們在系統中引入消息隊列時，我們同時引入了複雜度，這意思是，系統的「處理消息」跟你想的不一定是同一件事。從可靠性的角度來看，「處理消息」的語義可以分為三個層次，第一層是「最多一次」，當你請系統處理消息時，它會幫你進行，但最多一次，並且不保證是否完成；第二層是「最少一次」，系統會幫你處理消息，而且附帶必要的錯誤處理，確保消息至少被完成一次；第三層是「準確一次」，意指消息不多不少，恰恰好被準確處理並完成了一次。</p>\n<p>當試著從語言學的角度來看待系統時，我們才能規劃出系統的整體面貌。儘管「準確處理一次」有最佳的可靠性，但因為其處理成本，降低了系統整體的吞吐量。在〈Starbucks Does Not Use Two-Phase Commit〉一文中，Gregor Hohpe 精確描繪了星巴克的異步系統。收銀員收費後，將咖啡杯放到隊列中，等待咖啡師處理，再交給取貨區的顧客。這個過程中，收銀員跟咖啡師不會特別確認咖啡杯的狀態，假設咖啡杯被放錯位置，直到顧客反應前都沒有人會知道，這是「最多一次」的語義；但如果咖啡杯掉落到地上，他們可能會重新做一杯新的咖啡，這裡就是「最少一次」的語義。因此我們可以說，星巴克是在「最多一次」的基礎上，有部分操作實現「最少一次」的語義。</p>\n<h2 id=\"amqp-%26-rabbitmq\"><a class=\"direct-link\" href=\"#amqp-%26-rabbitmq\">#</a> AMQP &amp; RabbitMQ</h2>\n<p>軟體的隊列設計也需要面臨類似問題，讓我們來看看 AMQP 的例子。AMQP 是由 JP Morgan Chase 提出的通訊協定，目的是為了讓消息隊列有個開放式的標準可以依循，如此一來，不同的語言跟架構能夠建置共通的應用程式。在 2007 年，Rabbit 公司開發一套開源軟體來實作 AMQP，稱為 RabbitMQ，現在由 Pivotal 維護。也因為它開源加上支持多語言客戶端，許多消息隊列會採用 RabbitMQ 來執行。</p>\n<p>AMQP 的訊框格式是</p>\n<pre><code>+ — — — + — — — — -+ — — — — -+ + — — — — — — -+ + — — — — — -+\n| type  | channel  | size     | | payload      | | frame-end  |\n+ — — — + — — — — -+ — — — — -+ + — — — — — — -+ + — — — — — -+\n</code></pre>\n<p>訊框的類型(type)分為 4 種。應用上常碰到的有 3 種</p>\n<ul>\n<li>METHOD(1)：該訊框用於傳送 AMQP 的指令</li>\n<li>HEADER(2)：該訊框用於傳送 AMQP 的標頭</li>\n<li>BODY(3)：該訊框用於傳送 AMQP 的內容</li>\n</ul>\n<p>其中 METHOD 會依照命令的不同，而有不同的參數(Argument)，實現越進階的語義就需要仰賴越複雜的設定。</p>\n<h2 id=\"at-most-once\"><a class=\"direct-link\" href=\"#at-most-once\">#</a> At most once</h2>\n<p>先從最基本的「最多一次」來看。最多一次可以指生產端，也可以指消費端。對生產端來說，只要發佈一次消息就算完成語義，後續也不會再重發。這裡我們使用開源庫  <a href=\"https://github.com/wagslane/go-rabbitmq\">go-rabbitmq</a>，來當 Golang 的 RabbitMQ 的客戶端，程式碼會是</p>\n<pre class=\"language-go\"><code class=\"language-go\">producer<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span><br>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>“hello”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    routingKeys<span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span><span class=\"token function\">WithPublishOptionsExchange</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">)</span></code></pre>\n<p>指定好內文、路由規則、還有交換器，進行發送。</p>\n<p>因為已經保證了傳遞「最多一次」，消費端只要在這基礎上進行消費，就能達成語義</p>\n<pre class=\"language-go\"><code class=\"language-go\">consumer<span class=\"token punctuation\">.</span><span class=\"token function\">StartConsuming</span><span class=\"token punctuation\">(</span><br>    consumeMessage<span class=\"token punctuation\">,</span><br>    queueName<span class=\"token punctuation\">,</span><br>    routingKeys<span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">consumeMessage</span><span class=\"token punctuation\">(</span>d rabbitmq<span class=\"token punctuation\">.</span>Delivery<span class=\"token punctuation\">)</span> rabbitmq<span class=\"token punctuation\">.</span>Action <span class=\"token punctuation\">{</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> rabbitmq<span class=\"token punctuation\">.</span>Ack<br><span class=\"token punctuation\">}</span></code></pre>\n<p>指定消費函數、隊列名稱、路由規則來消費。</p>\n<p>用 WireShark 抓封包的話，會看到 Basic.Publish 發佈了一次的消息</p>\n<p><img src=\"/img/posts/2022/three-semantics-of-rabbitmq/wireshark-rabbitmq-1.webp\" alt=\"\"></p>\n<p>消費端也用 Basic.Consume 進行了消費</p>\n<p><img src=\"/img/posts/2022/three-semantics-of-rabbitmq/wireshark-rabbitmq-2.webp\" alt=\"\"></p>\n<h2 id=\"at-least-once\"><a class=\"direct-link\" href=\"#at-least-once\">#</a> At least once</h2>\n<p>「最多一次」對於分散式系統的應用來說是遠遠不夠的，假設客戶購買商品，產生一則消息，這個消息卻在傳遞的過程中因為一些網路問題而讓消息丟失，像是某人突然拔掉網路線，或是供電的電廠跳電，如果使用「最多一次」的語義，直到客戶反應前，我們都不會知道這個問題，同時，因為消息傳遞到一半丟失，有可能會造成系統狀態不一致，有部分系統已經執行過消息，有部分系統則是沒有。</p>\n<p>如果問題是由消息丟失引起的，最直覺的想法就是重試。想想，客戶向星巴克的店員抱怨，他點的咖啡還沒好，店員查詢後發現漏單，因此重做一份，這稱為重試(Retry)。</p>\n<p>同樣先從生產端來看。要重試，就需要先知道原本的消息是有否正確傳遞。這裡可以用 AMQP 的 Confirm 機制 來實現，時序圖上是</p>\n<p><img src=\"/img/posts/2022/three-semantics-of-rabbitmq/pub-and-sub.webp\" alt=\"\"></p>\n<p>在建立 channel 時，聲明這個 channel 需要 confirm。Broker 收到後會回 Confirm.Select-Ok，表示同意生產者將 channel 設為 confirm。之後，每次生產者發佈消息後，都會收到 Ack，如果因為 RabbitMQ 自身的問題導致消息丟失，則會回傳 Nack 給生產者。</p>\n<p>程式碼會是</p>\n<pre class=\"language-go\"><code class=\"language-go\">comfirmCh <span class=\"token operator\">:=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">NotifyPublish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>producer<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span><br>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>“hello”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    routingKeys<span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span><span class=\"token function\">WithPublishOptionsExchange</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span>WithPublishOptionsMandatory<span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span>WithPublishOptionsPersistentDelivery<span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">)</span><br>comfirmation <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>comfirmCh<br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span>“receive<span class=\"token punctuation\">:</span> <span class=\"token operator\">%</span><span class=\"token operator\">+</span>v\\n”<span class=\"token punctuation\">,</span> comfirmation<span class=\"token punctuation\">)</span></code></pre>\n<p>遺憾的是，僅僅這樣還不算達到「至少一次」的語義。讓我們更進一步思考情境。假設 Broker 能收到消息，可是卻因為設定的因素，導致消息無法被放入隊列，例如使用了一組不存在的路由規則。那 AMQP 應該如何通知這類「運行正常但邏輯有誤」的情況呢？這時需要用到 mandatory 這個 Publish 的參數。</p>\n<p>當 Publish 附帶 mandatory 時，生產端會告訴 Broker，這則消息需要被放進 Queue 中，如果沒辦法放入的話，需要將此消息退回給我。在程式碼上，需要改成</p>\n<pre class=\"language-go\"><code class=\"language-go\">comfirmCh <span class=\"token operator\">:=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">NotifyPublish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>returnCh <span class=\"token operator\">:=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">NotifyReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>err <span class=\"token operator\">=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span><br>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"non-existence\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span><span class=\"token function\">WithPublishOptionsExchange</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span>WithPublishOptionsMandatory<span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">)</span><br>comfirmation <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;-</span>comfirmCh<br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"receive: %+v\\n\"</span><span class=\"token punctuation\">,</span> comfirmation<span class=\"token punctuation\">)</span><br>returnVal <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>returnCh<br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"receive: %+v\\n\"</span><span class=\"token punctuation\">,</span> returnVal<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>到此，我們可以確保消息會被放進隊列，但我們仍然沒辦法確保這則消息被放進隊列後，Broker 會突然關閉，導致消息丟失。要防範這情況，就需要持久化隊列中的消息。RabbitMQ 的持久化分爲三個部分：交換器的持久化、隊列的持久化和消息的持久化。這裡會需要操作的是後兩者。如果只設置隊列持久化，重啓 RabbitMQ 後，消息會丟失；只設置消息的持久化，重啓之後隊列消失，繼而消息也丟失。因此隊列跟消息的持久化都需要設定。</p>\n<p>要設定隊列的持久化，用</p>\n<pre class=\"language-go\"><code class=\"language-go\">conn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> amqp<span class=\"token punctuation\">.</span><span class=\"token function\">Dial</span><span class=\"token punctuation\">(</span>cfg<span class=\"token punctuation\">.</span>Url<span class=\"token punctuation\">)</span><br>ch<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">Channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token comment\">// the second arg is durable</span><br><span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">.</span><span class=\"token function\">QueueDeclare</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span></code></pre>\n<p>同時，在發布的消息中設定消息持久化</p>\n<pre class=\"language-go\"><code class=\"language-go\">err <span class=\"token operator\">=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span><br>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    routingKeys<span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span><span class=\"token function\">WithPublishOptionsExchange</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span>WithPublishOptionsMandatory<span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span>WithPublishOptionsPersistentDelivery<span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">)</span></code></pre>\n<p>來看 WireShark 抓到的封包</p>\n<p><img src=\"/img/posts/2022/three-semantics-of-rabbitmq/wireshark-rabbitmq-3.webp\" alt=\"\"></p>\n<p>可以看到 Header 的 Delivery-Mode 被設為 2，指的就是有持久化消息。</p>\n<p>在傳遞「最少一次」的基礎上，消費端要保證消息也至少被消費一次。這個相對單純，只需要消費完成後，用 Ack 回應 Broker 消費已完成。如果 Broker 沒收到 Ack 且連結斷開，那再下次建立連結時，Broker 會重新發送消息。</p>\n<h2 id=\"exactly-once\"><a class=\"direct-link\" href=\"#exactly-once\">#</a> Exactly once</h2>\n<p>「最少一次」的問題很明顯，要是消息不斷被重複發送，有可能導致同樣的消息被重複處理，以電商的情境為例，有可能出現重複扣款的狀況。對於重複不敏感的場景，例如物聯網資訊蒐集，「最少一次」已經足以應付，但對金融場景來講，重複扣款是個嚴重的問題。</p>\n<p>為了達到「準確一次」的語義，會需要在「最少一次」的基礎上，加上去重複的機制。最直覺的想法是替所有消息都加上 ID，當收到消息時，會將該 ID 緩存起來，日後如果收到新的消息，先確認緩存中沒有重複的 ID 再進行處理。這個技巧又稱為「冪等鍵」，意思是將操作冪等化，不論重複送多少次，都會得到相同的結果。</p>\n<p>RabbitMQ 沒有實作緩存確認的機制，因此無法保證「準確一次」。這可以分兩個方向來看，假設生產端正在等待 Broker 回覆 Confirm，此時網路斷開，生產端偵測到異常，為了滿足「至少一次」，生產端重複發送消息，RabbitMQ 的 Broker 中就會存在兩條相同的消息。或者，消費端在消費完消息後，因為網路斷開，Broker 沒收到 Ack，則在連線恢復後，Broker 會將同樣的消息再度發送給消費端，造成重複消費。</p>\n<p>如上面講到的，因為 RabbitMQ 沒有辦法保證每個步驟能「準確一次」，我們得退而求其次，希望能做到端到端的「準確一次」。這代表說，我們不在意 RabbitMQ 中間是否存在重複遞送，只要訊息最後能被準確消費一次即可。</p>\n<p>要達成這件事，生產端需要替每則訊息加上 unique ID</p>\n<pre class=\"language-go\"><code class=\"language-go\">err <span class=\"token operator\">=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span><br>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    routingKeys<span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span><span class=\"token function\">WithPublishOptionsMessageID</span><span class=\"token punctuation\">(</span>uniqueID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span><span class=\"token function\">WithPublishOptionsExchange</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span>WithPublishOptionsMandatory<span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span>WithPublishOptionsPersistentDelivery<span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">)</span></code></pre>\n<p>消費端收到訊息後，確認緩存內沒有 uniqueID，再進行處理</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">consumeMessage</span><span class=\"token punctuation\">(</span>d rabbitmq<span class=\"token punctuation\">.</span>Delivery<span class=\"token punctuation\">)</span> rabbitmq<span class=\"token punctuation\">.</span>Action <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">IsExist</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>MessageId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"duplicated message\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span> rabbitmq<span class=\"token punctuation\">.</span>Ack<br>    <span class=\"token punctuation\">}</span><br>    cache<span class=\"token punctuation\">.</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>MessageId<span class=\"token punctuation\">)</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> rabbitmq<span class=\"token punctuation\">.</span>Ack<br><span class=\"token punctuation\">}</span></code></pre>\n<p>用 WireShark 也能看到 MessageID</p>\n<p><img src=\"/img/posts/2022/three-semantics-of-rabbitmq/wireshark-rabbitmq-4.webp\" alt=\"\"></p>\n<p>因為我們是在業務層面保證「準確一次」，實作方式就會跟系統相關，像是引入集中式緩存（Redis）會增加系統複雜度；而緩存的空間與失效期間也需要設計，這就不是單單調整參數就好，而是需要視具體運作的狀況來確定了。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>軟體工程的其中一項挑戰來自於「語義鴻溝」，可以看到光是消息處理就存在著三層不同的語義，而且越高階語義就需要越複雜的設定。如果消息處理跟使用者的期待有落差，很容易產生無形的錯誤。可能對於大多數的使用者來說，都是以「準確一次」為預設，開發者也不會跟使用者講，消息丟失算是正常情況（即使在有條件的情況下，它的確是正常）。</p>\n<p>也許可以這麼想：身為開發者，如何盡早辨識出語義鴻溝，並提出對應的技術方案，就是功力所在了。雖然用層次的概念來描述語義，好像會給人只要實作高層次就好的印象，但高層次的保證需要更多操作，像是更多的 Confirm、跟緩存間更多的溝通，都會影響到其他效能指標。以「準確一次」來說，還得確保緩存不會在執行中出問題，如果有問題的話，錯誤處理也要額外設計。</p>\n<p>商業模型跟技術模型間如何對應一直是很有意思的題目，希望大家看完這篇後能體會到消息處理有趣的地方。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://www.rabbitmq.com/amqp-0-9-1-reference.html\">AMQP 0-9-1 Complete Reference Guide</a></li>\n</ul>\n",
      "date_published": "2022-10-22T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2022/go-error-handling/",
      "url": "https://blog.kenwsc.com/posts/2022/go-error-handling/",
      "title": "如何優雅包裝錯誤：聊聊 Go 的 error",
      "content_html": "<p>錯誤處理是 Golang 最常被討論的一個點。這有幾個因素，首先，這跟它「錯誤是值」的設計理念有關，開發者需要在業務流程中穿插錯誤處理，違反關注點分離的原則，當然會引發爭議。另外，在 1.13 前，Golang 標準 errors 庫的表現力有限，當需求較為複雜時，需要開發者自行發明錯誤處理輔助函式。這讓人不禁好奇，Golang 的錯誤處理設計原則是什麼？有沒有比較好的實踐？或者說，我們能不能找到一種方式，優雅地處理錯誤？</p>\n<h2 id=\"%E9%8C%AF%E8%AA%A4%E8%88%87%E7%95%B0%E5%B8%B8\"><a class=\"direct-link\" href=\"#%E9%8C%AF%E8%AA%A4%E8%88%87%E7%95%B0%E5%B8%B8\">#</a> 錯誤與異常</h2>\n<p>先來看看不同人的觀點，Robert Martin 在討論到錯誤處理時，是如此建議的</p>\n<blockquote>\n<p>使用異常替代返回錯誤碼，錯誤處理代碼就能從主路徑代碼中分離出來，得到簡化</p>\n</blockquote>\n<p>他給出的例子是</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">deletePage</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    registry<span class=\"token punctuation\">.</span><span class=\"token function\">deleteReference</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    configKeys<span class=\"token punctuation\">.</span><span class=\"token function\">deleteKey</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">makeKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Martin 指的是 Try Catch 模型。在 Try Catch 中，錯誤由函式中拋出，並在上層的處理函式中接住，進行處理。如 Robert Martin 講的，Try Catch 的主路徑跟錯誤處理代碼分開在不同區塊，這樣的好處是能讓責任明確。</p>\n<p>而 Golang 的錯誤處理方式則是</p>\n<pre class=\"language-go\"><code class=\"language-go\">f<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename.ext\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>    log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><span class=\"token comment\">// do something with the open *File f</span></code></pre>\n<p>很明顯的，主路徑跟錯誤處理會放在同一個區塊，可讀性沒有 Try Catch 來好。Rob Pike 對這問題曾經發表過一些意見</p>\n<blockquote>\n<p>In other languages, one might use a try-catch block or other such mechanism to handle errors. Therefore, the programmer thinks, when I would have used a try-catch in my old language, I will just type if err != nil in Go. Over time the Go code collects many such snippets, and the result feels clumsy.</p>\n</blockquote>\n<p>這段話講的有些曖昧，大致來說，Rob Pike 認為這問題的關鍵是，開發者使用了舊的習慣來開發 Golang，也就是說，他認為問題的解法應該要在應用端，而不是語言。</p>\n<p>說曖昧的原因是，Pike 沒正面回答，為什麼 Golang 不支援 Try Catch？是 Try Catch 有什麼問題，或者只是 Golang 的設計者沒想到？我猜想，有個可能的原因是，Golang 嘗試區分出異常與錯誤。依照 Java 的定義，錯誤指該問題超出應用程式的處理能力，是執行期不該出現的狀況，例如 Out of Memory；而異常則是指不符合預期的情況，像是在資料庫中找不到特定的資料。對於前者，程式通常會立刻停止執行；而後者，程式會嘗試處理，給出當下可接受的回應。</p>\n<p>在 Java 的模型中，錯誤跟異常使用同樣的方式來處理，當開發者需要明確處理異常時，他會指定 Exception 的類型，如果該類型沒有被上層的處理函式 Catch，就會繼續往上拋，直到程式錯誤。因此，這背後隱含一個邏輯，沒有被明確處理的異常就是錯誤，並帶來一個問題，由於 Exception 可以不斷上拋，使得開發者必須有意識地使用 Try Catch，否則會破壞分層原則。</p>\n<p>相較於 Java，Golang 的設計理念更多取徑於 C 語言，C 語言常見的錯誤處理長這樣</p>\n<pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">_shutdown_mib_modules</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> majorID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> minorID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>serve<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>client<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// do something</span><br>    <span class=\"token keyword\">return</span> SNMPERR_SUCCESS<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>在 C 語言的慣例中，錯誤會用 status code 回傳，通常 0 是正常，而其他值代表不同的 error。在這裡，「值」是很重要的概念，儘管 C 語言是因為語言限制，被迫把 error 當值回傳，但 Golang 有意識地繼承了這項設計。 對Golang 來講，error 僅僅是一種回傳值，不會採取不同的方式來處理，而對於執行期發生的嚴重錯誤，則走 panic / recover 的機制</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">mayPanic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a problem\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> r <span class=\"token operator\">:=</span> <span class=\"token function\">recover</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> r <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Recovered. Error:\\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token function\">mayPanic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After mayPanic()\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>藉由這項設計，Golang 在語言的層次上區分錯誤與異常，並要求開發者在函式返回的當下，立刻顯式處理。</p>\n<h2 id=\"error-%E7%9A%84%E5%AF%A6%E7%8F%BE%E6%96%B9%E5%BC%8F\"><a class=\"direct-link\" href=\"#error-%E7%9A%84%E5%AF%A6%E7%8F%BE%E6%96%B9%E5%BC%8F\">#</a> error 的實現方式</h2>\n<p>明白設計原則後，緊接而來的問題是，Golang 中的 error 是什麼？它又是如何實現？用最通俗的話來講，error 是實作 Error() 接口的結構，這是另一項設計理念「鴨子型別」的展現。對開發者來講，最簡單的方式，是使用標準庫的 errors.New 來產生 error</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is error\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>底層的實作則是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> errors<br><br><span class=\"token comment\">// New returns an error that formats as the given text.</span><br><span class=\"token comment\">// Each call to New returns a distinct error value even if the text is identical.</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span>text <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>errorString<span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// errorString is a trivial implementation of error.</span><br><span class=\"token keyword\">type</span> errorString <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    s <span class=\"token builtin\">string</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>errorString<span class=\"token punctuation\">)</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">.</span>s<br><span class=\"token punctuation\">}</span></code></pre>\n<p>可以看到 errorString 本質上是個 struct，裡面帶有 text 字段儲存錯誤訊息。也因為 errors.New 回傳的是 pointer of struct，即使 text 的內容相同，兩個 error 也會被當成是不同的 error。</p>\n<p>既然每個 error 都是不同的，那要如何確認錯誤類型呢？原理很簡單，只要同樣類型的 error 是來自同一個實例即可，例如，我們可以用 Sentinel Error 的方式，在包內部預先定義需要的 error，要使用時直接回傳，在標準庫內部常常可以看到類似的做法，像是 io.EOF</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> EOF <span class=\"token operator\">=</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EOF\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>還記得「錯誤是值」嗎？開發者可以用處理值的方式來處理 error</p>\n<pre class=\"language-go\"><code class=\"language-go\">data<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAll</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> io<span class=\"token punctuation\">.</span>EOF <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// error handling</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這裡確實能感受到 Golang 跟 C 語言的系譜關係。</p>\n<h2 id=\"%E9%8C%AF%E8%AA%A4%E4%B8%8A%E4%B8%8B%E6%96%87\"><a class=\"direct-link\" href=\"#%E9%8C%AF%E8%AA%A4%E4%B8%8A%E4%B8%8B%E6%96%87\">#</a> 錯誤上下文</h2>\n<p>當我們將目光拉回開發應用場景，要求 error 資訊中需要有上下文（也就是，錯誤中包含哪些錯誤）時，我們會發現 Golang 1.13 前的標準 errors 庫能力有限，需要開發者自行實現。在 “Working with Errors in Go 1.13” 中，Damien Neil 跟 Jonathan Amsterdam 詳細說明了這個狀況</p>\n<blockquote>\n<p>Frequently a function passes an error up the call stack while adding information to it, like a brief description of what was happening when the error occurred. A simple way to do this is to construct a new error that includes the text of the previous one</p>\n</blockquote>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"decompress %v: %v\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>要知道上下文，只要將前面 error 的 Message 提取出來，放入新的 Message 即可。然而，也如 Damien Neil 跟 Jonathan Amsterdam 提到的，單純將資訊放在字串，會有資訊劣化的問題，如果開發者想追蹤上下文中是否存在特定的 error，改成嵌入會是更好的方式</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> QueryError <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    Query <span class=\"token builtin\">string</span><br>    Err   <span class=\"token builtin\">error</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">if</span> e<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> err<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>QueryError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>Err <span class=\"token operator\">==</span> ErrPermission <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// query failed because of a permission problem</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>有人可能會問了，假如是多層嵌套的話，也需要一層一層來拆嗎？顯然的，需要有一個更簡便的方式，幫助我們返回底層錯誤，換句話說，需要把 error 的包裝跟拆裝標準化，讓我們可以用遞迴的方式來拆解 error。為了處理這問題，Golang 在 1.13 後，引入了 Unwrap function</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Unwrap returns the result of calling the Unwrap method on err, if err's</span><br><span class=\"token comment\">// type contains an Unwrap method returning error.</span><br><span class=\"token comment\">// Otherwise, Unwrap returns nil.</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">Unwrap</span><span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>    u<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> err<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">Unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> u<span class=\"token punctuation\">.</span><span class=\"token function\">Unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Unwrap 檢查該 error 是否實作 Unwrap interface，如果有，就調用 Unwrap ，拆出下一層的 error。</p>\n<p>既然有拆就有包，實作上要怎麼方便的包裝錯誤呢？自行將 error 嵌入自定義結構也是個選擇，但由於這個場景非常常見，Golang 1.13 在語言的標準庫中實現了包裝，用法是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// Return an error which unwraps to err.</span><br>    <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"decompress %v: %w\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>當參數 %w 出現，返回的 error 會自動帶上 Unwrap func，它的內部是包裝過的 wrapError</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span>format <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">...</span>any<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>    p <span class=\"token operator\">:=</span> <span class=\"token function\">newPrinter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    p<span class=\"token punctuation\">.</span>wrapErrs <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><br>    p<span class=\"token punctuation\">.</span><span class=\"token function\">doPrintf</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><br>    s <span class=\"token operator\">:=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">var</span> err <span class=\"token builtin\">error</span><br>    <span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span>wrappedErr <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        err <span class=\"token operator\">=</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>        err <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>wrapError<span class=\"token punctuation\">{</span>s<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>wrappedErr<span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>    p<span class=\"token punctuation\">.</span><span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> err<br><span class=\"token punctuation\">}</span></code></pre>\n<p>如此，就完成包裝拆裝的標準介面了。</p>\n<p>當要追蹤 error 的上下文中是否包含特定的 error，我們可以先比較最外層的 error，如果不同，使用 Unwrap 拆裝後，再比較下一層的 error。Golang 1.13 同樣實現了 <a href=\"http://errors.Is\">errors.Is</a> function 來簡化操作</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Similar to:</span><br><span class=\"token comment\">// if err == ErrNotFound { … }</span><br><span class=\"token keyword\">if</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">Is</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> ErrNotFound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// something wasn't found</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>它的實現是不停的比較跟拆包</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Is</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> target <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> target <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> err <span class=\"token operator\">==</span> target<br>    <span class=\"token punctuation\">}</span><br>    isComparable <span class=\"token operator\">:=</span> reflectlite<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Comparable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> isComparable <span class=\"token operator\">&amp;&amp;</span> err <span class=\"token operator\">==</span> target <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> err<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span> <span class=\"token function\">Is</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token operator\">&amp;&amp;</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">Is</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">if</span> err <span class=\"token operator\">=</span> <span class=\"token function\">Unwrap</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>有意思的是，在比較過程中，它不單單看 err == target，還允許開發者自定相等的條件 Is(error) bool。</p>\n<h2 id=\"%E5%91%BC%E5%8F%AB%E5%A0%86%E7%96%8A\"><a class=\"direct-link\" href=\"#%E5%91%BC%E5%8F%AB%E5%A0%86%E7%96%8A\">#</a> 呼叫堆疊</h2>\n<p>Golang 1.13 上下文問題的提案是參考<a href=\"https://github.com/pkg/errors\">社群方案</a></p>\n<p>但不知道為什麼，Golang 標準庫只採用跟上下文有關的部分，有時候我們需要更多細節，像是為了追蹤 error 產生的位置，讓開發者能快速定位錯誤，還需要 Call Stack 資訊，這時要動用另一個標準庫 runtime</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> depth <span class=\"token operator\">=</span> <span class=\"token number\">32</span><br><span class=\"token keyword\">var</span> pcs <span class=\"token punctuation\">[</span>depth<span class=\"token punctuation\">]</span><span class=\"token builtin\">uintptr</span><br>runtime<span class=\"token punctuation\">.</span><span class=\"token function\">Callers</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> pcs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>透過呼叫 runtime.Callers，可以取得 Call Stack。回想剛剛要加入上下文資訊時，用的方式是在 struct 內嵌入 error 的字段；同樣的道理，要加入 Call Stack，也只要再多嵌入一個 stack 字段</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> withStack <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token builtin\">error</span><br>    <span class=\"token operator\">*</span>stack<br><span class=\"token punctuation\">}</span></code></pre>\n<p>stack 是個 pointer array，存放取得的 Call Stack 資訊。儘管標準庫沒有實現上述的內容，但 pkg/errors 有幫忙做好了</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// customized message</span><br>err <span class=\"token operator\">=</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">Wrapf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error num is: %d\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// just wrap call stack</span><br>err <span class=\"token operator\">=</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">WithStack</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></code></pre>\n<p>我們可以透過 WithStack func 來理解 pkg/errors 的實作方式</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// WithStack annotates err with a stack trace at the point WithStack was called.</span><br><span class=\"token comment\">// If err is nil, WithStack returns nil.</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">WithStack</span><span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>withStack<span class=\"token punctuation\">{</span><br>        err<span class=\"token punctuation\">,</span><br>        <span class=\"token function\">callers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>簡單明瞭，直接將 callers 塞進去。也印出來看看效果</p>\n<pre class=\"language-go\"><code class=\"language-go\">err <span class=\"token operator\">:=</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some error\"</span><span class=\"token punctuation\">)</span><br>err <span class=\"token operator\">=</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">WithStack</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># console</span><br>$ go run main.go <br>some error</code></pre>\n<p>咦？怎麼好像沒看到 Call Stack？這是因為 Call Stack 的資訊只是用來除錯，不會放在錯誤訊息 Error() 中，所以要印時要用 %+v</p>\n<pre class=\"language-go\"><code class=\"language-go\">err <span class=\"token operator\">:=</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some error\"</span><span class=\"token punctuation\">)</span><br>err <span class=\"token operator\">=</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">WithStack</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%+v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span></code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># console</span><br>$ go run main.go <br>some error<br>main.main<br>        ken/playground/error_demo/main.go:47<br>runtime.main<br>        ken/go/src/runtime/proc.go:250<br>runtime.goexit<br>        ken/go/src/runtime/asm_amd64.s:1571</code></pre>\n<p>如果有使用 Sentry 的話，也能在 issue 中看到 Call Stack 的資訊，對除錯很有幫助，會知道錯誤發生在哪一行、前面經過哪些路徑，加上必要的參數，就能輕鬆完成錯誤定位</p>\n<p><img src=\"/img/posts/2022/go-error-handling/error-1.png\" alt=\"\"></p>\n<h2 id=\"%E9%A0%98%E5%9F%9F-error-%E8%88%87-api-error\"><a class=\"direct-link\" href=\"#%E9%A0%98%E5%9F%9F-error-%E8%88%87-api-error\">#</a> 領域 error 與 API error</h2>\n<p>接著來看題應用題。假設你跟我一樣是個後端應用開發的工程師，希望在 API 的 Error Response 中放入錯誤的詳細訊息，像是哪個參數錯誤，好讓對接的前端工程師可以用錯誤訊息進行初步判斷，但卻又不希望過度曝露系統資訊，例如完整的錯誤上下文。我們可以怎麼做？</p>\n<p>這是個開發者體驗設計問題，具體而言，要達成的目標是：降低前端工程師的開發成本，降低後端系統除錯成本，以及隱藏不必要的資訊。因此我們從系統的角度來看，如果套用分層的概念，領域層級的 error 跟 API 層級的 error 應該要放在不同層</p>\n<p><img src=\"/img/posts/2022/go-error-handling/error-2.png\" alt=\"\"></p>\n<p>領域層級的 error 用來描述符合系統使用情境的錯誤；API 層級的 error 則專注於接口設計，以 gin 當範例，兩個的關係是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// httpErr represents an error that occurred while handling a request.</span><br><span class=\"token keyword\">type</span> httpErr <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    Message <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"message\"`</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// ErrorHandler responds error response according to given error.</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">ErrorHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> gin<span class=\"token punctuation\">.</span>HandlerFunc <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    c<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Errors<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span><br>    <span class=\"token punctuation\">}</span><br>    err <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>Errors<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">var</span> status <span class=\"token builtin\">int</span><br>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">case</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">Is</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> entity<span class=\"token punctuation\">.</span>ErrInvalidInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        status <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span>StatusBadRequest<br>    <span class=\"token keyword\">case</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">Is</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> entity<span class=\"token punctuation\">.</span>ErrUnauthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        status <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span>StatusUnauthorized<br>    <span class=\"token keyword\">case</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">Is</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> entity<span class=\"token punctuation\">.</span>ErrPermissionDenied<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        status <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span>StatusForbidden<br>    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span><br>        status <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span>StatusInternalServerError<br>    <span class=\"token punctuation\">}</span><br>    c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">,</span> httpErr<span class=\"token punctuation\">{</span>Message<span class=\"token punctuation\">:</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>上面的設計有個小問題，httpErr 直接使用 err.Error() 當 Error Response Body，如果 err 是透過 Wrap 來包裝，Error() 可能會有上下文資訊，像是違反哪條資料庫的 Constraint，而這資訊是我們不想曝露給外部調用者的。因此如果可以，應該要對 entity.Error 再進行一次包裝，讓它分開上下文與原始 error 的資訊。</p>\n<p>我們可以照抄 pkg/errors 的方法，但多出一個 Message function，用來提供外界訊息</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> AppError <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    cause   <span class=\"token builtin\">error</span><br>    message <span class=\"token builtin\">string</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>AppError<span class=\"token punctuation\">)</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"app error: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>message <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>cause<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>AppError<span class=\"token punctuation\">)</span> <span class=\"token function\">Message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">.</span>message<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>AppError<span class=\"token punctuation\">)</span> <span class=\"token function\">Unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> w<span class=\"token punctuation\">.</span>cause <span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">Wrapf</span><span class=\"token punctuation\">(</span>err <span class=\"token builtin\">error</span><span class=\"token punctuation\">,</span> format <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br>    <span class=\"token punctuation\">}</span><br>    err <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Error<span class=\"token punctuation\">{</span><br>        cause<span class=\"token punctuation\">:</span>   err<span class=\"token punctuation\">,</span><br>        message<span class=\"token punctuation\">:</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span> args<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">WithStack</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>在 gin 的 Middleware，先使用 <a href=\"http://errors.As\">errors.As</a>() 來型別斷言，再調用 Message()，修改成</p>\n<pre class=\"language-go\"><code class=\"language-go\">err <span class=\"token operator\">:=</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">Unwrap</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Errors<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">var</span> appErr entity<span class=\"token punctuation\">.</span>AppError<br><span class=\"token keyword\">if</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">As</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>appErr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> status <span class=\"token builtin\">int</span><br>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">case</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">Is</span><span class=\"token punctuation\">(</span>appErr<span class=\"token punctuation\">,</span> entity<span class=\"token punctuation\">.</span>ErrInvalidInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        status <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span>StatusBadRequest<br>    <span class=\"token keyword\">case</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">Is</span><span class=\"token punctuation\">(</span>appErr<span class=\"token punctuation\">,</span> entity<span class=\"token punctuation\">.</span>ErrUnauthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        status <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span>StatusUnauthorized<br>    <span class=\"token keyword\">case</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">Is</span><span class=\"token punctuation\">(</span>appErr<span class=\"token punctuation\">,</span> entity<span class=\"token punctuation\">.</span>ErrPermissionDenied<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        status <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span>StatusForbidden<br>    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span><br>        status <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span>StatusInternalServerError<br>    <span class=\"token punctuation\">}</span><br>    c<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">,</span> httpErr<span class=\"token punctuation\">{</span>Message<span class=\"token punctuation\">:</span> appErr<span class=\"token punctuation\">.</span><span class=\"token function\">Message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>要注意這裡有個微妙的前後關係，是先意識到分層的必要性，透過分離責任來分離訊息，而不是反過來，先實作結構，再透過分離訊息來分離責任。</p>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>簡單總結內容：error 中最重要的兩項資訊是 Error Message 跟 Call Stack，儘管 Golang 在 1.13 後的標準庫已經有加入上下文的處理，但為了更符合應用場景與節省自己的時間，還是會建議用 pkg/errors 來處理 error。</p>\n<p>也因為 Call Stack 是重要資訊，當收到 error 的第一時間，應該用 Wrapf 重新包裝成 AppError，讓開發者後續要追蹤時，可以一路查找到底。至於 ApiError 的處理，則是放在 Middleware，讓責任可以分離得更清楚。</p>\n<p>當然，如果你是開發 lib，就像 Golang 標準庫常見的那樣，用 Sentinel Error 就可以了。lib 應該盡可能保持簡單；而應用則是盡可能讓責任保持簡單。希望大家看完這篇文後，都能優雅地處理錯誤。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://go.dev/blog/error-handling-and-go\">Error handling and Go - The Go Programming Language</a></li>\n<li><a href=\"https://go.dev/blog/errors-are-values\">Errors are values - The Go Programming Language</a></li>\n<li><a href=\"https://go.dev/blog/go1.13-errors\">Working with Errors in Go 1.13</a></li>\n<li><a href=\"https://hackmd.io/@fieliapm/SJYqZtpuv?print-pdf#/\">Survive under the Crap Go Error System - HackMD</a></li>\n</ul>\n",
      "date_published": "2022-10-16T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2022/error-as-resource-grpc-error-handling/",
      "url": "https://blog.kenwsc.com/posts/2022/error-as-resource-grpc-error-handling/",
      "title": "讓錯誤成為資源：gRPC 的錯誤處理模型",
      "content_html": "<p>錯誤處理是所有 RPC 服務都要具備的設計，但是怎樣的錯誤處理模型，算是好的模型呢？從字面上來看，錯誤處理可以分解成「錯誤」跟「處理」，如果用 RESTful 的觀點，將錯誤當成是 Resource，一個好的模型應該要能匹配不同場景的 Resource，並根據場景需求來處理這些 Resource。</p>\n<h2 id=\"%E9%8C%AF%E8%AA%A4%E6%A8%A1%E5%9E%8B\"><a class=\"direct-link\" href=\"#%E9%8C%AF%E8%AA%A4%E6%A8%A1%E5%9E%8B\">#</a> 錯誤模型</h2>\n<p>在 RESTful 中，通常會用 HTTP Status Code 當錯誤訊息的分類(Category)，錯誤內容則放在 Payload。這樣的好處是，只要看到分類，就能先進行大方向的處理，如果需要特定資訊，再從 Payload 拿取。通常錯誤內容的格式會自行定義，以支付服務 Stripe 的 API 為例，定義的格式就有</p>\n<ul>\n<li>type (string)</li>\n<li>code (string)</li>\n<li>decline_code (string)</li>\n<li>message (string)</li>\n</ul>\n<p>message 應該是最常見的欄位，當開發分為前後端時，前端能根據 message 快速定位錯誤原因。code 則是用來補足 HTTP Status Code 的不足，在原本的分類下進行子分類。其他欄位則視應用場景來添加。如果應用場景不複雜的話，可以考慮只用基本的 Payload 格式，像是</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token number\">40001</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"an invalid parameter: user_name\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>RESTful API 透過分類知道要如何處理錯誤，透過 Payload 知道錯誤的內容，狹義來說，RESTful API 是指用 HTTP + JSON/XML 的方式來設計 API，但這只是一種特定的實作方式，不直接等於 RESTful。Roy Fielding 談 RESTful 時，用的名稱是「表述性狀態轉移」，這是個原則性的概念，只要稍加改動，應該要能套用同樣原則到不同的實現中，例如 gRPC。在進一步細談如何套用前，我們先來看看 gRPC 的錯誤處理模型。</p>\n<p>假設我們建立一個 gRPC server，定義一個 service func SayHello，裡面什麼事情都不做，直接回傳錯誤</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    srv <span class=\"token operator\">:=</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span>cfg<span class=\"token punctuation\">)</span><br>    proto<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterHelloServiceServer</span><span class=\"token punctuation\">(</span>srv<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>server<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    srv<span class=\"token punctuation\">.</span><span class=\"token function\">Serve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">var</span> demoErr <span class=\"token operator\">=</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some error\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">type</span> server <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    proto<span class=\"token punctuation\">.</span>UnimplementedHelloServiceServer<br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>server<span class=\"token punctuation\">)</span> <span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> demoErr<br><span class=\"token punctuation\">}</span></code></pre>\n<p>同時建立一個 client 去呼叫 server</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  conn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">NewClient</span><span class=\"token punctuation\">(</span>cfg<span class=\"token punctuation\">)</span><br>  client <span class=\"token operator\">:=</span> proto<span class=\"token punctuation\">.</span><span class=\"token function\">NewHelloServiceClient</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span><br>  client<span class=\"token punctuation\">.</span><span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>然後拿出你的 WireShark 抓包，直接看看傳了哪些東西，抓到的 Request 會是</p>\n<p><img src=\"/img/posts/2022/error-as-resource-grpc-error-handling/wireshark_grpc_request_1.webp\" alt=\"\"></p>\n<p>翻譯成白話：gRPC 用 POST method 呼叫 /proto.HelloService/SayHello 的 URL。</p>\n<p>也能抓到 Response</p>\n<p><img src=\"/img/posts/2022/error-as-resource-grpc-error-handling/wireshark_grpc_response_1.webp\" alt=\"\"></p>\n<p>在 Header 中可以看到兩個跟 gRPC相關的 header，grpc-status 跟 grpc-message。語意上，這大致可以對應到 HTTP 的 Status Code 跟 Payload。可能有人會覺得奇怪，為什麼 HTTP 已經有一套可以套用的錯誤模型了，gRPC 還需要自己定義 Header？從定義來看，有機會是 HTTP Status Code 的應用情境不符合 gRPC 的情境，像是在 gRPC 中，有些 Status 是 client 獨有，有些是 server 獨有，而 HTTP Status Code 沒分這麼細緻。</p>\n<p>另外，HTTP 的錯誤模型有個缺點，它將正常的資源跟錯誤的資源都用 Payload 來表述狀態。這裡有語意重載，會帶來複雜的處理問題。舉個例子，假設有人請你幫他跑腿，你回答 “No way”，意思是「我才不要」；但如果有人跟你說他中了樂透，你回答 “No way”，意思就變成是「天啊，怎麼可能」，同樣是 “No way”，前後的情境不同，意思就變得不一樣。對照到 Payload，當語意重載的情況出現時，會讓 client 需要依照 Context 來判斷要用什麼模型來處理，如果可以將正常的資源跟錯誤的資源分開，出錯的機率就會變小，可讀性也會提高。gRPC 這個設計相對合理。</p>\n<h2 id=\"%E7%8B%80%E6%85%8B%E7%A2%BC\"><a class=\"direct-link\" href=\"#%E7%8B%80%E6%85%8B%E7%A2%BC\">#</a> 狀態碼</h2>\n<p>剛剛講到 grpc-status 是 gRPC 的狀態碼，在上面的 Response 中，我們看到 grpc-status = 2，2 是什麼意思？依照 gRPC official status code 的定義，2 是 Unknown Error。</p>\n<blockquote>\n<p>Unknown error. For example, this error may be returned when a Status value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error.</p>\n</blockquote>\n<p>為什麼會是 Unknown 呢？因為我們直接把 error 回傳，沒有替這個 error 分類，在 Golang 的實作中，沒分類的 error 會自動被歸類為 Unknown，可想而知這不是個好的實作，收到錯誤訊息的人看到 Unknown，無法進一步處理，只能被動印出 Log。</p>\n<p>為了讓訊息更明確，我們需要替 gRPC error 指定 grpc-status</p>\n<p>修改 server</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>server<span class=\"token punctuation\">)</span> <span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>codes<span class=\"token punctuation\">.</span>InvalidArgument<span class=\"token punctuation\">,</span> <span class=\"token string\">\"some error\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>status package 是官方提供的 Package，顧名思義，就是讓你可以控制 status 的值；而 codes package 則定義了 gRPC 相關的 status code。我們在這裡定義該 status code 是 invalid argument，告知呼叫者參數錯誤；並在後面帶上 error message 讓呼叫者可以知道詳細資訊。</p>\n<p>修改後，WireShark 的 Response 變成</p>\n<p><img src=\"/img/posts/2022/error-as-resource-grpc-error-handling/wireshark_grpc_response_2.webp\" alt=\"\"></p>\n<p>原本 grpc-status 變成 3了，對應到 Status 就是 INVALID_ARGUMENT。呼叫者可以知道原來是自己的參數錯誤才導致呼叫異常。</p>\n<p>順便來看一下，目前 gRPC 定義的 status code 有這些</p>\n<ul>\n<li>OK(0)：成功狀態</li>\n<li>CANCELLED(1)：操作已被（調用者）取消</li>\n<li>UNKNOWN(2)：未知錯誤</li>\n<li>INVALID_ARGUMENT(3)：客戶端指定非法參數</li>\n<li>DEADLINE_EXCEEDED(4)：在操作完成前，已經過了截止時間</li>\n<li>NOT_FOUND(5)：請求的資源找不到</li>\n<li>ALREADY_DENIED(6)：客戶端試圖創建的實體已經存在</li>\n<li>PERMISSION_DENIED(7)：調用者沒有權限執行操作</li>\n<li>RESOURCE_EXHASTED(8)：某些資源已經被耗盡</li>\n<li>FAILED_PRECONDITION(9)：系統沒有處於操作需要的狀態</li>\n<li>ABORTED(10)：操作被中止</li>\n<li>OUT_OF_RANGE(11)：嘗試進行的操作超出合理範圍</li>\n<li>UNIMPLEMENTED(12)：該操作尚未實現</li>\n<li>INTERNAL(13)：內部錯誤</li>\n<li>UNAVAILABLE(14)：該服務目前不可用</li>\n<li>DATA_LOSS(15)：不可恢復的數據損壞</li>\n<li>UNAUTHENTICATED(16)：客戶端沒有操作需要的認證</li>\n</ul>\n<p>到這裡我們發現一件事，如果想要描述的錯誤內容單純用狀態碼無法表達怎麼辦？例如，我們不僅想知道錯誤類型是參數錯誤，還想知道錯誤的參數是哪個，應該要如何修正，該怎麼將這個資訊給結構化呢？</p>\n<h2 id=\"%E8%A9%B3%E7%B4%B0%E9%8C%AF%E8%AA%A4%E8%B3%87%E8%A8%8A\"><a class=\"direct-link\" href=\"#%E8%A9%B3%E7%B4%B0%E9%8C%AF%E8%AA%A4%E8%B3%87%E8%A8%8A\">#</a> 詳細錯誤資訊</h2>\n<p>gRPC 除了有 grpc-message 顯示人眼可讀的 error message 外，還有一個 header grpc-status-details-bin，用來補足 status 表現能力不夠的問題。為了統一模型，這個資訊格式也是採用 protobuf，我們可以把它想像成 error 專用欄位，內容經過 protobuf message 編碼後，會放在這個標頭中。</p>\n<p>既然知道概念，那就好處理了，把 server 端改成</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>server<span class=\"token punctuation\">)</span> <span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    st <span class=\"token operator\">:=</span> status<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>codes<span class=\"token punctuation\">.</span>InvalidArgument<span class=\"token punctuation\">,</span> <span class=\"token string\">\"some error\"</span><span class=\"token punctuation\">)</span><br>    st<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">WithDetails</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>errdetails<span class=\"token punctuation\">.</span>BadRequest_FieldViolation<span class=\"token punctuation\">{</span><br>        Field<span class=\"token punctuation\">:</span>       <span class=\"token string\">\"lost\"</span><span class=\"token punctuation\">,</span><br>        Description<span class=\"token punctuation\">:</span> <span class=\"token string\">\"lost field that should have\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>一樣是用 status 來處理，但在 status 中加入 details，gRPC 可以接受多個 detail，因此你可以根據需求將詳細的資訊傳進去。在這個例子中，我們進一步補充說 lost 這個 field 的值錯誤，它應該要有值，但接收時沒發現。這的資訊就豐富到能讓呼叫端進行應用層級的處理了。</p>\n<p>雖然只要是 protobuf 就能放進 detail 中，但為了更好的相容性與定義，建議使用 Google 提供的 errdetails package 來處理，避免自己定義模型。</p>\n<p>修改後，用 WireShark 再抓一次</p>\n<p><img src=\"/img/posts/2022/error-as-resource-grpc-error-handling/wireshark_grpc_response_3.webp\" alt=\"\"></p>\n<p>看到 grpc-status-details-bin 冒出來了，後面是 base64 編碼過的內容，如果丟進 decode 的話，可以得到</p>\n<pre><code>invalid argument e\n8type.googleapis.com/google.rpc.BadRequest.FieldViolation)\nlost lost field that should have\n</code></pre>\n<p>可以看到詳細的錯誤資訊都在裡面。</p>\n<p>用 Postman 呼叫 gRPC，也能看到同樣的錯誤訊息。</p>\n<p><img src=\"/img/posts/2022/error-as-resource-grpc-error-handling/postman.webp\" alt=\"\"></p>\n<h2 id=\"%E5%AE%A2%E6%88%B6%E7%AB%AF\"><a class=\"direct-link\" href=\"#%E5%AE%A2%E6%88%B6%E7%AB%AF\">#</a> 客戶端</h2>\n<p>剛剛的例子講的都是 server 端應該怎麼定義並回傳錯誤，client 收到 server 回傳的錯誤後，也要針對錯誤進行處理。</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>st<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> status<span class=\"token punctuation\">.</span><span class=\"token function\">FromError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">Code</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> codes<span class=\"token punctuation\">.</span>InvalidArgument <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> d <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">Details</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">switch</span> info <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>errdetails<span class=\"token punctuation\">.</span>BadRequest_FieldViolation<span class=\"token punctuation\">:</span><br>            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>我們先用 status package 將 error 轉換成 status 的結構，接著從 status 的結構中讀取 status code，如果是 Invalid Argument，再進一步迭代所有的 detail 項並且印出。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">~/git/ken-playground/grpc<span class=\"token operator\">></span> go run ./example/client-demo                                                                                      <br>field:<span class=\"token string\">\"lost\"</span>  description:<span class=\"token string\">\"lost field that should have\"</span></code></pre>\n<p>這裡有幾點要注意，第一，錯誤處理的結構仍然稍嫌複雜，if 中還嵌套著迭代跟 switch，如果 status code 有多個可能，最外圍的 if 需要再改成 switch 來接收，整體來說有一定的成本在。設計得太複雜，花太多時間來管理錯誤，結果大多錯誤都用不到的話，只會增加無謂的成本。gRPC 是針對所有可能的場景來設計，實際上還是要根據應用來裁量。</p>\n<p>再來，對於企業層級的錯誤處理，也可以試著用 gRPC interceptor 來轉換錯誤，像是提供企業級的錯誤定義模組，在每個 client 建構時都自動引入定義好的 interceptor，儘管會犧牲一些些彈性，但能換取較好的可擴充性，加速開發時間。</p>\n<p>最後，我們直接使用了 *errdetails.BadRequest_FieldViolation 來做型別斷言，省掉額外宣告錯誤模型的麻煩。這時 server 使用 errdetails 的效果顯現出來了，透過重用泛用性高，經過產品階段驗證的介面，自己就不用從頭摸索、設計、維護模型，可以轉而將這些時間投入到產品開發上。</p>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>這篇從錯誤模型的角度，嘗試設計一套 gRPC 的錯誤處理機制，不過，與其說是設計，最後還是用了跟主流方案接近的最佳實踐。畢竟最佳實踐能是最佳實踐的原因，就是經過實務中的打磨，使用性特別好。</p>\n<p>這邊想再講的一個思考角度是開發者體驗，通常我們開發時，只會關注 happy path，錯誤處理都是用精簡至上的角度來設計，直到某天錯誤發生，想看的除錯資訊都沒有，才會回來檢視原本的設計。這背後意味著在思考開發場景時，有些假設是值得商榷的。在開發者花費的時間中，除錯或許比開發佔更高比例，既然如此，我們應該將每個錯誤都當成是一個使用者故事來看待，讓系統的支援完善，才能做好開發者體驗。</p>\n<p>以上大概是梳理錯誤處理的一些過程，中間也學習到很多模型匹配的原則，算是挺有收穫的，希望看完這篇文章的讀者，能多知道一些錯誤處理的背景。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://grpc.github.io/grpc/core/md_doc_statuscodes.html\">GRPC Core: Status codes and their use in gRPC</a></li>\n<li><a href=\"https://stripe.com/docs/api/errors#errors-api_error\">Stripe API reference – Go</a></li>\n</ul>\n",
      "date_published": "2022-10-07T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2022/show-test-coverage-at-gitlab-a-go-example/",
      "url": "https://blog.kenwsc.com/posts/2022/show-test-coverage-at-gitlab-a-go-example/",
      "title": "在 GitLab 顯示測試覆蓋率：以 Go 為例",
      "content_html": "<p>對現代開發者來講，單元測試已經不是可選，而是必備了。單元測試能保護程式碼，讓錯誤提早現形，也能讓重構時更安心。通常我們在評估單元測試的執行狀況時，會用 coverage 當成其中一項指標。當然，coverage 還是會有一些使用的場合跟侷限，當談到專案落地，可能大家會想知道的是，coverage 該怎麼使用，才能幫助到專案？</p>\n<h2 id=\"%E9%96%8B%E7%99%BC%E3%80%81%E5%AF%A9%E6%9F%A5%E3%80%81%E5%9B%9E%E9%A1%A7\"><a class=\"direct-link\" href=\"#%E9%96%8B%E7%99%BC%E3%80%81%E5%AF%A9%E6%9F%A5%E3%80%81%E5%9B%9E%E9%A1%A7\">#</a> 開發、審查、回顧</h2>\n<p>我們先來看看什麼時候會需要知道 coverage？通常依照團隊的工作流程，將它分為三個階段：開發、審查、回顧。每個階段關注的場景會略有不同。</p>\n<p>一個一個講。對開發中情形，開發者想知道的是剛寫完的邏輯是否能正常運行，有沒有對應的測試，覆蓋範圍是否已經足夠，如果還有條件分支沒覆蓋到的話，是哪裡？是不是每個錯誤都有處理了。這時最需要的是，codebase 要能 highlight 剛剛講的資訊，幫助開發者一眼掌握。</p>\n<p>當開發完成，feature branch 被提交到原始碼管理系統，例如 GitLab，會需要一名 Reviewer 來負責審查。審查過程中，Reviewer 會看 coverage 來評估代碼品質，像是提交版本的覆蓋率是多少？跟前一版本比較起來，覆蓋率有沒有下降？哪些新寫的代碼是沒有覆蓋到的？</p>\n<p><img src=\"/img/posts/2022/show-test-coverage-at-gitlab-a-go-example/gitlab-1.png\" alt=\"\"></p>\n<p>而當專案進展到一個 Milestone，專案負責人想要回顧專案執行狀況，以安排接下來的計畫，這時會需要先蒐集一些資訊。通常 codebase 覆蓋率可能會被當成某種品質指標，用來放進關鍵結果中。</p>\n<h2 id=\"%E8%A7%A3%E9%A1%8C%E6%80%9D%E8%B7%AF\"><a class=\"direct-link\" href=\"#%E8%A7%A3%E9%A1%8C%E6%80%9D%E8%B7%AF\">#</a> 解題思路</h2>\n<p>當我們釐清需求與場景後，接著可以來想解法了。</p>\n<p>開發中的場景很單純，因為現在的 Editor 或 IDE 幾乎都有提供相關的插件，讓開發者能自行驗證，以 VSCode 來說，如果你有安裝官方的 Go 語言 Extension，它就能支援單元測試。如果你沒有，那也不要緊，因為 Go 已經幫你將測試工具整合進 CLI，只要自行呼叫就可以了。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">~/git/ken/test-server: go <span class=\"token builtin class-name\">test</span> -coverprofile<span class=\"token operator\">=</span>c.out ./<span class=\"token punctuation\">..</span>.                                                                                                <br>?       test-server     <span class=\"token punctuation\">[</span>no <span class=\"token builtin class-name\">test</span> files<span class=\"token punctuation\">]</span><br>?       test-server/cmd/server  <span class=\"token punctuation\">[</span>no <span class=\"token builtin class-name\">test</span> files<span class=\"token punctuation\">]</span><br>?       test-server/internal/config     <span class=\"token punctuation\">[</span>no <span class=\"token builtin class-name\">test</span> files<span class=\"token punctuation\">]</span><br>?       test-server/internal/handler    <span class=\"token punctuation\">[</span>no <span class=\"token builtin class-name\">test</span> files<span class=\"token punctuation\">]</span><br>ok      test-server/internal/service    <span class=\"token number\">0</span>.437s  coverage: <span class=\"token number\">88.2</span>% of statements</code></pre>\n<p>審查中的場景比較麻煩，畢竟各家版控服務都不相同，需要在意的點也不同，以 GitLab 為例，Reviewer 需要知道的是 MR 時，整體的 coverage 有多少？哪些代碼有覆蓋哪些沒有？GitLab 文件中有兩個功能看起來不錯，第一個是 Merge request test coverage results，能抓出 coverage 的數值</p>\n<blockquote>\n<p>If you use test coverage in your code, you can use a regular expression to find coverage results in the job log. You can then include these results in the merge request in GitLab.</p>\n</blockquote>\n<p>第二個是 Test coverage visualization，能在 MR 的 diff view 中呈現覆蓋的程式碼</p>\n<blockquote>\n<p>With the help of <a href=\"https://docs.gitlab.com/ee/ci/index.html\">GitLab CI/CD</a>, you can collect the test coverage information of your favorite testing or coverage-analysis tool, and visualize this information inside the file diff view of your merge requests (MRs). This will allow you to see which lines are covered by tests, and which lines still require coverage, before the MR is merged.</p>\n</blockquote>\n<p>效果類似這樣</p>\n<p><img src=\"/img/posts/2022/show-test-coverage-at-gitlab-a-go-example/gitlab-2.png\" alt=\"\"></p>\n<p>至於當我們需要回顧時，最好在專案首頁有一行類似 Metric 的字說明現況，即使沒接觸專案的人，也能知道專案的健康度。這個很適合用 Badge 來展現，通常 Badge 會貼在 Readme 上，而 Readme 會被 GitLab 自動放在專案首頁</p>\n<p><img src=\"/img/posts/2022/show-test-coverage-at-gitlab-a-go-example/gitlab-3.png\" alt=\"\"></p>\n<p>當然，如果可以，我們也會想分析專案的趨勢，是不是朝向健康的方向走，如果沒有，也許透過一些改善方式，例如講解 unit test 的概念、使用手法等等，來幫助團隊往前走。這時候 GitLab 的 Analytic 就很好用，可以用來觀察長期趨勢。</p>\n<p><img src=\"/img/posts/2022/show-test-coverage-at-gitlab-a-go-example/gitlab-4.png\" alt=\"\"></p>\n<h2 id=\"%E9%96%8B%E5%A7%8B%E5%8B%95%E6%89%8B\"><a class=\"direct-link\" href=\"#%E9%96%8B%E5%A7%8B%E5%8B%95%E6%89%8B\">#</a> 開始動手</h2>\n<p>方法擬定後，開始來動手吧。</p>\n<p>假設你的 IDE 是 VSCode，可以到 Extension 安裝 Go 語言的延伸套件，然後在 test file 上應該能看到 run package tests，執行後專案內就會 highlight coverage，有覆蓋的部分是綠底，沒覆蓋則是紅底。</p>\n<p><img src=\"/img/posts/2022/show-test-coverage-at-gitlab-a-go-example/gitlab-5.png\" alt=\"\"></p>\n<p>也可以在 Output Tab 看到呼叫指令</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">Running tool: C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>ken<span class=\"token punctuation\">\\</span>.g<span class=\"token punctuation\">\\</span>go<span class=\"token punctuation\">\\</span>bin<span class=\"token punctuation\">\\</span>go.exe <span class=\"token builtin class-name\">test</span> -timeout 30s -coverprofile<span class=\"token operator\">=</span>C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>ken<span class=\"token punctuation\">\\</span>AppData<span class=\"token punctuation\">\\</span>Local<span class=\"token punctuation\">\\</span>Temp<span class=\"token punctuation\">\\</span>vscode-goK1REdF<span class=\"token punctuation\">\\</span>go-code-cover ken-test/pkg/app/usecase<br><br>ok      ken-test/pkg/app/usecase    <span class=\"token number\">0</span>.523s  coverage: <span class=\"token number\">14.6</span>% of statements</code></pre>\n<p>原理是用 UI 的方式調用底層的 go test，產生 coverprofile 後，再將它餵給 VSCode。</p>\n<p>VSCode 怎麼知道 test 時經過哪些路徑呢？這裡的重點是 coverprofile，內容類似</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">mode: <span class=\"token builtin class-name\">set</span><br>app-test/internal/app/usecase.go:12.92,14.16 <span class=\"token number\">2</span> <span class=\"token number\">0</span><br>app-test/internal/app/usecase.go:17.2,17.25 <span class=\"token number\">1</span> <span class=\"token number\">0</span><br>app-test/internal/app/usecase.go:14.16,16.3 <span class=\"token number\">1</span> <span class=\"token number\">0</span><br>app-test/internal/app/usecase.go:20.102,21.32 <span class=\"token number\">1</span> <span class=\"token number\">0</span></code></pre>\n<p>Go 用來產生 coverprofile 的命令是</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go <span class=\"token builtin class-name\">test</span> -coverprofile<span class=\"token operator\">=</span>coverage.txt ./<span class=\"token punctuation\">..</span>.</code></pre>\n<p>同理可證，如果 VSCode 吃 coverprofile 能 highlight coverage，只要餵 GitLab 同樣的檔案，GitLab 應該能做到同樣的效果。不過事情沒這麼美好。查詢說明文件，發現</p>\n<blockquote>\n<p>For the coverage analysis to work, you have to provide a properly formatted <a href=\"https://cobertura.github.io/cobertura/\">Cobertura XML</a> report to <a href=\"https://docs.gitlab.com/ee/ci/yaml/artifacts_reports.html#artifactsreportscoverage_report\">artifacts:reports:coverage_report</a>.</p>\n</blockquote>\n<p>意思是，原生的 coverprofile 格式，GitLab 是不接受的。需要將它轉換成 Cobertura format 並提供給 GitLab。</p>\n<p>Cobertura 是什麼東西？參考 GitHub 的專案</p>\n<blockquote>\n<p>Cobertura is a free Java code coverage reporting tool. It is based on jcoverage 1.0.5. See the <a href=\"http://cobertura.sourceforge.net/\">Cobertura web page</a> and <a href=\"https://github.com/cobertura/cobertura/wiki\">wiki</a> for more details.</p>\n</blockquote>\n<p>Cobertura 是西班牙語 coverage 的意思，它是一套 Java 的 coverage 報告工具。Jenkins 使用它產出的報告來呈現 coverage，也因為 Jenkins 的使用者眾多，支援的場景比較齊全，GitLab 為了讓專案無痛轉換，也支援了 Cobertura 的格式，它的長相是這樣</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span><br><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">coverage</span> <span class=\"token name\">SYSTEM</span> <span class=\"token string\">\"[http://cobertura.sourceforge.net/xml/coverage-04.dtd](http://cobertura.sourceforge.net/xml/coverage-04.dtd)\"</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>coverage</span> <span class=\"token attr-name\">line-rate</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0.21586345<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">branch-rate</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">timestamp</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1664528908194<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">lines-covered</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>215<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">lines-valid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>996<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">branches-covered</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">branches-valid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">complexity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sources</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span><span class=\"token punctuation\">></span></span>D:\\git\\ken\\ken-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>source</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>sources</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packages</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ken-test/pkg/app/repository<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">line-rate</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0.30869564<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">branch-rate</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">complexity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>classes</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>class</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Sdk<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">filename</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pkg/app/repository/repo_data.go<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">line-rate</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0.9423077<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">branch-rate</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">complexity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>methods</span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>method</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GetDataPage<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">signature</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">line-rate</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0.9423077<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">branch-rate</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">complexity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>lines</span><span class=\"token punctuation\">></span></span><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>line</span> <span class=\"token attr-name\">number</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>14<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">hits</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>line</span><span class=\"token punctuation\">></span></span><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>line</span> <span class=\"token attr-name\">number</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>15<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">hits</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>line</span><span class=\"token punctuation\">></span></span><br>...</code></pre>\n<p>可以看出內容跟 Go 原生的 coverprofile 接近，只是改成用 XML 的格式。</p>\n<p>要將 coverprofile 轉成 Cobertura，GitHub 有現成的工具</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go <span class=\"token function\">install</span> github.com/boumenot/gocover-cobertura@latest<br>gocover-cobertura <span class=\"token operator\">&lt;</span> coverage.txt <span class=\"token operator\">></span> coverage.xml</code></pre>\n<p>轉換後，只要將這個檔案餵給 GitLab 就可以了。當然，我們希望這些事情都可以串進 CI Pipeline 自動完成，從 GitLab 的流程來思考的話，我們會需要個 test stage，該 stage 下有個 job，用來產出 coverage.xml，並將產出物提交給 GitLab Server，而 GitLab 自動根據這份文檔，顯示對應的資訊。</p>\n<p>這些邏輯變成 gitlab-ci.yml 後，會是</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span><br>  <span class=\"token punctuation\">-</span> test<br><br><span class=\"token key atrule\">code_coverage_report</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> test<br>  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span><br>    <span class=\"token punctuation\">-</span> go test ./<span class=\"token punctuation\">...</span> <span class=\"token punctuation\">-</span>coverprofile=coverage.txt <span class=\"token punctuation\">-</span>covermode count<br>    <span class=\"token punctuation\">-</span> go install github.com/boumenot/gocover<span class=\"token punctuation\">-</span>cobertura@latest<br>    <span class=\"token punctuation\">-</span> $GOPATH/bin/gocover<span class=\"token punctuation\">-</span>cobertura &lt; coverage.txt <span class=\"token punctuation\">></span> coverage.xml<br>  <span class=\"token key atrule\">artifacts</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">reports</span><span class=\"token punctuation\">:</span><br>      <span class=\"token key atrule\">cobertura</span><span class=\"token punctuation\">:</span> coverage.xml </code></pre>\n<p>關於 Badge 呢，如法炮製，加入一個 job 來處理，這個就比較單純了，因為 Badge 是由 GitLab Server 自己產生，我們只要更新它對應的變數就好，也就是只是要抓一個數字而已，它抓數字的方式也很有意思，是用 console output 跟 regexp 來抓，想想也挺合理，它不在乎你的輸出格式是什麼，也不在意怎麼 Parse，只要告訴它要抓的值就可以，這樣的設計為不同語言都提供了彈性。</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">coverage</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> test<br>  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span><br>  <span class=\"token punctuation\">-</span> go tool cover <span class=\"token punctuation\">-</span>func=coverage.txt<br>  <span class=\"token key atrule\">coverage</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'/total:\\s+\\(statements\\)\\s+(\\d+.\\d+\\%)/'</span></code></pre>\n<p>當然最後不要忘記，Readme 中要加上 Badge</p>\n<pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token url\">[<span class=\"token content\">![Coverage Report</span>](<span class=\"token url\">&lt;https://gitlab.com/ken00535/demo-tools/badges/master/coverage.svg></span>)</span>](&lt;https://gitlab.com/ken00535/demo-tools/commits/master>)</code></pre>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>簡單說明由需求到落地的思考過程。這套思路是用資訊架構三本柱的「場景」「使用者」「內容」來分的，嘗試先定義出場景跟使用者關心的事，再來補齊相關的內容。不得不說確實好用，當場景拆解出來後，要求的資訊也跟著水落石出。例如我原本沒想過用 Cobertura 的格式，可是當知道需要顯示 Line Hit 時，就開始研究其他家的做法，也開始好奇 Go 的 Built-in Tool 有沒有支援類似的場景。</p>\n<p>我猜 coverage 應該還有些不同的應用，像是不單判斷有沒有覆蓋，還更進一步用 heatmap 來呈現；或者是將 coverage trend 跟 issues 的發生頻率做比對，證明 unit test 對品質的有效性。希望大家看完這篇後，也能找到適合自己團隊的用法。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://docs.gitlab.com/ee/ci/pipelines/settings.html#merge-request-test-coverage-results\">Customize pipeline configuration | GitLab</a></li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/testing/test_coverage_visualization.html\">Test coverage visualization | GitLab</a></li>\n<li><a href=\"https://github.com/cobertura/cobertura\">GitHub - cobertura/cobertura: Cobertura</a></li>\n</ul>\n",
      "date_published": "2022-10-02T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2022/go-dependency-injection-by-fx/",
      "url": "https://blog.kenwsc.com/posts/2022/go-dependency-injection-by-fx/",
      "title": "用 Fx 來替 Go 依賴注入吧",
      "content_html": "<p>相信平常開發時，即使沒真的用到，也會聽別人提起「依賴注入」的概念。我們都知道依賴注入的目的是解耦模組間的依賴，但具體來說，依賴注入應該要怎麼進行呢？Go 對於依賴注入有什麼比較好的實踐呢？這篇就來談談 Go 相關的依賴注入話題。</p>\n<h2 id=\"%E5%B8%B8%E8%A6%8B%E7%9A%84%E5%AF%A6%E8%B8%90%E6%96%B9%E5%BC%8F\"><a class=\"direct-link\" href=\"#%E5%B8%B8%E8%A6%8B%E7%9A%84%E5%AF%A6%E8%B8%90%E6%96%B9%E5%BC%8F\">#</a> 常見的實踐方式</h2>\n<p>講到依賴注入，從 OOP 的觀點來看，可以回到 Martin Fowler 的 SOLID 原則，其中的 Dependency Inversion Principle 落實到編程中，就是依賴注入。James Grenning 曾經簡單扼要說明 DIP 原則的出發點</p>\n<blockquote>\n<p>Martin tells us that high-level modules shouldn’t depend on low-level modules.</p>\n</blockquote>\n<p>這裡，高層級的模組指的是商業邏輯的實現。依賴反轉原則之所以重要，在於它隔離了抽象與實作，高階層只定義抽象，所以可以快速完成。而低階再視高階需求來完成實作，讓抽換修改的彈性增加。重點會放在如何去定義抽象，而不是定義實作。</p>\n<p>假設我們有個模組，稱為 app，負責商業邏輯；而有另一個模組，稱為 db，負責底層實現，那麼，依賴注入的用法會類似這樣</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"playground/internal/app\"</span><br>    <span class=\"token string\">\"playground/internal/db\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    db <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">NewDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    app <span class=\"token operator\">:=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">NewApp</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span><br>    app<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>很單純吧，先後建立兩個實例，app 實例包含 db 實例，兩個實例間透過 interface 來溝通，在 main func 進行組合。組合完成後，就可以呼叫 app.Run 來執行程式。</p>\n<p>具體來看 app 跟 db 的 New func 是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> app<br><br><span class=\"token keyword\">import</span> <span class=\"token string\">\"playground/internal/entity\"</span><br><br><span class=\"token keyword\">type</span> app <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    db entity<span class=\"token punctuation\">.</span>DatabaseInterface<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">NewApp</span><span class=\"token punctuation\">(</span>db entity<span class=\"token punctuation\">.</span>DatabaseInterface<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>app <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>app<span class=\"token punctuation\">{</span>db<span class=\"token punctuation\">:</span> db<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span>app<span class=\"token punctuation\">)</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    a<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>重點是 arg 需要使用 interface 來定義，同樣的，db 的 return 也要使用 interface</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> db<br><br><span class=\"token keyword\">import</span> <span class=\"token string\">\"playground/internal/entity\"</span><br><br><span class=\"token keyword\">type</span> database <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">NewDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> entity<span class=\"token punctuation\">.</span>DatabaseInterface <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>database<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>database<span class=\"token punctuation\">)</span> <span class=\"token function\">Save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<p>可以理解成，把實例從原本的模組搬出來，再搬進去 app 中，給 app 呼叫。在這過程中，app 不需要知道原本的樣子，只需要知道呼叫的方式。</p>\n<h2 id=\"%E6%A1%86%E6%9E%B6%E7%9A%84%E7%94%A8%E9%80%94\"><a class=\"direct-link\" href=\"#%E6%A1%86%E6%9E%B6%E7%9A%84%E7%94%A8%E9%80%94\">#</a> 框架的用途</h2>\n<p>雖然依賴注入的概念很單純，但當依賴的項目變多時，管理上會慢慢變得棘手。在剛剛的例子中，只有 app 依賴 db，假設現在 app 需要爬 10 不同的網站的資料，每個網站需要一套解析資料的邏輯呢？或者，依賴內又存在依賴關係，像是 A -&gt; B -&gt; C，成為 chain 的結構呢？如果依賴不僅存在於啟動，也要在結束程式時，套用 Graceful shutdown 的方式依照順序來結束呢？當你面對複雜的應用情境，就是框架出馬的時候了。</p>\n<p>有些框架會內建依賴注入，像是 Angular</p>\n<blockquote>\n<p>元件應該把諸如從伺服器獲取資料、驗證使用者輸入或直接往控制檯中寫日誌等工作委託給各種服務。透過把各種處理任務定義到可注入的服務類別中，你可以讓它被任何元件使用。 透過在不同的環境中注入同一種服務的不同提供者，你還可以讓你的應用更具適應性。</p>\n<p>Angular 不會強迫你遵循這些原則。Angular 只會透過依賴注入來幫你更容易地將應用邏輯分解為服務，並讓這些服務可用於各個元件中。</p>\n</blockquote>\n<p>這裡引入另一個重要的概念，SRP，依賴注入可以將 Component 中跟責任無關的輔助邏輯分離開來，讓元件專注於元件本身，從而提高可用性。這不是強制的，開發者仍然應該視自己的專案選擇技術實踐，框架提供的是「選擇」，而不是限制開發者的自由。</p>\n<p>當然，作為一個標榜「simple」的語言，Golang 同樣沒有內建框架，但這並不意味著開發者需要自造輪子，常用的依賴注入框架，有 Google 的 wire （是的，即使是跟 Go 關係密切的 Google，也設計一套了框架來讓開發變得更有效率）跟 Uber 的 Fx。兩者的差別，在於 wire 是使用 Code Gen 的方式，而 Fx 則是使用 Reflection，在執行期動態判斷型別。</p>\n<p>我覺得選擇哪套框架的差別不大，因為現在的公司用 Fx，這邊也主要介紹 Fx。</p>\n<h3 id=\"fx-%E8%A6%81%E6%80%8E%E9%BA%BC%E7%94%A8%EF%BC%9F\"><a class=\"direct-link\" href=\"#fx-%E8%A6%81%E6%80%8E%E9%BA%BC%E7%94%A8%EF%BC%9F\">#</a> Fx 要怎麼用？</h3>\n<p>Fx 是由 uber 開源的一套依賴注入框架，用來幫開發者管理上述提到的種種問題，GitHub Repo 的說明寫得很簡潔清晰</p>\n<blockquote>\n<p>An application framework for Go that:</p>\n<p>．Makes dependency injection easy.<br>\n．Eliminates the need for global state and func init().</p>\n</blockquote>\n<p>首先讓依賴注入更簡單，其次降低 init() 的使用。我覺得第二點可以多講講，依照 Go 的設計，如果 pakcage 中有 init()，會在 process 運行時先被呼叫，順序則是依照 import 的順序。這意味著，當你的專案存在多重引用關係時，幾乎無法預期 init() 被呼叫的正確時間，從而沒辦法用正確的順序載入依賴。</p>\n<p>在 uber 的 Coding Style Guide 也明確說明 init() 是個反模式</p>\n<blockquote>\n<p>Avoid init()</p>\n<p>Avoid init() where possible. When init() is unavoidable or desirable, code should attempt to:</p>\n<ol>\n<li>Be completely deterministic, regardless of program environment or invocation.</li>\n<li>Avoid depending on the ordering or side-effects of other init() functions. While init() ordering is well-known, code can change, and thus relationships between init() functions can make code brittle and error-prone.</li>\n<li>Avoid accessing or manipulating global or environment state, such as machine information, environment variables, working directory, program arguments/inputs, etc.</li>\n<li>Avoid I/O, including both filesystem, network, and system calls.</li>\n</ol>\n</blockquote>\n<p>盡管有些狀況仍需要使用 init()，但使用依賴注入框架，可以幫助開發者避免用不正確的方式做事</p>\n<p>Fx 用來管理依賴的方式跟容器有點像，首先用 New 產生 Fx 的 app 實例，告知需要的 New func，app 在執行前會呼叫 invoke 的 func，並載入相關的實例，完成依賴注入</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"playground/internal/app\"</span><br>    <span class=\"token string\">\"playground/internal/db\"</span><br><br>    <span class=\"token string\">\"go.uber.org/fx\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    fxApp <span class=\"token operator\">:=</span> fx<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><br>        fx<span class=\"token punctuation\">.</span><span class=\"token function\">Provide</span><span class=\"token punctuation\">(</span><br>            db<span class=\"token punctuation\">.</span>NewDatabase<span class=\"token punctuation\">,</span><br>            app<span class=\"token punctuation\">.</span>NewApp<span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>        fx<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>Run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">)</span><br>    fxApp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Provide 用來告知如何產生要被注入的的實例，由於 Fx 的設計是 Lazy Loading，僅僅只是在 Provide 聲明還不會被使用，需要透過 Invoke 喚起 func，明確表示需要該依賴，Provide 中的 func 才會被調用。</p>\n<p>大致上，流程可以看成是 Run() -&gt; Invoke() -&gt; Provide() 的順序。</p>\n<p>對應到原本的範例，我們要放入 Provide 的是 db 跟 app 的 New func，要放進 Invoke 是 app 的 Run func，當執行 Fx 的 Run 時則會顯示加載訊息</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">go</span> run <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>app<br><br><span class=\"token punctuation\">[</span>Fx<span class=\"token punctuation\">]</span> PROVIDE    entity<span class=\"token punctuation\">.</span>DatabaseInterface <span class=\"token operator\">&lt;=</span> playground<span class=\"token operator\">/</span>internal<span class=\"token operator\">/</span>db<span class=\"token punctuation\">.</span><span class=\"token function\">NewDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">[</span>Fx<span class=\"token punctuation\">]</span> PROVIDE    <span class=\"token operator\">*</span>app<span class=\"token punctuation\">.</span>App <span class=\"token operator\">&lt;=</span> playground<span class=\"token operator\">/</span>internal<span class=\"token operator\">/</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">NewApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">[</span>Fx<span class=\"token punctuation\">]</span> PROVIDE    fx<span class=\"token punctuation\">.</span>Lifecycle <span class=\"token operator\">&lt;=</span> <span class=\"token keyword\">go</span><span class=\"token punctuation\">.</span>uber<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>fx<span class=\"token punctuation\">.</span>New<span class=\"token punctuation\">.</span><span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">[</span>Fx<span class=\"token punctuation\">]</span> PROVIDE    fx<span class=\"token punctuation\">.</span>Shutdowner <span class=\"token operator\">&lt;=</span> <span class=\"token keyword\">go</span><span class=\"token punctuation\">.</span>uber<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>fx<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>shutdowner<span class=\"token operator\">-</span><span class=\"token function\">fm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">[</span>Fx<span class=\"token punctuation\">]</span> PROVIDE    fx<span class=\"token punctuation\">.</span>DotGraph <span class=\"token operator\">&lt;=</span> <span class=\"token keyword\">go</span><span class=\"token punctuation\">.</span>uber<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>fx<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>dotGraph<span class=\"token operator\">-</span><span class=\"token function\">fm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">[</span>Fx<span class=\"token punctuation\">]</span> INVOKE             playground<span class=\"token operator\">/</span>internal<span class=\"token operator\">/</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>hello<br><span class=\"token punctuation\">[</span>Fx<span class=\"token punctuation\">]</span> RUNNING</code></pre>\n<p>當然 Fx 還有一些進階功能，像是 Logger 的客製化，可以用來將 log 轉換成 ELK 可以接受的格式；解構賦值跟 Supply func，可以用來處理 config 的加載，這邊就有興趣的人自行研究啦。</p>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>我以前都是手動處理，直到現在的工作，才發現還有依賴注入框架這東西。Fx 吸引我的點，大概是它還能管理生命週期，用來設計 Graceful shutdown 很好用。</p>\n<p>但如果談到是否在專案中正式導入，我覺得是件值得思考的事。Fx 在開發上有幾個小問題：(1) 因為是在執行期才注入，會降低問題反應時間，有時忘記在 main 加入 New func，要等到 run 起來 panic 才知道；(2) 預設的 debug log 不是太友善，需要花點時間理解；(3) 如果使用到進階功能，像是 annotation，要再花時間理解相關用法。這幾項也跟團隊目前的技術能力息息相關。</p>\n<p>對資深工程師來說，依賴注入或許是個簡單概念，使用框架時，能很容易映射使用方式與設計原理。但對不熟悉依賴注入的人來說，會需要花點工夫理解背後的思維。單純看程式碼，其實不容易看懂，例如 fx 背後是透過 Reflection 來實作依賴注入，即使在執行期 step into 執行，也不容易知道反射背後對到的是哪個 New func。</p>\n<p>框架的目的是協助工程師，如果不知道需要什麼協助，用框架也幫不上忙，說不定還會綁手綁腳，我猜這樣聽起來有點無趣，但也或許這才是最實際的想法。技術管理有它的成本跟效益，如果能的話，當然還是建議依照正規方法來設計，不能的話，當專案規模小的時候，直接使用手動注入而不使用框架，也不失為一個折衷的方式。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://github.com/uber-go/fx\">https://github.com/uber-go/fx</a></li>\n<li><a href=\"https://v6.angular.cn/guide/architecture-services\">https://v6.angular.cn/guide/architecture-services</a></li>\n</ul>\n",
      "date_published": "2022-09-04T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2020/discover-go-unit-test-stub-and-mock/",
      "url": "https://blog.kenwsc.com/posts/2020/discover-go-unit-test-stub-and-mock/",
      "title": "初探 Go 的單元測試：兼談 Stub 跟 Mock",
      "content_html": "<p>測試是程式的防護網，能確保程式符合設計，而當開發者需要對程式進行重構，以增進品質時，測試也可以確保程式不會出現改 A 壞 B 的情況。從商業角度來看，測試能降低維護與改善程式的成本，進而提高軟體開發的競爭力。</p>\n<p>既然測試這麼好，那為什麼常看到軟體專案中沒有測試？在我的經驗中，主要原因有兩個：首先是軟體開發初期，架構還不是很穩定，API 隨時有可能改變，在 API 不穩時，如果就開始寫大量測試，會造成後面很大的維護成本，試著想想，API 的改變，可能就牽涉到測試流程跟測試資料的改變，而之前的 Corner Case 很可能都變成沒有價值的投資，在這情況下寫測試沒有意義。</p>\n<p>再來，程式中可能會引用到第三方套件，例如 ORM 或 HTTP 之類的外部依賴，如果要實際測試，就會需要建構測試環境，而這些也會有建置與維護成本，像是網路斷掉，可能就會在程式邏輯沒動到的狀況下，讓 HTTP 的測試失效，這些維護成本會讓寫測試的投資報酬率看起來不太划算。</p>\n<p>前一個問題需要仰賴架構設計，暫且不談；而針對測試中包含第三方依賴的情境，可以用 Stub 或 Mock 來解耦，讓商業邏輯跟底層套件分開。本文會用 ORM 當例子，介紹 Golang 的 Stub 跟 Mock，並實作三種不同方式的測試。需要 Clone 程式碼的，可以到<a href=\"https://github.com/ken00535/golang-medium-example\">這裡</a>。</p>\n<h2 id=\"basic-test\"><a class=\"direct-link\" href=\"#basic-test\">#</a> Basic Test</h2>\n<p>身為現代的程式語言，Golang 有內建自己的測試框架與命令行工具，假設專案架構是</p>\n<pre><code>.\n├── README.md\n└── pkg\n    └── foo\n        ├── foo.go\n        └── foo_test.go\n</code></pre>\n<p>其中 foo.go 是程式邏輯，而 foo_test.go 則是測試用的程式。在 Golang 的專案中，測試程式都用 _test.go 結尾，方便命令行工具辨認。</p>\n<p>來看主程式</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">fooBasic</span><span class=\"token punctuation\">(</span>num1 <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> num2 <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<br><span class=\"token punctuation\">}</span></code></pre>\n<p>內有 fooBasic，將兩個參數相加後返回。</p>\n<p>對應的測試程式 foo_test.go 可以是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> foo<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"testing\"</span><br>    <span class=\"token string\">\"github.com/stretchr/testify/assert\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">TestFooBasic</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    expect <span class=\"token operator\">:=</span> <span class=\"token number\">2</span><br>    actual <span class=\"token operator\">:=</span> <span class=\"token function\">fooBasic</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br>    assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> expect<span class=\"token punctuation\">,</span> actual<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>所有單元測試都用 Test 當開頭，內部的 testing.T 用來記錄測試上下文。單元測試內會 call fooBasic，得到的值再跟期望值比較，如果相同代表測試通過。</p>\n<pre class=\"language-go\"><code class=\"language-go\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> expect<span class=\"token punctuation\">,</span> actual<span class=\"token punctuation\">)</span></code></pre>\n<p>因為 Golang 內建的斷言庫不是很豐富，建議使用第三方斷言庫來做 assert，安裝用</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go get -u <span class=\"token string\">\"github.com/stretchr/testify/assert\"</span></code></pre>\n<p>之後可以用 go test 來執行測試</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP-2R08VK6:~/git/medium-example-golang/gotest$ go <span class=\"token builtin class-name\">test</span> ./<span class=\"token punctuation\">..</span>.<br>ok      example/gotest/pkg/foo  <span class=\"token number\">0</span>.005s</code></pre>\n<p>看到測試通過。</p>\n<p>假設將期望值改成錯的，則會得到錯誤訊息</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP-2R08VK6:~/git/medium-example-golang/gotest$ go <span class=\"token builtin class-name\">test</span> ./<span class=\"token punctuation\">..</span>.<br>--- FAIL: TestFooBasic <span class=\"token punctuation\">(</span><span class=\"token number\">0</span>.00s<span class=\"token punctuation\">)</span><br>    foo_test.go:17: <br>                Error Trace:    foo_test.go:17<br>                Error:          Not equal: <br>                                expected: <span class=\"token number\">1</span><br>                                actual  <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span><br>                Test:           TestFooBasic<br>FAIL<br>FAIL    example/gotest/pkg/foo  <span class=\"token number\">0</span>.016s<br>FAIL</code></pre>\n<h2 id=\"stub\"><a class=\"direct-link\" href=\"#stub\">#</a> Stub</h2>\n<p>知道怎麼建立基礎測試後，回到本文的主題：如果有第三方依賴的話，應該如何去進行測試呢？可想而知，除了少數特例，我們不會希望真的執行底層命令。最直觀的做法，是把第三方的程式碼換掉，讓相同名字的函式對應到不同的邏輯內容。用專業術語來講，叫做 Stub。</p>\n<p>在 C 語言，我們可以用 Linker 連結不同的原始碼來達成這件事。但由於 Golang 已經將 Linker 處理掉了，要思考的角度應該轉變成是，從應用的層面，如何對第三方解耦。其實解法也算單純，因為 Golang 可以支援函式變數，因此只要在測試時，將函式變數的值換掉即可。</p>\n<p>來看主程式</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> foo<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"time\"</span><br><br>    <span class=\"token string\">\"github.com/jinzhu/gorm\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">type</span> User <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    gorm<span class=\"token punctuation\">.</span>Model<br>    Name     <span class=\"token builtin\">string</span><br>    Age      <span class=\"token builtin\">int</span><br>    Birthday time<span class=\"token punctuation\">.</span>Time<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">fooDatabaseCaseByValueFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token function\">getUserAgeValueFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">var</span> getUserAgeValueFunc <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> user User<br>    db<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> gorm<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postgres\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"host=myhost user=gorm dbname=gorm sslmode=disable password=mypassword\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect fail\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    res <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>user<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> res<span class=\"token punctuation\">.</span>Error <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    db<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">.</span>Age<br><span class=\"token punctuation\">}</span></code></pre>\n<p>這段程式碼負責在 Database 中查詢 User 的資料，ORM 是使用 gorm（不知道如何使用的人，可以看<a href=\"/posts/2020/gorm-from-init-to-use\">這篇</a>來複習）。將 ORM 相關的程式碼都抽出成函式，並 Assign 給 getUserAgeValueFunc，再在 fooDatabaseCaseByValueFunc 中調用並返回查詢結果。</p>\n<p>測試程式則是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> foo<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"testing\"</span><br>    <span class=\"token string\">\"github.com/prashantv/gostub\"</span><br>    <span class=\"token string\">\"github.com/stretchr/testify/assert\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">TestFooDatabaseByValueFunc</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    want <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><br>    stub <span class=\"token operator\">:=</span> gostub<span class=\"token punctuation\">.</span><span class=\"token function\">Stub</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>getUserAgeValueFunc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">defer</span> stub<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    actual <span class=\"token operator\">:=</span> <span class=\"token function\">fooDatabaseCaseByValueFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> want<span class=\"token punctuation\">,</span> actual<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>gostub.Stub 這套函式庫可以取代任意的變數，等到測試完成後，再將變數還原。</p>\n<p>使用時，用</p>\n<pre class=\"language-go\"><code class=\"language-go\">stub <span class=\"token operator\">:=</span> gostub<span class=\"token punctuation\">.</span><span class=\"token function\">Stub</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>getUserAgeValueFunc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>來對 getUserAgeValueFunc 進行取代，將它取代成</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>固定返回 1 這個值，等到執行完成後，再調用 Reset 還原</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">defer</span> stub<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>如此就能做到 Stub 了。</p>\n<h2 id=\"monkey-patch\"><a class=\"direct-link\" href=\"#monkey-patch\">#</a> Monkey Patch</h2>\n<p>但是等等，依照 Step 2 的方式，豈不是每個 Func 都要改成變數，才能換成 Stub？因為要測試，所以需要動到 Production Code，這樣不是前後關係倒置了嗎？是的，所以 gostub.Stub 的方式，又叫做侵入式。好的，既然有侵入式，那也有非侵入式，我們可以來嘗試 monkey 這套函式庫。</p>\n<p>monkey 可以幫助 Golang 的開發者做 Monkey Patch，依照 <a href=\"https://blog.techbridge.cc/2018/07/14/python-monkey-patch/\">TechBridge</a> 的解釋，Monkey Patch 是</p>\n<blockquote>\n<p>Monkey Patch 就是在 run time 時動態更改 class 或是 module 已經定義好的函數或是屬性內容。</p>\n</blockquote>\n<p>簡單來說，就是在 runtime 改變函式行為。Monkey Patch 的底層也不複雜，是使用 reflect 來實現。</p>\n<p>要安裝 Monkey Patch，用</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go get -u bou.ke/monkey</code></pre>\n<p>回到主程式本身，修改原先 foo.go 的調用方式</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">fooDatabaseCaseByFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token function\">getUserAgeFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">getUserAgeFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> user User<br>    db<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> gorm<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postgres\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"host=myhost user=gorm dbname=gorm sslmode=disable password=mypassword\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect fail\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    res <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>user<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> res<span class=\"token punctuation\">.</span>Error <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    db<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">.</span>Age<br><span class=\"token punctuation\">}</span></code></pre>\n<p>改成不要使用變數來調用。</p>\n<p>接著修改測試程式</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">TestFooDatabaseByFunc</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    want <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><br>    patch <span class=\"token operator\">:=</span> monkey<span class=\"token punctuation\">.</span><span class=\"token function\">Patch</span><span class=\"token punctuation\">(</span>getUserAgeFunc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">defer</span> patch<span class=\"token punctuation\">.</span><span class=\"token function\">Restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    actual <span class=\"token operator\">:=</span> <span class=\"token function\">fooDatabaseCaseByFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> want<span class=\"token punctuation\">,</span> actual<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>同樣是測試結束後，用 Restore 還原，不同的是，這次可以直接修改函式，而不用將函式指定給變數了。</p>\n<p>既然可以修改函式，那有沒有可能修改第三方函式庫呢？當然也可以。假設不要透過函式調用，而是直接使用第三方函式庫的話，foo.go 會是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">fooDatabaseCaseDirectCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> user User<br>    db<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> gorm<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postgres\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"host=myhost user=gorm dbname=gorm sslmode=disable password=mypassword\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect fail\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    res <span class=\"token operator\">:=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>user<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> res<span class=\"token punctuation\">.</span>Error <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    db<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">.</span>Age<br><span class=\"token punctuation\">}</span></code></pre>\n<p>同時，測試會變成</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">TestFooDatabaseByMonkeyPatch</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    want <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><br>    user <span class=\"token operator\">:=</span> User<span class=\"token punctuation\">{</span>Age<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><br>    db <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>    patch <span class=\"token operator\">:=</span> monkey<span class=\"token punctuation\">.</span><span class=\"token function\">Patch</span><span class=\"token punctuation\">(</span>gorm<span class=\"token punctuation\">.</span>Open<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> db<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    patchFirst <span class=\"token operator\">:=</span> monkey<span class=\"token punctuation\">.</span><span class=\"token function\">PatchInstanceMethod</span><span class=\"token punctuation\">(</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"First\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">_</span> <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">,</span> out <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB <span class=\"token punctuation\">{</span><br>        val <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        substitute <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><br>        val<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>substitute<span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span> db<br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    patchClose <span class=\"token operator\">:=</span> monkey<span class=\"token punctuation\">.</span><span class=\"token function\">PatchInstanceMethod</span><span class=\"token punctuation\">(</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Close\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        patch<span class=\"token punctuation\">.</span><span class=\"token function\">Restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        patchFirst<span class=\"token punctuation\">.</span><span class=\"token function\">Restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        patchClose<span class=\"token punctuation\">.</span><span class=\"token function\">Restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    actual <span class=\"token operator\">:=</span> <span class=\"token function\">fooDatabaseCaseDirectCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> want<span class=\"token punctuation\">,</span> actual<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>可以看到會需要先 Patch gorm.Open</p>\n<pre class=\"language-go\"><code class=\"language-go\">patch <span class=\"token operator\">:=</span> monkey<span class=\"token punctuation\">.</span><span class=\"token function\">Patch</span><span class=\"token punctuation\">(</span>gorm<span class=\"token punctuation\">.</span>Open<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> db<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>再 Patch 返回的物件方法</p>\n<pre class=\"language-go\"><code class=\"language-go\">patchFirst <span class=\"token operator\">:=</span> monkey<span class=\"token punctuation\">.</span><span class=\"token function\">PatchInstanceMethod</span><span class=\"token punctuation\">(</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"First\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">_</span> <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">,</span> out <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB <span class=\"token punctuation\">{</span><br>    val <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    substitute <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><br>    val<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>substitute<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> db<br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>最後再 Patch gorm.Close</p>\n<pre class=\"language-go\"><code class=\"language-go\">patchClose <span class=\"token operator\">:=</span> monkey<span class=\"token punctuation\">.</span><span class=\"token function\">PatchInstanceMethod</span><span class=\"token punctuation\">(</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Close\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>結束前記得要還原</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    patch<span class=\"token punctuation\">.</span><span class=\"token function\">Restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    patchFirst<span class=\"token punctuation\">.</span><span class=\"token function\">Restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    patchClose<span class=\"token punctuation\">.</span><span class=\"token function\">Restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>可以看到測試邏輯變得很不清晰，大多時間都在 Patch 第三方套件，因此從測試的觀點來說，最好還是將第三方套件相關的東西抽出成函式，讓程式具備更好的可測試性。</p>\n<h2 id=\"mock\"><a class=\"direct-link\" href=\"#mock\">#</a> Mock</h2>\n<p>Stub 可以將函式的行為給換掉，但如果想要追求更高的互動性，例如驗證函式的傳入參數是否跟預期相同，或是函式被調用的次數是不是預期的次數，這時就需要個跟真實物件很像的偽物，來做參數跟調用驗證。這個偽物在技術上，稱為 Mock。</p>\n<p>在 Golang 的語境中，Stub 跟 Mock 的差異，可以簡單認為</p>\n<ul>\n<li>Stub 是換掉原先的變數</li>\n<li>Mock 是對同樣 Interface 的不同實現</li>\n</ul>\n<p>什麼叫對同樣 Interface 的不同實現？Talk is cheap, show me the code，主程式是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> User <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    gorm<span class=\"token punctuation\">.</span>Model<br>    Name     <span class=\"token builtin\">string</span><br>    Age      <span class=\"token builtin\">int</span><br>    Birthday time<span class=\"token punctuation\">.</span>Time<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Database is database</span><br><span class=\"token keyword\">type</span> Database <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">fooDatabaseCaseIndirectCall</span><span class=\"token punctuation\">(</span>db Database<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> user User<br>    db<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>user<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">.</span>Age<br><span class=\"token punctuation\">}</span></code></pre>\n<p>函式接受一個參數傳入，該參數是 Database 這個 Interface。這裡涉及到一項重要的差異，在設計函式時，需要以 Interface 來實現，從 Golang 的角度來看，這才是解耦的根本之道，函式跟函式用 Interface 來溝通，而不是跟專用的 Instance 溝通，如此一來，函式之間就可以不存在依賴關係。</p>\n<p>既然說到 Mock 是對 Interface 的不同實現，當然要來設計個 Mock，新增檔案 foo_self_mock.go</p>\n<pre><code>.\n├── README.md\n└── pkg\n    └── foo\n        ├── foo.go\n        ├── foo_self_mock.go\n        └── foo_test.go\n</code></pre>\n<p>內容是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> foo<br><br><span class=\"token keyword\">type</span> dbMock <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">newDbMock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>dbMock <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>dbMock<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span>dbMock<span class=\"token punctuation\">)</span> <span class=\"token function\">First</span><span class=\"token punctuation\">(</span>out <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    out<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>User<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Age <span class=\"token operator\">=</span> <span class=\"token number\">1</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>該 Mock 實現 Database，並將 First 傳入參數的值修改成 1。</p>\n<p>回到測試程式，會變成</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">TestFooDatabaseCustomMock</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    want <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><br>    m <span class=\"token operator\">:=</span> <span class=\"token function\">newDbMock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    actual <span class=\"token operator\">:=</span> <span class=\"token function\">fooDatabaseCaseIndirectCall</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><br>    assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> want<span class=\"token punctuation\">,</span> actual<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>用 newDbMock 取得 Mock，再將該 Mock 傳進函式中，給函式進行調用，由於調用後會得到 1 的結果，這項測試就可以 Pass 了。</p>\n<p>Mock 最簡單的概念就是這樣，在 Golang 官方維護的庫中，也有 Mock 用的工具 gomock，用來自動產生 Mock 程式碼。要使用 gomock，可以先安裝</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go get -u github.com/golang/mock/mockgen</code></pre>\n<p>再使用它的命令行工具</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">mockgen -destination foo_mock.go -source foo.go -package foo</code></pre>\n<p>mockgen 會去讀取 -source 指定檔案中的 interface，再產生對應的程式碼</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Code generated by MockGen. DO NOT EDIT.</span><br><span class=\"token comment\">// Source: foo.go</span><br><br><span class=\"token comment\">// Package foo is a generated GoMock package.</span><br><span class=\"token keyword\">package</span> foo<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    gomock <span class=\"token string\">\"github.com/golang/mock/gomock\"</span><br>    reflect <span class=\"token string\">\"reflect\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// MockDatabase is a mock of Database interface</span><br><span class=\"token keyword\">type</span> MockDatabase <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    ctrl     <span class=\"token operator\">*</span>gomock<span class=\"token punctuation\">.</span>Controller<br>    recorder <span class=\"token operator\">*</span>MockDatabaseMockRecorder<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// MockDatabaseMockRecorder is the mock recorder for MockDatabase</span><br><span class=\"token keyword\">type</span> MockDatabaseMockRecorder <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    mock <span class=\"token operator\">*</span>MockDatabase<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// NewMockDatabase creates a new mock instance</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">NewMockDatabase</span><span class=\"token punctuation\">(</span>ctrl <span class=\"token operator\">*</span>gomock<span class=\"token punctuation\">.</span>Controller<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>MockDatabase <span class=\"token punctuation\">{</span><br>    mock <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>MockDatabase<span class=\"token punctuation\">{</span>ctrl<span class=\"token punctuation\">:</span> ctrl<span class=\"token punctuation\">}</span><br>    mock<span class=\"token punctuation\">.</span>recorder <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>MockDatabaseMockRecorder<span class=\"token punctuation\">{</span>mock<span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> mock<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// EXPECT returns an object that allows the caller to indicate expected use</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>MockDatabase<span class=\"token punctuation\">)</span> <span class=\"token function\">EXPECT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>MockDatabaseMockRecorder <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> m<span class=\"token punctuation\">.</span>recorder<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// First mocks base method</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>MockDatabase<span class=\"token punctuation\">)</span> <span class=\"token function\">First</span><span class=\"token punctuation\">(</span>arg0 <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    m<span class=\"token punctuation\">.</span>ctrl<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">.</span><span class=\"token function\">Helper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    m<span class=\"token punctuation\">.</span>ctrl<span class=\"token punctuation\">.</span><span class=\"token function\">Call</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token string\">\"First\"</span><span class=\"token punctuation\">,</span> arg0<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// First indicates an expected call of First</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>mr <span class=\"token operator\">*</span>MockDatabaseMockRecorder<span class=\"token punctuation\">)</span> <span class=\"token function\">First</span><span class=\"token punctuation\">(</span>arg0 <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>gomock<span class=\"token punctuation\">.</span>Call <span class=\"token punctuation\">{</span><br>    mr<span class=\"token punctuation\">.</span>mock<span class=\"token punctuation\">.</span>ctrl<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">.</span><span class=\"token function\">Helper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> mr<span class=\"token punctuation\">.</span>mock<span class=\"token punctuation\">.</span>ctrl<span class=\"token punctuation\">.</span><span class=\"token function\">RecordCallWithMethodType</span><span class=\"token punctuation\">(</span>mr<span class=\"token punctuation\">.</span>mock<span class=\"token punctuation\">,</span> <span class=\"token string\">\"First\"</span><span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>MockDatabase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>First<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arg0<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>跟我們剛剛自製的 mock 大致上類似，不同的是還有 Expect 跟 Recorder，這裡可以理解為支援參數驗證，預期的驗證行為會被記錄在 Recorder，而正式的調用行為則會用 Mock 的 First 來調用。落實到測試程式上，則是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">TestFooDatabaseGomock</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    want <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><br>    <span class=\"token keyword\">var</span> user User<br>    ctrl <span class=\"token operator\">:=</span> gomock<span class=\"token punctuation\">.</span><span class=\"token function\">NewController</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">defer</span> ctrl<span class=\"token punctuation\">.</span><span class=\"token function\">Finish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    m <span class=\"token operator\">:=</span> <span class=\"token function\">NewMockDatabase</span><span class=\"token punctuation\">(</span>ctrl<span class=\"token punctuation\">)</span><br>    m<span class=\"token punctuation\">.</span><span class=\"token function\">EXPECT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span>gomock<span class=\"token punctuation\">.</span><span class=\"token function\">Eq</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetArg</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> User<span class=\"token punctuation\">{</span>Age<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    actual <span class=\"token operator\">:=</span> <span class=\"token function\">fooDatabaseCaseIndirectCall</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><br>    assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> want<span class=\"token punctuation\">,</span> actual<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>為了產生 Mock，要先產生一個 controller 當參數</p>\n<pre class=\"language-go\"><code class=\"language-go\">ctrl <span class=\"token operator\">:=</span> gomock<span class=\"token punctuation\">.</span><span class=\"token function\">NewController</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></code></pre>\n<p>controller 在結束時，會用 Finish 來驗證所有的調用行為</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">defer</span> ctrl<span class=\"token punctuation\">.</span><span class=\"token function\">Finish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>將 controller 傳給 NewMockDatabase，得到 mock，並為 mock 設定預期跟回傳參數</p>\n<pre class=\"language-go\"><code class=\"language-go\">m <span class=\"token operator\">:=</span> <span class=\"token function\">NewMockDatabase</span><span class=\"token punctuation\">(</span>ctrl<span class=\"token punctuation\">)</span><br>m<span class=\"token punctuation\">.</span><span class=\"token function\">EXPECT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span>gomock<span class=\"token punctuation\">.</span><span class=\"token function\">Eq</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetArg</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> User<span class=\"token punctuation\">{</span>Age<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>同樣將 mock 傳入調用，得到結果並驗證</p>\n<pre class=\"language-go\"><code class=\"language-go\">actual <span class=\"token operator\">:=</span> <span class=\"token function\">fooDatabaseCaseIndirectCall</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><br>assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> want<span class=\"token punctuation\">,</span> actual<span class=\"token punctuation\">)</span></code></pre>\n<p>可以看到用 Mockgen 建立的 mock 具備更高的互動性，可以依照開發者的需求來客制化行為。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>介紹完 gostub、monkey 跟 gomock 三套函式庫後，來簡單做個結論。原則上，因為 gostub 是侵入式，會影響到原本的 Production code，基本上可以不用考慮，它的功用完全可以用 monkey 來取代。</p>\n<p>而 gomock 的確很棒，能驗證互動行為，但這是建立在 Production code 用 interface 當參數的前提下，問題是，如果不是要做成函式庫，開放給其他人調用，而僅僅是應用程式內部使用的話，幾乎不太可能用 interface 當傳入參數。因為優點同時也是缺點，為了解耦依賴，必須要先在一個不同的地方實現 instance，再進行依賴注入，這會讓調用者的邏輯變得很複雜，每次要 call method 前，都要先把依賴 new 出來。再來，使用 interface 最直接的後果，就是沒辦法做 code nevigation，當只是要做個簡單的 function 時，用 Mock 的代價未免高了點。</p>\n<p>我的建議是，盡可能將第三方的呼叫都封裝到函式中，不要直接寫在 Production code，這會大幅降低 Stub 的成本；再來，如果不是特殊需求，盡量少用 Mock，它的行為太複雜，會讓 test 變得不像 test。如果可以，我們應該要由程式架構來解決測試的複雜度。</p>\n<h2 id=\"reference%3A\"><a class=\"direct-link\" href=\"#reference%3A\">#</a> Reference:</h2>\n<ul>\n<li><a href=\"https://github.com/bouk/monkey\">bouk/monkey: Monkey patching in Go — GitHub</a></li>\n<li><a href=\"https://github.com/prashantv/gostub\">prashantv/gostub: gostub is a library to make … — GitHub</a></li>\n<li><a href=\"https://github.com/golang/mock\">golang/mock: GoMock is a mocking framework for the … — GitHub</a></li>\n<li><a href=\"https://blog.techbridge.cc/2018/07/14/python-monkey-patch/\">Python Monkey Patch 入門教學 — TechBridge 技術共筆部落格</a></li>\n</ul>\n",
      "date_published": "2020-11-22T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2020/code-generator-by-go-template/",
      "url": "https://blog.kenwsc.com/posts/2020/code-generator-by-go-template/",
      "title": "自動生成重複代碼：使用 Go 的 Template",
      "content_html": "<p>開發軟體時，常常會發現有些函式或方法很類似，例如對 Callback Function 來說，開發者都需要註冊回調函式，並在適當的時機，將資料交給回調函式處理，我們可以將這兩個動作，稱為 OnAction 跟 EmitAction。儘管繼承或組合能讓程式碼重複使用類似的組件，幫助開發者節省時間，但對於較複雜的情況，像是不同類(Class)的函式名稱也要不同時，仍需要仰賴開發者自行編寫。</p>\n<p>試著想想，如果開發者僅僅寫設定檔(Config File)，就有程式能根據設定檔來自動產生程式碼，不是很美好的事嗎？這是有的，在實務上，這類用於產生程式的程式被稱為 Code Generator，例如<a href=\"/posts/2020/go-generic-alter-plan-assert-and-codegen\">前面</a>介紹過的 genny。Golang 有內建 generate 這個命令行工具，能幫助開發者將 Code Generator 跟編譯更密切結合在一起。</p>\n<p>本文會用 Callback 的 Generator 當例子，講解如何開發並使用一套 Code Generator。需要 Clone 程式碼的，可以到<a href=\"https://github.com/ken00535/golang-medium-example\">這裡</a>。</p>\n<h2 id=\"design-a-config-file\"><a class=\"direct-link\" href=\"#design-a-config-file\">#</a> Design a Config File</h2>\n<p>我們的目標是設計一套程式，可以依照 Config 來產生 Callback Function，Callback Function 能根據 Config，而有不同的名字跟引數型別。對像 Golang 這類強型別又沒有泛型的語言來說，這是很實用的功能。</p>\n<p>先看專案結構</p>\n<pre><code>.\n├── Makefile\n├── cmd\n│   ├── codegen\n│   │   └── main.go\n│   └── example\n├── config\n│   └── callback.json\n└── go.mod\n</code></pre>\n<p>codegen 內的 main.go 是主要程式碼，也就是 Code Generator；而 config 用於放置需要的設定檔。</p>\n<p>Config 應該長怎樣呢？我們希望它是一個陣列，這樣就能將每個元素對應到不同的 Callback，元素應該是個物件，包含 Name 跟 Arg 兩個不同的鍵，如果用 JSON 格式來表達，它會長</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token property\">\"EventName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Click\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"CallbackArg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"int\"</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token property\">\"EventName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Move\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"CallbackArg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"uint32\"</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">]</span></code></pre>\n<p>EventName 是 Callback 的名稱；CallbackArg 是 Callback 的引數型別。</p>\n<p>來看主程式的部分，在 main.go 中讀進 config，並 Parse 成 Struct</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"encoding/json\"</span><br>    <span class=\"token string\">\"fmt\"</span><br>    <span class=\"token string\">\"io/ioutil\"</span><br>    <span class=\"token string\">\"os\"</span><br>    <span class=\"token string\">\"strings\"</span><br>    <span class=\"token string\">\"text/template\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">type</span> schema <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    EventName   <span class=\"token builtin\">string</span><br>    CallbackArg <span class=\"token builtin\">string</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> schemas <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>schema<br>    data<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../config/callback.json\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    err <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>schemas<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>先建立個 Struct 來對應 config</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> schema <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    EventName   <span class=\"token builtin\">string</span><br>    CallbackArg <span class=\"token builtin\">string</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>再來讀檔案</p>\n<pre class=\"language-go\"><code class=\"language-go\">data<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../config/callback.json\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>接著反序列化 JSON，放進 array 中</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> schemas <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>schema<br>err <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>schemas<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>完成對 config 的讀取。</p>\n<h2 id=\"design-template\"><a class=\"direct-link\" href=\"#design-template\">#</a> Design Template</h2>\n<p>接著來設計 template，可以把它想像成是個餅乾模具，只要將麵團塞進模具放入烤箱烘烤，等待出爐後就是熱騰騰的餅乾。如果要換口味，也只需要調整麵團的配方，不需要動到模具。對照到程式碼，它可以看成是一段重複的程式碼原型，某些段落可以塞進變數，模板引擎會根據模板來渲染，達到客制化效果。</p>\n<p>讓人驚奇的是，Golang 有內建 template，這再次讓人感受到 Golang 在應用開發上的優勢。</p>\n<p>在原本的專案下，加入 template</p>\n<pre><code>.\n├── Makefile\n├── cmd\n│   ├── codegen\n│   │   └── main.go\n│   └── example\n├── config\n│   └── callback.json\n├── go.mod\n└── tmpl\n    ├── callbackTemplate.tmpl\n    ├── contextTemplate.tmpl\n    └── main.tmpl\n</code></pre>\n<p>main.tmpl 用於產生主程式；contextTemplate.tmpl 用以產生一個 Struct，內有需要的 callback 函式；callbackTemplate.tmpl 用來產生 callback 的註冊及調用。</p>\n<p>先來看要怎麼調用模板引擎，修改 main.go</p>\n<pre class=\"language-go\"><code class=\"language-go\">t <span class=\"token operator\">:=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">Must</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main.tmpl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ParseFiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../tmpl/main.tmpl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>t <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">Must</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">ParseFiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../tmpl/callbackTemplate.tmpl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>t <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">Must</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">ParseFiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../tmpl/contextTemplate.tmpl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>err <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> schemas<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>使用 text/template 函式庫，在 ParseFiles 由檔案引入模板，然後用 Execute 來渲染模板，輸出的結果先導到 stdout，顯示於終端機畫面，如果開發者有需要，可以將它再重新導向到檔案中。</p>\n<p>要注意 Execute 的第二個引數是 schemas ，這是由 config 中讀出的數據，也是要傳給模板的值。</p>\n<p>來看看模板的內容，main.tmpl 是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main<br><br><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> template <span class=\"token string\">\"contextTemplate.tmpl\"</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> template <span class=\"token string\">\"callbackTemplate.tmpl\"</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n<p>用 {{ action }} 框起來的是模板的 action，可以當成是模板語法，{{ template }} 意思是引入其他模板，在 main.tmpl 引入其他兩個模板； . 是調用程式傳入的參數。</p>\n<p>main.tmpl 內的 contextTemplate.tmpl 是另一個子模板，用於產生 struct</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Context can be used to callback</span><br><span class=\"token keyword\">type</span> Context <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">-</span> <span class=\"token keyword\">range</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span>EventName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>Callback <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span>CallbackArg <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">-</span> end <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>其中 range 是模板語言的迴圈，類似 Golang 的 for range； - 是省略 {{}} 前的空白，避免 action 干擾到模板。.EventName 跟 .CallbackArg 是傳入結構底下的欄位，也就是 config 中 EventName 跟 CallbackArg 的值。</p>\n<p>經過 contextTemplate.tmpl 後，預期可以生成</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Context can be used to callback</span><br><span class=\"token keyword\">type</span> Context <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    ClickCallback <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Click 跟 int 都是依照傳入參數而建立。</p>\n<p>main.tmpl 內的另一個子模板 callbackTemplate.tmpl 用於產生 function</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">-</span> <span class=\"token keyword\">range</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><br><span class=\"token comment\">// On{{ .EventName }} register a callback function</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> On<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span>EventName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>callback <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>arg <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span>CallbackArg <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    c<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span>EventName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>Callback <span class=\"token operator\">=</span> callback<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Emit{{ .EventName }} emit a callback event</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> Emit<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span>EventName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>arg <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span>CallbackArg <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    c<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span>EventName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token function\">Callback</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> end <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n<p>經過 callbackTemplate.tmpl 後，可以生成</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// OnClick register a callback function</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> <span class=\"token function\">OnClick</span><span class=\"token punctuation\">(</span>callback <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>arg <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    c<span class=\"token punctuation\">.</span>clickCallback <span class=\"token operator\">=</span> callback<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// EmitClick emit a callback event</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> <span class=\"token function\">EmitClick</span><span class=\"token punctuation\">(</span>arg <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    c<span class=\"token punctuation\">.</span><span class=\"token function\">clickCallback</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>如此一來，就完成模板的設計了。</p>\n<h2 id=\"add-template-action\"><a class=\"direct-link\" href=\"#add-template-action\">#</a> Add Template Action</h2>\n<p>儘管 Golang 模板有內建很多 action，但還是可能找不到想要的功能，例如，在 Golang 語法中，Struct Field 的名字首字母如果是大寫，意謂該 Field 是 Public，但另一方面，開發者又會希望 Function Name 要 Follow Camal Method。對應到需求是，如果 EventName 有時能大寫，有時能小寫，那就兩全其美了。</p>\n<p>這時就是自定義 action 派上用場的時機了，要加入自定義 action，可以回去修改 main.go，加入</p>\n<pre class=\"language-go\"><code class=\"language-go\">funcLowerCase <span class=\"token operator\">:=</span> template<span class=\"token punctuation\">.</span>FuncMap<span class=\"token punctuation\">{</span><span class=\"token string\">\"lower\"</span><span class=\"token punctuation\">:</span> strings<span class=\"token punctuation\">.</span>ToLower<span class=\"token punctuation\">}</span><br>t <span class=\"token operator\">:=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">Must</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main.tmpl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Funcs</span><span class=\"token punctuation\">(</span>funcLowerCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ParseFiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../tmpl/main.tmpl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>用 FuncMap 建立一個鍵值對，key 是 action 的名字，value 是 action 的執行內容，這邊使用 strings 下的 ToLower 幫忙做大小寫轉換。</p>\n<p>建立後的 func 可以用 Funcs 帶進模板中。</p>\n<p>再來修改模板 contextTemplate.tmpl</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span>EventName <span class=\"token operator\">|</span> lower <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>Callback <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span>CallbackArg <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>| 是 pipeline，可以將前項的輸出跟後項的輸入用管道連接起來，放在這邊，意思是將 EventName 傳給 lower，而 lower 正是剛剛建立的模板 action。</p>\n<p>於是渲染效果變成</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Context can be used to callback</span><br><span class=\"token keyword\">type</span> Context <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    clickCallback <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>處理好 scope 的問題了。</p>\n<h2 id=\"try-it\"><a class=\"direct-link\" href=\"#try-it\">#</a> Try It</h2>\n<p>開發完成後，來看看如何使用。</p>\n<p>一開始，先用 go run 來驗證程式是否正確</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP-2R08VK6:~/git/medium-example-golang/codegen/cmd/codegen$ go run main.go</code></pre>\n<p>得到</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main<br><br><span class=\"token comment\">// Context can be used to callback</span><br><span class=\"token keyword\">type</span> Context <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>        clickCallback <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><br>        moveCallback <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// OnClick register a callback function</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> <span class=\"token function\">OnClick</span><span class=\"token punctuation\">(</span>callback <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>arg <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        c<span class=\"token punctuation\">.</span>clickCallback <span class=\"token operator\">=</span> callback<br><span class=\"token punctuation\">}</span><br><span class=\"token operator\">...</span></code></pre>\n<p>內容正確！將輸出導出到 context.go 的檔案中</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go run main.go <span class=\"token operator\">></span> ./context.go</code></pre>\n<p>在專案中新增使用的程式</p>\n<pre><code>.\n├── Makefile\n├── cmd\n│   ├── codegen\n│   │   └── main.go\n│   └── example\n│       └── main.go\n├── config\n│   └── callback.json\n├── go.mod\n└── tmpl\n    ├── callbackTemplate.tmpl\n    ├── contextTemplate.tmpl\n    └── main.tmpl\n</code></pre>\n<p>example/main.go 的內容是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main<br><br><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    printNum <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>num <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    context <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Context<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>    context<span class=\"token punctuation\">.</span><span class=\"token function\">OnClick</span><span class=\"token punctuation\">(</span>printNum<span class=\"token punctuation\">)</span><br>    context<span class=\"token punctuation\">.</span><span class=\"token function\">EmitClick</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>使用 Context，並將 Println 註冊為 OnClick 的 callback，使用 EmitClick 將資料發送給 callback，OnClick 收到後就會將資料印出。</p>\n<p>在本例中，發送的資料是 5</p>\n<p>接著在檔案中加入 go:generate，讓 go generate 可以執行註解內容，產生 context.go</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">//go:generate bash -c \"go run ../codegen/main.go > ./context.go\"</span></code></pre>\n<p>用</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go generate ./<span class=\"token punctuation\">..</span>.</code></pre>\n<p>context.go 就被生出來了。</p>\n<p>接著編譯並執行 example</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP-2R08VK6:~/git/medium-example-golang/codegen$ ./bin/example <br><span class=\"token number\">5</span></code></pre>\n<p>成功印出 5。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>Go 命令行工具的 generate 原本是為了方便整合外部工具，讓 Golang 編譯更順利，搭配 template 使用後，變成 Code Generator 的利器。</p>\n<p>對於希望簡化程式碼，讓程式碼更具彈性，只要修改 config 即可完成擴充的人來說，Code Generator 會是個不錯的工具。實際上，以 Golang 目前沒有泛型的狀況來看，Code Generator 應該是一條開發捷徑；要注意的是，Code Generator 的用途是面向開發者，如果今天目的是要讓其他人容易使用，應該也要試試看用 Reflect 開發。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://golang.org/pkg/text/template/\">template — The Go Programming Language</a></li>\n<li><a href=\"https://github.com/c9s/callbackgen\">c9s/callbackgen: callbackgen generates callback … — GitHub</a></li>\n</ul>\n",
      "date_published": "2020-11-07T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2020/how-to-authenticate-user-using-jwt/",
      "url": "https://blog.kenwsc.com/posts/2020/how-to-authenticate-user-using-jwt/",
      "title": "如何驗證使用者身分：使用 JWT",
      "content_html": "<p>驗證與授權是開發網路應用時一定會遇到的問題，前者指的是確認使用者身分，讓 Server 明白請求者是真正的使用者，而不是其他人假冒；後者指的是該使用者有權限進行操作。JWT 處理的主要是前一個問題。</p>\n<p>先來看看 JWT 出來前的做法。在傳統技術中，使用者會在登入時輸入帳號密碼，Server 由資料庫驗證無誤後，創建一組 Session ID，放入回應的 Cookie ，Client 後續請求都會在 Cookie 帶上 Session ID，方便 Server 檢驗。</p>\n<p>由於只看 Session ID 無法說明使用者身分正確，還需要看該 Session ID 是否有儲存在 Server，而 Server 的數據通常儲存在資料庫，一來一往之間，就會造成 Server 端額外的開銷。JWT 只需要在 Server 儲存一組 Secret，即可對應不同的使用者，對比舊方法來說，能降低 Server 的負擔，已經成為當前主流的網路驗證方案。</p>\n<p>本文會講解 JWT 的原理並用 Node.js 搭配前端頁面，寫個簡單的網頁應用，需要 Clone 程式碼的，可以到<a href=\"https://github.com/ken00535/nodejs-medium-example\">這裡</a>。</p>\n<h2 id=\"introduction\"><a class=\"direct-link\" href=\"#introduction\">#</a> Introduction</h2>\n<p>JWT 全名是 JSON Web Token，由字面來看，它是使用 JSON 格式的一組網路應用 Token。Token 可以解釋成代幣，當 Server 確認使用者身分後，會發行一枚代幣給使用者，只要持有這枚代幣的人，Server 都會將它當成正規的使用者看待。</p>\n<p>JWT 有兩組不同的實作，分別是 JWS 和 JWE，通常用到的會是 JWS。S 指的是 Signatures，代表這枚 JWT 中有簽章資訊，可用於保證訊息的正確性。它像是鈔票上的浮水印，只要看到浮水印，就知道這張鈔票不是偽鈔。</p>\n<p>JWT 可以由三個部份組成，分別是</p>\n<ol>\n<li>header</li>\n<li>payload</li>\n<li>signature/encryption data</li>\n</ol>\n<p>Header 承載自我聲明的訊息，例如使用的演算法，用 JSON 來表示的話，會像是</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><span class=\"token property\">\"alg\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"HS256\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"typ\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"JWT\"</span><span class=\"token punctuation\">}</span></code></pre>\n<p>Payload 則是內容，同樣用 JSON 表示</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"iat\"</span><span class=\"token operator\">:</span><span class=\"token number\">1604146546</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"exp\"</span><span class=\"token operator\">:</span><span class=\"token number\">1604232946</span><span class=\"token punctuation\">}</span></code></pre>\n<p>這兩組會用 Base64 編碼成</p>\n<pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 eyJ1c2VyIjoidXNlciIsImlhdCI6MTYwNDE0NjU0NiwiZXhwIjoxNjA0MjMyOTQ2fQ\n</code></pre>\n<p>而 Signature 則會用加密演算法，對前面兩組訊息簽章，得到</p>\n<pre><code>gGyZTuVLTsibYW2QgUsXIU-66Z7NrqWlRMAyj_qx63s\n</code></pre>\n<p>將三組資訊放在一起，用 . 隔開，就成為 JWT 最後的樣子</p>\n<pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoidXNlciIsImlhdCI6MTYwNDE0NjU0NiwiZXhwIjoxNjA0MjMyOTQ2fQ.gGyZTuVLTsibYW2QgUsXIU-66Z7NrqWlRMAyj_qx63s\n</code></pre>\n<p>由於 Payload 中有紀錄 user 的身分，而該身分又是經由 Server 簽名過的，因此只要看到這枚 JWT，Server 就能知道該請求由真實的使用者發送。</p>\n<h2 id=\"implement-server-side\"><a class=\"direct-link\" href=\"#implement-server-side\">#</a> Implement Server Side</h2>\n<p>明白原理後，來看看如何實現。既然 JWT 牽涉到 Server 跟 Client 間的訊息交換，就需要分別實現兩邊的程式。</p>\n<p>先來看 Server 端，專案架構是</p>\n<pre><code>.\n├── README.md\n├── index.js\n├── package-lock.json\n├── package.json\n├── public\n│   └── css\n│       └── main.css\n└── views\n    └── index.ejs\n</code></pre>\n<p>index.js 負責後端邏輯，public 內放置靜態資源，用於前端。</p>\n<p>為開發方便，安裝 node.js 的熱更新套件 nodemon，它可以讓後端程式碼更新時，立即刷新服務</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> nodemon -g</code></pre>\n<p>接著安裝 JavaScript 的 JWT 套件跟 express</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> jsonwebtoken --save<br><span class=\"token function\">npm</span> <span class=\"token function\">install</span> express --save</code></pre>\n<p>使用 express 來處理後端程式</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> bodyParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body-parser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jsonwebtoken'</span><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">const</span> <span class=\"token constant\">SECRET</span> <span class=\"token operator\">=</span> <span class=\"token string\">'secret'</span><br><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'view engine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ejs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/public'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> extended<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">urlencoded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> extended<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">const</span> auth <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> auth <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">return</span><br>    <span class=\"token punctuation\">}</span><br>    token <span class=\"token operator\">=</span> auth<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bearer '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">const</span> decoded <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> <span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>decoded<span class=\"token punctuation\">.</span>user <span class=\"token operator\">==</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>                username<span class=\"token operator\">:</span> decoded<span class=\"token punctuation\">.</span>user<br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span><br>        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>username <span class=\"token operator\">===</span> <span class=\"token string\">\"user\"</span> <span class=\"token operator\">&amp;&amp;</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>password <span class=\"token operator\">===</span> <span class=\"token string\">\"pass\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> user<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SECRET</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> expiresIn<span class=\"token operator\">:</span> <span class=\"token string\">'1 day'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>        res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>            token<br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>        res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/content'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">const</span> auth <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> auth <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'Please authenticate.'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">48</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span><br>    <span class=\"token punctuation\">}</span><br>    token <span class=\"token operator\">=</span> auth<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bearer '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">const</span> decoded <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> <span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>decoded<span class=\"token punctuation\">.</span>user <span class=\"token operator\">==</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token string\">'Welcome!'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span><br>        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'Please authenticate.'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>這個路由中註冊了兩組 URL，一組用於處理登入，一組用於處理內容獲取。它對應到一個情境：使用者想要登入頁面，他會輸入帳號密碼，這組帳密經 Server 確認無誤後，會簽發 JWT 給 Client，Client 將會拿 JWT 來請求網站內容。</p>\n<p>前面先插入 express 的 Middleware，用於處理靜態資源跟 Parse 訊息</p>\n<pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/public'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> extended<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">urlencoded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> extended<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>後面註冊路由，負責登入的路由是</p>\n<pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>username <span class=\"token operator\">===</span> <span class=\"token string\">\"user\"</span> <span class=\"token operator\">&amp;&amp;</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>password <span class=\"token operator\">===</span> <span class=\"token string\">\"pass\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> user<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SECRET</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> expiresIn<span class=\"token operator\">:</span> <span class=\"token string\">'1 day'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>        res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>            token<br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>        res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>假定 user/pass 是正確的帳密，當確認請求正確，使用 jwt.sign 跟 SECRET 來簽名，SECRET 可以是全域的任意值，這裡是 secret 。 expiresIn 用於註明該 JWT 的有效期限是 1 天。</p>\n<p>簽名後回覆 token；否則回覆 Fail，告知登入失敗。</p>\n<p>註冊獲取內容的路由</p>\n<pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/content'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">const</span> auth <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> auth <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'Please authenticate.'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span><br>    <span class=\"token punctuation\">}</span><br>    token <span class=\"token operator\">=</span> auth<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bearer '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">const</span> decoded <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> <span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>decoded<span class=\"token punctuation\">.</span>user <span class=\"token operator\">==</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token string\">'Welcome!'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span><br>        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'Please authenticate.'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>由 HTTP 的 Header 中提取 Authorization 的訊息，JWT 會放在該處。拿到後，用 jwt.verify 進行驗證，如果解碼出來的 user 是 user ，返回內容給 Client，否則回覆認證失敗。</p>\n<p>最後監聽 8080 Port，提供服務</p>\n<pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"implement-client-side\"><a class=\"direct-link\" href=\"#implement-client-side\">#</a> Implement Client Side</h2>\n<p>前端的部分分為 HTML、JavaScript 跟 CSS 三塊，HTML 可以用模板引擎渲染後，傳送給瀏覽器。</p>\n<p>先來建立 HTML 的模板 views/index.ejs</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./css/main.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/axios/dist/axios.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\">integrity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">crossorigin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>anonymous<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>        <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">username<span class=\"token punctuation\">,</span> password</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://127.0.0.1:8080/login'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>                    username<span class=\"token operator\">:</span> username<span class=\"token punctuation\">,</span><br>                    password<span class=\"token operator\">:</span> password<span class=\"token punctuation\">,</span><br>                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>                res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://127.0.0.1:8080/content'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>                    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>                        <span class=\"token string\">'Authorization'</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>token<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><br>                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>                <span class=\"token keyword\">let</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                element<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;h1 class=\"welcome\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/h1></span><span class=\"token template-punctuation string\">`</span></span><br>            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text-center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/login<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form-signin<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>h3 mb-3 font-weight-normal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Please sign in<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sr-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Username<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sr-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Password<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">height</span><span class=\"token punctuation\">:</span>10px</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn btn-lg btn-primary btn-block<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>Login<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>前面的 head 處載入 JavaScript 跟 CSS，第一項是自定義的 CSS，這邊不細講，有興趣可以翻 GitHub，二三項是 Bootstrap 跟 axios，可以用 CDN 一併載入</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./css/main.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/axios/dist/axios.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\">integrity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">crossorigin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>anonymous<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>因為程式很小，沒必要拆 JavaScript，將 JavaScript 的程式寫在 head，等等再回來看</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>    <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">username<span class=\"token punctuation\">,</span> password</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token operator\">...</span><br></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>來看頁面主體，架構是</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text-center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/login<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form-signin<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>h3 mb-3 font-weight-normal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Please sign in<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sr-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Username<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sr-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Password<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">height</span><span class=\"token punctuation\">:</span>10px</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn btn-lg btn-primary btn-block<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>Login<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>登入頁面上會有一張表單，表單上有兩個 input，可以讓使用者輸入帳號密碼。表單下方會有個 button，當使用者點擊 button 後，會觸發 login 這個函式，函式的參數為兩個 input 的值。</p>\n<p>知道頁面有哪些元素後，可以回來看 JavaScript 做了哪些事情</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">username<span class=\"token punctuation\">,</span> password</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://127.0.0.1:8080/login'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>            username<span class=\"token operator\">:</span> username<span class=\"token punctuation\">,</span><br>            password<span class=\"token operator\">:</span> password<span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>        res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://127.0.0.1:8080/content'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>            headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token string\">'Authorization'</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>token<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">let</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        element<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;h1 class=\"welcome\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/h1></span><span class=\"token template-punctuation string\">`</span></span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>當使用者案下 button 後，會觸發 login 函式。這邊使用 async/await 來處理非同步邏輯，當 login 被執行時，會向 Server 送出 Post，內容帶有帳號密碼</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://127.0.0.1:8080/login'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>    username<span class=\"token operator\">:</span> username<span class=\"token punctuation\">,</span><br>    password<span class=\"token operator\">:</span> password<span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>等到非同步處理完畢後，使用取得的 JWT，用 Get 向 Server 要求內容</p>\n<pre class=\"language-js\"><code class=\"language-js\">res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://192.168.99.83:8080/content'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token string\">'Authorization'</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>token<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>拿到內容後，修改 body 的 innerHTML，把原先的元素換掉</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>element<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;h1 class=\"welcome\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/h1></span><span class=\"token template-punctuation string\">`</span></span></code></pre>\n<p>最後用 try 來處理請求失敗的情形，將它印到 console 上</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"operation\"><a class=\"direct-link\" href=\"#operation\">#</a> Operation</h2>\n<p>設計完成後，來實際操作吧，用 nodemon 打開後端程式</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP-2R08VK6:~/git/medium-example-nodejs/jwt$ nodemon index.js<br><span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> <span class=\"token number\">2.0</span>.4<br><span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> to restart at any time, enter <span class=\"token variable\"><span class=\"token variable\">`</span>rs<span class=\"token variable\">`</span></span><br><span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> watching path<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>: *.*<br><span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> watching extensions: js,mjs,json<br><span class=\"token punctuation\">[</span>nodemon<span class=\"token punctuation\">]</span> starting <span class=\"token variable\"><span class=\"token variable\">`</span>node index.js<span class=\"token variable\">`</span></span></code></pre>\n<p>在瀏覽器輸入網址，打開頁面</p>\n<p><img src=\"/img/posts/2020/how-to-authenticate-user-using-jwt/jwt-1.png\" alt=\"\"></p>\n<p>可以看到設計好的表單。輸入帳號密碼，點擊 Login，得到歡迎訊息</p>\n<p><img src=\"/img/posts/2020/how-to-authenticate-user-using-jwt/jwt-2.png\" alt=\"\"></p>\n<p>打開開發者工具，當送出 /content 的 RESTful API 時，會看到請求有帶後端回覆的 JWT</p>\n<p><img src=\"/img/posts/2020/how-to-authenticate-user-using-jwt/jwt-3.png\" alt=\"\"></p>\n<p>如果在 /login 輸入錯誤的帳密，則會看到失敗訊息</p>\n<p><img src=\"/img/posts/2020/how-to-authenticate-user-using-jwt/jwt-4.png\" alt=\"\"></p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>JWT 的概念簡單，容易操作，是現在常用到的驗證方法。但只要持有 JWT 的人，Server 都會將它當成合法對象，容易造成一些資安風險。如果因為管理 Token 的需求，而替 Token 設定過期的時間，安全是安全了些，卻會增加使用者驗證的麻煩，是權限管理時需要權衡的部分。</p>\n<p>另外 JWS 這項 JWT 實作，為保持訊息對第三方透明，只有驗證訊息的真實性，沒有對訊息加密，只要用 base64 decode 回去，就能取得 header 跟 payload 的資訊，因此敏感資訊記得不要放在 JWT 內喔，以防在在網路上被別人竊取。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://medium.com/%E9%BA%A5%E5%85%8B%E7%9A%84%E5%8D%8A%E8%B7%AF%E5%87%BA%E5%AE%B6%E7%AD%86%E8%A8%98/%E7%AD%86%E8%A8%98-%E9%80%8F%E9%81%8E-jwt-%E5%AF%A6%E4%BD%9C%E9%A9%97%E8%AD%89%E6%A9%9F%E5%88%B6-2e64d72594f8\">[筆記] 透過 JWT 實作驗證機制</a></li>\n<li><a href=\"https://5xruby.tw/posts/what-is-jwt/\">是誰在敲打我窗？什麼是 JWT ？</a></li>\n</ul>\n",
      "date_published": "2020-10-31T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2020/conan-build-and-manage-c-cpp-artifacts/",
      "url": "https://blog.kenwsc.com/posts/2020/conan-build-and-manage-c-cpp-artifacts/",
      "title": "Conan：建置並管理 C/C++ 的產出物",
      "content_html": "<p><a href=\"/posts/2020/use-conan-to-manage-c-package\">以前</a>我們討論過如何在 C/C++ 的專案中，使用 Conan 管理第三方套件。當開發應用程式時，只要用 Conan 就能引入現成的函式庫；但如果角色轉換，開發的不是應用程式，而是函式庫，為方便他人引用，就需要將函式庫打包成 Conan Package，並上傳到 Server。在常見的開發情境中，開發者既需要引用別人的函式庫，也期待自己的函式庫能讓別人引用。</p>\n<p>本文會講解如何編寫 Conan 的 Recipe，打包 C/C++ 的函式庫，並在實際的應用程式中引用。</p>\n<p>需要 Clone 程式碼的，可以到<a href=\"https://github.com/ken00535/c-cpp-medium-example\">這裡</a>。</p>\n<h2 id=\"create-conan-project\"><a class=\"direct-link\" href=\"#create-conan-project\">#</a> Create Conan Project</h2>\n<p>既然要打包程式，就需要先建立起專案</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> conan-recipe <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> conan-recipe</code></pre>\n<p>依照<a href=\"https://docs.conan.io/en/latest/creating_packages/getting_started.html\">官方說明</a>，可以用</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">conan new hello/0.0.1 -t</code></pre>\n<p>來建立專案，hello/0.0.1 是套件名稱/版本。-t 是建立 test_package，後面可以用來測試。</p>\n<p>下完指令後，目錄變成</p>\n<pre><code>conan-recipe\n├── test_package\n│   ├── CMakeLists.txt\n│   ├── conanfile.py\n│   └── example.cpp\n├── conanfile.py\n└── README.md\n</code></pre>\n<p>其中 conanfile 是 Recipe，負責用來描述 Package、建置 Library、打包 Package。Recipe 是食譜的意思，Conan 會依照 Recipe 中的描述，來烹煮程式碼。</p>\n<p>test_package 是測試用的資料夾，現在還用不到，等到 Recipe 的工作都完成後，會再回頭來看。</p>\n<h2 id=\"prepare-source-code\"><a class=\"direct-link\" href=\"#prepare-source-code\">#</a> Prepare Source Code</h2>\n<p>用 editor 打開 <code>conanfile.py</code>，前半段是</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> conans <span class=\"token keyword\">import</span> ConanFile<span class=\"token punctuation\">,</span> CMake<span class=\"token punctuation\">,</span> tools<br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloConan</span><span class=\"token punctuation\">(</span>ConanFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    name <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><br>    version <span class=\"token operator\">=</span> <span class=\"token string\">\"0.0.1\"</span><br>    license <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;Put the package license here>\"</span><br>    author <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;Put your name here> &lt;And your email here>\"</span><br>    url <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;Package recipe repository url here, for issues about the package>\"</span><br>    description <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;Description of Hello here>\"</span><br>    topics <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;Put some tag here>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;here>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;and here>\"</span><span class=\"token punctuation\">)</span><br>    settings <span class=\"token operator\">=</span> <span class=\"token string\">\"os\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"compiler\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"build_type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"arch\"</span><br>    options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"shared\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><br>    default_options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"shared\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">}</span><br>    generators <span class=\"token operator\">=</span> <span class=\"token string\">\"cmake\"</span><br>    <br>    <span class=\"token keyword\">def</span> <span class=\"token function\">source</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        self<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">\"git clone [https://github.com/conan-io/hello.git](https://github.com/conan-io/hello.git)\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Conan 是用 ConanFile Class 來描述需要的動作。要編寫一個 Recipe，就要創建一個 Class，繼承 ConanFile，並更改其中的 Field</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloConan</span><span class=\"token punctuation\">(</span>ConanFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    name <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></code></pre>\n<p>Field 依照自己的需求，填入 license、author、url、description 等描述，這些欄位用來告知使用者套件資訊。</p>\n<p>值得注意的是 source 這個 method，它用於創建原始碼環境，當原始碼跟 Recipe 在不同專案時很好用，例如，範例用的 hello 專案是放置於 conan 的 Git Repository，因此可以用</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">source</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    self<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">\"git clone [https://github.com/conan-io/hello.git](https://github.com/conan-io/hello.git)\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>從 Repository Clone 下來建立，建立原始碼的資料夾。</p>\n<p>Recipe 的 information 跟 source 寫好後，執行命令，call source method</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">conan <span class=\"token builtin class-name\">source</span> <span class=\"token builtin class-name\">.</span> --source-folder<span class=\"token operator\">=</span>source</code></pre>\n<p>. 是 Recipe 所在的目錄， — source-folder 是要創建的 source 資料夾名稱。</p>\n<p>專案目錄會變成</p>\n<pre><code>conan-recipe\n├── source\n│   └── hello\n│       └── ...\n├── test_package\n│   ├── CMakeLists.txt\n│   ├── conanfile.py\n│   └── example.cpp\n├── conanfile.py\n└── README.md\n</code></pre>\n<p>hello 已經從 GitHub 上 Clone 下來，放置於 source 資料夾。</p>\n<h2 id=\"build-library\"><a class=\"direct-link\" href=\"#build-library\">#</a> Build Library</h2>\n<p>有原始碼後，緊接著來建置函式庫。</p>\n<p>Conan Recipe 有支援幾款建置工具，如 CMake、MSBuild，如果 Source Code 內還沒有建置配置，建議可以用 <a href=\"/posts/2020/use-cmake-to-build-cross-platform-application\">CMake</a>，跨平台兼容性更佳。</p>\n<p>hello 專案中已經有 CMakeList.txt，因此使用 CMake 為建置工具，修改 <code>conanfile.py</code>，加入 build method，該 method 用於描述 build 的方式</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> conans <span class=\"token keyword\">import</span> ConanFile<span class=\"token punctuation\">,</span> CMake<span class=\"token punctuation\">,</span> tools<br><span class=\"token comment\"># ...</span><br><span class=\"token keyword\">def</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    cmake <span class=\"token operator\">=</span> CMake<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><br>    cmake<span class=\"token punctuation\">.</span>configure<span class=\"token punctuation\">(</span>source_folder<span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><br>    cmake<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>執行 conan install 命令，將 conan 配置輸出到 build 資料夾，方便 CMake 引用</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">conan <span class=\"token function\">install</span> <span class=\"token builtin class-name\">.</span> --install-folder<span class=\"token operator\">=</span>build</code></pre>\n<p>. 是 Recipe 所在的目錄， — install-folder 配置要輸出的資料夾名稱。</p>\n<p>專案目錄變成</p>\n<pre><code>conan-recipe\n├── source\n│   └── hello\n│       └── ...\n├── build\n│   └── ...\n├── test_package\n│   ├── CMakeLists.txt\n│   ├── conanfile.py\n│   └── example.cpp\n├── conanfile.py\n└── README.md\n</code></pre>\n<p>在 build 資料夾進行建置，call build method</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">conan build <span class=\"token builtin class-name\">.</span> --source-folder<span class=\"token operator\">=</span>source --build-folder build</code></pre>\n<p>產出函式庫跟應用程式</p>\n<pre><code>conan-recipe\n├── source\n│   └── hello\n│       └── ...\n├── build\n│   ├── bin\n│   │   └── greet\n│   ├── lib\n│   │   └── libhello.a\n│   └── ...\n├── test_package\n│   ├── CMakeLists.txt\n│   ├── conanfile.py\n│   └── example.cpp\n├── conanfile.py\n└── README.md\n</code></pre>\n<p>試著執行看看</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">~/git/medium-example-c-cpp/conan-recipe$ ./build/bin/greet <br>Hello World Release<span class=\"token operator\">!</span></code></pre>\n<h2 id=\"package-library\"><a class=\"direct-link\" href=\"#package-library\">#</a> Package Library</h2>\n<p>建置成功後，下步就是打包，回頭看 <code>conanfile.py</code> 的 package method</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">package</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    self<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token string\">\"*.h\"</span><span class=\"token punctuation\">,</span> dst<span class=\"token operator\">=</span><span class=\"token string\">\"include\"</span><span class=\"token punctuation\">,</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><br>    self<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token string\">\"*hello.lib\"</span><span class=\"token punctuation\">,</span> dst<span class=\"token operator\">=</span><span class=\"token string\">\"lib\"</span><span class=\"token punctuation\">,</span> keep_path<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><br>    self<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token string\">\"*.dll\"</span><span class=\"token punctuation\">,</span> dst<span class=\"token operator\">=</span><span class=\"token string\">\"bin\"</span><span class=\"token punctuation\">,</span> keep_path<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><br>    self<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token string\">\"*.so\"</span><span class=\"token punctuation\">,</span> dst<span class=\"token operator\">=</span><span class=\"token string\">\"lib\"</span><span class=\"token punctuation\">,</span> keep_path<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><br>    self<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token string\">\"*.dylib\"</span><span class=\"token punctuation\">,</span> dst<span class=\"token operator\">=</span><span class=\"token string\">\"lib\"</span><span class=\"token punctuation\">,</span> keep_path<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><br>    self<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token string\">\"*.a\"</span><span class=\"token punctuation\">,</span> dst<span class=\"token operator\">=</span><span class=\"token string\">\"lib\"</span><span class=\"token punctuation\">,</span> keep_path<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></code></pre>\n<p>指令很單純，將特定副檔名的檔案放到指定資料夾</p>\n<p>執行方式也很簡單</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">conan package <span class=\"token builtin class-name\">.</span> --source-folder<span class=\"token operator\">=</span>source --build-folder build --package-folder<span class=\"token operator\">=</span>package</code></pre>\n<p>. 是 Recipe 所在的目錄， — source-folder 是原始碼所在目錄； — build-folder 是建置目錄； — package-folder 是打包目錄。</p>\n<p>確認打包內容</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">~/git/medium-example-c-cpp/conan-recipe$ tree ./package/<br>./package<br>├── conaninfo.txt<br>├── conanmanifest.txt<br>├── include<br>│   └── hello.h<br>└── lib<br>    └── libhello.a</code></pre>\n<p>關於不同目錄間的關係，可以參照下圖</p>\n<p><img src=\"/img/posts/2020/conan-build-and-manage-c-cpp-artifacts/conan-1.png\" alt=\"\"></p>\n<p>流程上是 source 到 build 到 package 的順序。</p>\n<h2 id=\"export\"><a class=\"direct-link\" href=\"#export\">#</a> Export</h2>\n<p>如前一個步驟顯示的，Conan 在本地有個 cache 資料夾，用來放拉下來的檔案與原始碼。要發佈的套件也會聚合到該資料夾中，再使用指令發佈。將套件由專案複製到 cache 資料夾的動作，稱為 export。</p>\n<p>既然已經 Build 好 Library，也打包好了，就可以將它 export 到 cache，用</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">conan export-pkg <span class=\"token builtin class-name\">.</span> hello/0.0.1@demo/testing --package-folder<span class=\"token operator\">=</span>./package --force</code></pre>\n<p>conan 會輸出</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">Exporting package recipe<br>hello/0.0.1@demo/testing: A new conanfile.py version was exported<br>hello/0.0.1@demo/testing: Folder: /home/ken/.conan/data/hello/0.0.1/demo/testing/export<br>hello/0.0.1@demo/testing: Exported revision: 462c799e9492d2bb12f798dbb0221759<br>hello/0.0.1@demo/testing: Forced build from <span class=\"token builtin class-name\">source</span><br>Packaging to 0ab9fcf606068d4347207cc29edd400ceccbc944<br>hello/0.0.1@demo/testing: Exporting to cache existing package from user folder<br>hello/0.0.1@demo/testing: Package folder /home/ken/.conan/data/hello/0.0.1/demo/testing/package/0ab9fcf606068d4347207cc29edd400ceccbc944<br>hello/0.0.1@demo/testing: Packaged <span class=\"token number\">1</span> <span class=\"token string\">'.h'</span> file: hello.h<br>hello/0.0.1@demo/testing: Packaged <span class=\"token number\">1</span> <span class=\"token string\">'.a'</span> file: libhello.a<br>hello/0.0.1@demo/testing: Package <span class=\"token string\">'0ab9fcf606068d4347207cc29edd400ceccbc944'</span> created<br>hello/0.0.1@demo/testing: Created package revision da06ef091676ea8e2f9b2348cf6c151b</code></pre>\n<p>其中</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">/home/ken/.conan/data/hello/0.0.1/demo/testing/package/0ab9fcf606068d4347207cc29edd400ceccbc944</code></pre>\n<p>是輸出路徑。</p>\n<h2 id=\"test-package\"><a class=\"direct-link\" href=\"#test-package\">#</a> Test Package</h2>\n<p>還記得前面有個 test_package 嗎？現在可以輪到它上場了。</p>\n<p>雖然已經將 package export 到 local cache 了，但輸出的內容是否正確？能不能被用於應用程式建置？這些都需要測試。普通的測法是直接在應用專案中執行，如果能成功建置，跑起來也沒問題，就可以認為 export 正確。</p>\n<p>而 Conan 將這步驟整合到 test_package 資料夾中，該資料夾可以當成是一個正式的應用專案，它的內容是</p>\n<pre><code>test_package/\n├── CMakeLists.txt\n├── conanfile.py\n└── example.cpp\n</code></pre>\n<p>其中 <code>conanfile.py</code> 不是用於打包，而是用來建置並測試專案。example.cpp 是專案主要原始碼，由開發者自行編寫，內容通常會引用 Library 並輸出，好觀察行為是否正常。</p>\n<p>先看 example.cpp</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"hello.h\"</span></span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>引用 hello.h，並使用 function hello()。這些是剛剛打包的 package 內容。</p>\n<p>再來看 <code>conanfile.py</code></p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> os<br><br><span class=\"token keyword\">from</span> conans <span class=\"token keyword\">import</span> ConanFile<span class=\"token punctuation\">,</span> CMake<span class=\"token punctuation\">,</span> tools<br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloTestConan</span><span class=\"token punctuation\">(</span>ConanFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    settings <span class=\"token operator\">=</span> <span class=\"token string\">\"os\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"compiler\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"build_type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"arch\"</span><br>    generators <span class=\"token operator\">=</span> <span class=\"token string\">\"cmake\"</span><br><br>    <span class=\"token keyword\">def</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        cmake <span class=\"token operator\">=</span> CMake<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><br>        cmake<span class=\"token punctuation\">.</span>configure<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        cmake<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">def</span> <span class=\"token function\">imports</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        self<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token string\">\"*.dll\"</span><span class=\"token punctuation\">,</span> dst<span class=\"token operator\">=</span><span class=\"token string\">\"bin\"</span><span class=\"token punctuation\">,</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"bin\"</span><span class=\"token punctuation\">)</span><br>        self<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token string\">\"*.dylib*\"</span><span class=\"token punctuation\">,</span> dst<span class=\"token operator\">=</span><span class=\"token string\">\"bin\"</span><span class=\"token punctuation\">,</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"lib\"</span><span class=\"token punctuation\">)</span><br>        self<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token string\">'*.so*'</span><span class=\"token punctuation\">,</span> dst<span class=\"token operator\">=</span><span class=\"token string\">'bin'</span><span class=\"token punctuation\">,</span> src<span class=\"token operator\">=</span><span class=\"token string\">'lib'</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> tools<span class=\"token punctuation\">.</span>cross_building<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>            os<span class=\"token punctuation\">.</span>chdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"bin\"</span><span class=\"token punctuation\">)</span><br>            self<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">\".%sexample\"</span> <span class=\"token operator\">%</span> os<span class=\"token punctuation\">.</span>sep<span class=\"token punctuation\">)</span></code></pre>\n<p>在 imports 中，引入依賴的 Library，放到 Build 下的 bin，好讓編譯時可以連結。</p>\n<p>test 則是執行 bin 下建置完成的檔案。</p>\n<p>執行命令，call test method，讓 conan 幫我們測試</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">conan <span class=\"token builtin class-name\">test</span> test_package hello/0.0.1@demo/testing<br><span class=\"token punctuation\">..</span>.<br><span class=\"token punctuation\">..</span>.<br><span class=\"token punctuation\">[</span> <span class=\"token number\">50</span>%<span class=\"token punctuation\">]</span> Building CXX object CMakeFiles/example.dir/example.cpp.o<br><span class=\"token punctuation\">[</span><span class=\"token number\">100</span>%<span class=\"token punctuation\">]</span> Linking CXX executable bin/example<br><span class=\"token punctuation\">[</span><span class=\"token number\">100</span>%<span class=\"token punctuation\">]</span> Built target example<br>hello/0.0.1@demo/testing <span class=\"token punctuation\">(</span>test package<span class=\"token punctuation\">)</span>: Running test<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>Hello World Release<span class=\"token operator\">!</span></code></pre>\n<p>test 命令做了哪些事情呢？具體來講，會設定配置、引入需要的 package、輸出配置檔、建置程式、執行程式，跟正常的專案沒什麼不同，只差在它的目的是為了驗證 package 是否正常。</p>\n<p>在執行後，可以看到出現</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">Hello World Release<span class=\"token operator\">!</span></code></pre>\n<p>跟前面建置的函式庫內容一致。</p>\n<h2 id=\"upload\"><a class=\"direct-link\" href=\"#upload\">#</a> Upload</h2>\n<p>最後就是把 export 的檔案，由 local cache 上傳到 server，好讓其他人也能享用啦。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">conan upload hello/0.0.1@demo/testing --all -r<span class=\"token operator\">=</span>my_local_server</code></pre>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p><code>conanfile.py</code> 畢竟是 Recipe，跟其它 Recipe 的內容大同小異，都是用於描述如何建置、如何打包。比較特別的是，<code>conanfile.py</code> 有時可以用來單純建置，跟 Makefile 很類似，使用時要注意場合，否則容易弄混兩者的角色。</p>\n<p>conanfile 的原理不複雜，實務上最大的麻煩，反而是寫 build method 的時候，能不能找到正確的 build 法。畢竟 C/C++ 有很多舊專案，技術文件不齊全，有時只有原始碼，連 auto-tool 都沒有，需要開發者自行補齊。Conan 算是在原有的 C/C++ 上再疊上一層，用現代化的套件管理技術賦予 C/C++ 更好的可用性。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://conan.io/\">Conan Official Website</a></li>\n<li><a href=\"http://blog.guorongfei.com/2018/04/23/conan-tutorial/\">C++包管理器 — — conan</a></li>\n<li><a href=\"https://blog.simplypatrick.com/posts/2018/03-12-c++-conan/\">C++ 套件管理: 使用 Conan</a></li>\n<li><a href=\"https://docs.conan.io/en/latest/creating_packages/getting_started.html\">doc.conan.io</a></li>\n</ul>\n",
      "date_published": "2020-10-11T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2020/reveal-js-a-presentation-framework/",
      "url": "https://blog.kenwsc.com/posts/2020/reveal-js-a-presentation-framework/",
      "title": "用網頁製作你的簡報：reveal.js",
      "content_html": "<p>試著想像一個情境，你是一名工程師，需要跟他人分享你的創意，你希望雙方認知建立在相同的基礎上，當說到「狗」時，聽眾明白你指的是拉不拉多，而不是吉娃娃。投影片是個簡單有效的同步工具，但 Windows 的 PowerPoint 有幾個惱人的問題：</p>\n<ul>\n<li>僅具備簡單畫面編輯工具</li>\n<li>版型固定</li>\n<li>沒有 Quote</li>\n<li>沒有 Code Section</li>\n<li>沒有 Syntax Highlight</li>\n</ul>\n<p>投影片應該要像攝影機，講者使用它來專注說故事。而 PowerPoint 設計的目標，是讓不具備程式能力的人，也能將畫面放上電腦。它有基礎的視覺設計能力，但並不足以應付進階應用。</p>\n<p>reveal.js 是以 HTML 為基礎的簡報框架，藉由 CSS 跟 HTML 分離，講者可以更專注在內容，將設計交由第三方庫來處理。由於本質上是由 HTML、CSS 跟 JavaScript 組成，reveal.js 可以成為網站，只要使用者能上網，就能進行播放。本文會用 reveal.js 來設計簡報，嘗試體驗它的魅力。</p>\n<p>需要 Clone 程式碼的，可以到<a href=\"https://github.com/ken00535/nodejs-medium-example\">這裡</a>。</p>\n<h2 id=\"install-reveal.js\"><a class=\"direct-link\" href=\"#install-reveal.js\">#</a> Install reveal.js</h2>\n<p>依照<a href=\"https://revealjs.com/installation/\">官方說明</a>，reveal.js 有三個安裝方式</p>\n<blockquote>\n<p>We provide three different ways to install reveal.js depending on your use case and technical experience.</p>\n<p>The <a href=\"https://revealjs.com/installation/#basic-setup\">basic setup</a> is the easiest way to get started. No need to set up any build tools.</p>\n<p>The <a href=\"https://revealjs.com/installation/#full-setup\">full setup</a> gives you access to the build tools needed to make changes to the reveal.js source code. It includes a web server which is required if you want to load external Markdown files (the basic setup paired with your own choice of local web server works too).</p>\n<p>If you want to use reveal.js as a dependency in your project, you can <a href=\"https://revealjs.com/installation/#installing-from-npm\">install from npm</a>.</p>\n</blockquote>\n<p>JavaScript 是手稿語言，下載檔案等同完成安裝。對普通使用者來說，Basic Setup 已經夠用，習慣使用 Git 的人，也可以 Clone 整個專案，再依照自己的需求修改。</p>\n<p>我會建議將 reveal.js 的檔案複製到自己的專案，結構如下</p>\n<pre><code>revealjs\n├── dist\n├── plugin\n├── index.html\n├── package.json\n└── README.md\n</code></pre>\n<p>dist 跟 plugin 是 reveal.js 的資源，可以看成是程式主體，在執行時會引用。index.html 是投影片本體。在 reveal.js 的設計中，使用者只需要修改 index.html，其他的事會由 reveal.js 的庫來處理。</p>\n<h2 id=\"establish-http-server\"><a class=\"direct-link\" href=\"#establish-http-server\">#</a> Establish HTTP Server</h2>\n<p>reveal.js 可以用瀏覽器開啟，但如果想將簡報變成網站，還是需要 http server 來提供服務。我們用 node.js 來建立 server，在專案目錄下新增啟動腳本 index.js</p>\n<pre><code>revealjs\n├── dist\n├── plugin\n├── index.html\n├── index.js\n├── package.json\n└── README.md\n</code></pre>\n<p>內容是</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// setting user-defined type</span><br><span class=\"token keyword\">const</span> mimeTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>  html<span class=\"token operator\">:</span> <span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">,</span><br>  jpeg<span class=\"token operator\">:</span> <span class=\"token string\">\"image/jpeg\"</span><span class=\"token punctuation\">,</span><br>  jpg<span class=\"token operator\">:</span> <span class=\"token string\">\"image/jpg\"</span><span class=\"token punctuation\">,</span><br>  png<span class=\"token operator\">:</span> <span class=\"token string\">\"image/png\"</span><span class=\"token punctuation\">,</span><br>  js<span class=\"token operator\">:</span> <span class=\"token string\">\"text/javascript\"</span><span class=\"token punctuation\">,</span><br>  css<span class=\"token operator\">:</span> <span class=\"token string\">\"text/css\"</span><span class=\"token punctuation\">,</span><br>  mp4<span class=\"token operator\">:</span> <span class=\"token string\">\"video/mp4\"</span><span class=\"token punctuation\">,</span><br>  woff<span class=\"token operator\">:</span> <span class=\"token string\">\"text/woff\"</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// create http server</span><br><span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">var</span> uri <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">var</span> fileName <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">unescape</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">var</span> stats<span class=\"token punctuation\">;</span><br><br>  <span class=\"token comment\">// check if the file is enter</span><br>  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>    stats <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">lstatSync</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Content-type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/plain\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"404 Not Found!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token comment\">// get the file type to check is html type</span><br>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stats<span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> mineType <span class=\"token operator\">=</span> mimeTypes<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Content-type\"</span><span class=\"token operator\">:</span> mineType <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">var</span> fileStream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    fileStream<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Content-type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/plain\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"500 Internal Error\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>一行一行看。</p>\n<p>簡報檔內可能包含不同的媒體，像是 HTML、CSS、JS，用 mimeTypes 來告知客戶端報文類別</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mimeTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>  html<span class=\"token operator\">:</span> <span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">,</span><br>  jpeg<span class=\"token operator\">:</span> <span class=\"token string\">\"image/jpeg\"</span><span class=\"token punctuation\">,</span><br>  jpg<span class=\"token operator\">:</span> <span class=\"token string\">\"image/jpg\"</span><span class=\"token punctuation\">,</span><br>  png<span class=\"token operator\">:</span> <span class=\"token string\">\"image/png\"</span><span class=\"token punctuation\">,</span><br>  js<span class=\"token operator\">:</span> <span class=\"token string\">\"text/javascript\"</span><span class=\"token punctuation\">,</span><br>  css<span class=\"token operator\">:</span> <span class=\"token string\">\"text/css\"</span><span class=\"token punctuation\">,</span><br>  mp4<span class=\"token operator\">:</span> <span class=\"token string\">\"video/mp4\"</span><span class=\"token punctuation\">,</span><br>  woff<span class=\"token operator\">:</span> <span class=\"token string\">\"text/woff\"</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>建立 http server，並解析客戶端輸入的 URL，每個 URL 可看成對應到不同的檔案，伺服器收到 URL 的要求後，會將檔案回給客戶端</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">var</span> uri <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">var</span> fileName <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">unescape</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">var</span> stats<span class=\"token punctuation\">;</span></code></pre>\n<p>如果檔案不在，回覆 404 Not Found</p>\n<pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token comment\">//check if the file is enter</span><br>  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>    stats <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">lstatSync</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Content-type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/plain\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"404 Not Found!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span></code></pre>\n<p>如果檔案存在，回覆 200，報文是檔案內容</p>\n<pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token comment\">//get the file type to check is html type</span><br>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stats<span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> mineType <span class=\"token operator\">=</span> mimeTypes<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Content-type\"</span><span class=\"token operator\">:</span> mineType <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">var</span> fileStream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    fileStream<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Content-type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/plain\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"500 Internal Error\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span></code></pre>\n<p>監聽 Port 8888，用 8888 來提供服務</p>\n<pre class=\"language-js\"><code class=\"language-js\">server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>執行</p>\n<pre class=\"language-js\"><code class=\"language-js\">node index<span class=\"token punctuation\">.</span>js</code></pre>\n<p>伺服器就開好了。</p>\n<h2 id=\"first-page-and-vertical-slides\"><a class=\"direct-link\" href=\"#first-page-and-vertical-slides\">#</a> First Page and Vertical Slides</h2>\n<p>有伺服器後，來建立投影片。如前面講的，投影片本體是 index.html，修改它</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>reveal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slides<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">></span></span><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[https://nodejs.org/en/](https://nodejs.org/en/)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[.](https://upload.wikimedia.org/wikipedia/commons/d/d9/Node.js_logo.svg)..<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demo-logo<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>reveal.js ...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>修改處是 body 內的 tag section，每個 tag section 可以當成一頁投影片。在上方程式碼中，section 內加入了一則連結 <code>&lt;a&gt;</code>；一張圖片 <code>&lt;img&gt;</code>；還有一段文字 <code>&lt;p&gt;</code>。</p>\n<p>啟動瀏覽器，輸入 <a href=\"hostname:port\">hostname:port</a>/index.html，看到投影片</p>\n<p><img src=\"/img/posts/2020/reveal-js-a-presentation-framework/reveal-1.png\" alt=\"\"></p>\n<p>右下角箭頭代表可以向右翻頁。</p>\n<p>reveal.js 除單純向右翻頁外，也支援向下翻頁，讓使用者能用二維的角度，來聚合他要講的內容。只要在 section 中再加入 section，就有 vertical page 的效果</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Vertical Slides<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>We can use vertical slides.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>navigate-down<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>r-frame<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">...</span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Down arrow<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Vertical Slides<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>This is page 2.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>navigate-up<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>r-frame<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\">... alt=</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token attr-name\">Up</span> <span class=\"token attr-name\">arrow\"</span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>加入兩頁 vertical page，效果是</p>\n<p><img src=\"/img/posts/2020/reveal-js-a-presentation-framework/reveal-2.png\" alt=\"\"></p>\n<p><img src=\"/img/posts/2020/reveal-js-a-presentation-framework/reveal-3.png\" alt=\"\"></p>\n<p>右下角顯示能向上或向下翻頁。</p>\n<h2 id=\"syntax-highlight-and-background\"><a class=\"direct-link\" href=\"#syntax-highlight-and-background\">#</a> Syntax Highlight and Background</h2>\n<p>工程師常需要跟他人講解程式碼，因此少不了語法凸顯，reveal.js 支援語法凸顯的寫法是</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">data-auto-animate</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Pretty Code<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pre</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>code</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hljs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-trim</span> <span class=\"token attr-name\">data-line-numbers</span><span class=\"token punctuation\">></span></span><br>      import React, { useState } from 'react';<br>      function Example() {<br>        const [count, setCount] = useState(0);<br>        return (<br>          ...<br>        );<br>      }<br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>code</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pre</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Code syntax highlighting courtesy of highlight.js.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>hljs 是跟 Syntax Highlight 相關的 style，data-line-numbers 用於顯示行號。效果是</p>\n<p><img src=\"/img/posts/2020/reveal-js-a-presentation-framework/reveal-4.png\" alt=\"\"></p>\n<p>這絕對是 PowerPoint 辦不到的事情。</p>\n<p>當然，也可以修改背景</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">data-background</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[kazetachinu003.jpg](http://www.ghibli.jp/gallery/kazetachinu003.jpg)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><br>        background-color: rgba(0, 0, 0, 0.7);<br>        color: #fff;<br>        padding: 20px;<br>    <span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Image<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>用 data-background 來設定背景，用 div 建立區塊來放置文字，區塊的背景顏色是黑色，透明度 70%。效果是</p>\n<p><img src=\"/img/posts/2020/reveal-js-a-presentation-framework/reveal-5.png\" alt=\"\"></p>\n<p>是不是簡單大方！</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>除前面提到的功能外，reveal.js 還有許多功能，可以自行挖掘。reveal.js 不僅支援 Chrome、Firefox 等主流瀏覽器，還支援 RWD，更可以進行各種細微調整，如果需要特殊動畫，只需要引入相關的 JavaScript 函式庫即可。對開發者來講，它不像 PowerPoint 是面向終端的產品，而是將工具交由開發者，由開發者自行配置需要的效果。</p>\n<p>我認為對商務簡報來講，因為有保存與傳播資訊的需求，可能還是要使用 PowerPoint 之類的傳統工具；但在技術簡報的情境裡，reveal.js 等 HTML 簡報框架能賦予開發者更大的自由，具備更好的使用者體驗。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://blog.gtwang.org/useful-tools/reveal-js-presentation-html5-framework/\">reveal.js：用網頁製作簡報的 HTML5 架構</a></li>\n<li><a href=\"https://revealjs.com/\">reveal.js</a></li>\n</ul>\n",
      "date_published": "2020-10-03T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2020/go-generic-alter-plan-assert-and-codegen/",
      "url": "https://blog.kenwsc.com/posts/2020/go-generic-alter-plan-assert-and-codegen/",
      "title": "Go 的泛型替代方案：型別斷言與代碼生成",
      "content_html": "<p>用函數式編程(Functional Programming)的風格寫程式時，會常常重複使用一些通用函式，舉個例子，假設有個 array，開發者需要從該 array 中篩選符合條件的元素，重新組成新的 array。合理的情況是，如果有個 filter 函式，只需要設定條件，剩下的事情都能交給語言處理。</p>\n<p>Golang 的 append 有點這味道，類似 JavaScript 的 push，能新增 slice 中的元素，但 Golang 畢竟不是徹底的函數式語言，內建函式庫中沒有 filter、map、reduce 等等 array 常用的函式。如果想要自行實現，語言的強型別系統會要求開發者在使用前告知對象型別，這等於是對不同的型別都要實現幾乎相同的函式，可想而知不切實際。</p>\n<p>同樣是強型別語言，C++ 或 C# 在面對這問題時，是靠著泛型(Generic)來解決；在 <a href=\"https://blog.golang.org/generics-next-step\">The Next Step for Generics</a> 這篇文章中，Golang 有公開泛型的草稿，但至少到 1.15 為止，實務上仍需要仰賴別的方式來達到接近的效果。本篇會分別用型別斷言(type assertion)跟 genny 這套 Golang 開源函式庫，來試著實現一些基本函式，看看 Golang 如何處理泛型問題。</p>\n<p>需要 Clone 程式碼的，可以到<a href=\"https://github.com/ken00535/golang-medium-example\">這裡</a>。</p>\n<h2 id=\"establish-a-filter-function\"><a class=\"direct-link\" href=\"#establish-a-filter-function\">#</a> Establish a Filter Function</h2>\n<p>專案結構如下</p>\n<pre><code>project\n├── cmd\n│   └── genny\n│       └── main.go\n├── pkg\n│   └── genny\n│       └── genny.go\n├── scripts\n├── go.mod\n├── Makefile\n└── README.md\n</code></pre>\n<p>先來看 pkg 內的 genny.go</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> genny<br><br><span class=\"token comment\">// Filter filter slice</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span>source <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> callback <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> out <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><br>    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> element <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> source <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    out <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> out<br><span class=\"token punctuation\">}</span></code></pre>\n<p>我們的目標是設計 Filter 函式，該函式可用來篩選 slice。使用者傳入 slice 跟 callback function，遍歷 slice，使用 callback 看結果。如果 callback 結果是 true，代表 element 符合篩選的條件，將 element 加入新的 slice，最後將新的 slice 傳送回去。</p>\n<p>因為 Golang 是強型別語言，在設計函式時需要宣告參數型別，在上面的設計中，型別是 int，這也代表該函式只能用於 int[]。</p>\n<p>來看 cmd 中的使用方式</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"example/pkg/genny\"</span><br>    <span class=\"token string\">\"fmt\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    num <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">}</span><br>    <span class=\"token comment\">// filter by static filter</span><br>    num <span class=\"token operator\">=</span> genny<span class=\"token punctuation\">.</span><span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>element <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> element <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>有個 slice，其中包含 {1,3,5,7,9,11}，判斷條件是 element 小於 6，就將它放到新的 slice 中。執行結果是</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP:~/git/medium-example-golang$ ./bin/genny <br><span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></code></pre>\n<p>這樣就能完成 slice 的篩選。</p>\n<h2 id=\"using-type-assertion\"><a class=\"direct-link\" href=\"#using-type-assertion\">#</a> Using Type Assertion</h2>\n<p>如前面提到的，Filter 函式因為需要宣告型別，只能用於 int[]。實際情境裡，開發者可能會需要用到 string[]、float32[]，或者是自己定義的 struct[]。為每個型別個別開發 Filter，會造成大量重複代碼，修改時也要一個一個改，很花功夫。</p>\n<p>Golang 可以用型別斷言來解決這問題。在 Golang 中，所有型別的基本型別都是 interface{}，類似 C 語言的 void。interface{} 可以容納任意型別，同時它有 var.(type)，讓開發者可以動態判斷變數型別。</p>\n<p>修改 pkg，新增 FilterWithInterface</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// FilterWithInterface filter slice</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">FilterWithInterface</span><span class=\"token punctuation\">(</span>source <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> callback <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> outInt <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><br>    <span class=\"token keyword\">var</span> outFloat32 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float32</span><br>    <span class=\"token keyword\">switch</span> source<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> element <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> source<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">if</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                outInt <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>outInt<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">return</span> outInt<br>    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float32</span><span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> element <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> source<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">if</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                outFloat32 <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>outFloat32<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">return</span> outFloat32<br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>將引數型別改成 interface{}</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">switch</span> source<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><span class=\"token keyword\">case</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span><br><span class=\"token comment\">//...</span><br><span class=\"token keyword\">case</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float32</span><span class=\"token punctuation\">:</span><br><span class=\"token comment\">//...</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>用 source.(type) 取得 source 的型別，並用 switch case 來進行對應處理</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> element <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> source<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        outInt <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>outInt<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">return</span> outInt</code></pre>\n<p>對於 []int 的例子，在使用時用型別斷言，指定該型別是 []int。可以把型別斷言想像成是強制轉型，斷言後語言會用 []int 來處理該變數。要特別注意的是，由於是動態判斷，它會跳過編譯器靜態檢查，如果出現型別錯誤，不會在編譯期報警，而是要到執行期才會告知。儘管 interface{} 有更高的自由度，但也會增加除錯的代價。</p>\n<p>通常用型別斷言會搭配 switch 或斷言檢查，避免程式直接 panic，switch 前面看過了，而斷言檢查的語法是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> v<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> v<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">!</span>ok<span class=\"token punctuation\">{</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hey guys! you enter a wrong type!\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>ok 如果是 true，表示型別轉換正確；反之有錯誤。</p>\n<p>因為 pkg 修改了，cmd 也要有對應修改，改成</p>\n<pre class=\"language-go\"><code class=\"language-go\">num <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">}</span><br>num2 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float32</span><span class=\"token punctuation\">{</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11.0</span><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">var</span> out <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// filter by int filter</span><br>out <span class=\"token operator\">=</span> genny<span class=\"token punctuation\">.</span><span class=\"token function\">FilterWithInterface</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>element <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> element<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// filter by float filter</span><br>out <span class=\"token operator\">=</span> genny<span class=\"token punctuation\">.</span><span class=\"token function\">FilterWithInterface</span><span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>element <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span><br><span class=\"token keyword\">if</span> element<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">float32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>建立 2 個 slice，1 個是 int，1 個是 float32。可以看到 FilterWithInterface 能處理這兩個不同型別的 Case。</p>\n<h2 id=\"using-genny-to-implement\"><a class=\"direct-link\" href=\"#using-genny-to-implement\">#</a> Using genny to Implement</h2>\n<p>型別斷言的問題是會引入執行期錯誤，同時產生多餘的開銷。在 C++ 中，會用 template 來處理類似情況，例如</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span><br>T <span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span>T arr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">=</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>像這類可以處理泛用型別的語法，稱為泛型。</p>\n<p>因為要處理泛用型別，編譯時會需要做許多檢查，連帶會降低編譯速度，考量到這點，Golang 沒將泛型放進設計中。</p>\n<blockquote>\n<p>Generics may well be added at some point. We don’t feel an urgency for them.<br>\n…<br>\nGenerics are convenient but they come at a cost in complexity in the type system and run-time… Meanwhile, Go’s built-in maps and slices, plus the ability to use the empty interface to construct containers mean in many cases it is possible to write code that does what generics would enable, if less smoothly.</p>\n</blockquote>\n<p>至少在設計層面，Golang 建議用 interface{} 頂著。</p>\n<p>好的，官方沒有工具，但如果開發者還是想要泛型怎麼辦？genny 的設計思維是，開發者可以提供函式原型(proto-type)，再使用 Code Generator 依照原型產生函式。相對原本方案要開發者一個一個處理類型，genny 用工具自動生成，省掉手動時間。</p>\n<p>genny 的 GitHub 在<a href=\"https://github.com/cheekybits/genny\">這裡</a>。</p>\n<p>使用前，安裝 genny 的命令行工具</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go get github.com/cheekybits/genny</code></pre>\n<p>在 pkg 下新增 genny 的原型檔 source.go</p>\n<pre><code>project\n├── cmd\n│   └── genny\n│       └── main.go\n├── pkg\n│   └── genny\n│       ├── source.go\n│       └── genny.go\n├── scripts\n├── go.mod\n├── Makefile\n└── README.md\n</code></pre>\n<p>內容是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> genny<br><br><span class=\"token keyword\">import</span> <span class=\"token string\">\"github.com/cheekybits/genny/generic\"</span><br><br><span class=\"token comment\">// NOTE: this is how easy it is to define a generic type</span><br><span class=\"token keyword\">type</span> Something generic<span class=\"token punctuation\">.</span>Type<br><br><span class=\"token comment\">//FilterWithSomething filter Something type</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">FilterWithSomething</span><span class=\"token punctuation\">(</span>source <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Something<span class=\"token punctuation\">,</span> callback <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>Something<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Something <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> out <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Something<br>    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> element <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> source <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            out <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> out<br><span class=\"token punctuation\">}</span></code></pre>\n<p>引入 genny 專案</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"github.com/cheekybits/genny/generic\"</span></code></pre>\n<p>宣告泛用類型</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Something generic<span class=\"token punctuation\">.</span>Type</code></pre>\n<p>跟類型有關的地方，都改為 Something</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">//FilterWithSomething filter Something type</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">FilterWithSomething</span><span class=\"token punctuation\">(</span>source <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Something<span class=\"token punctuation\">,</span> callback <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>Something<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Something <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> out <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Something<br>    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> element <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> source <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            out <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> out<br><span class=\"token punctuation\">}</span></code></pre>\n<p>genny 產生程式碼時，會自動將關鍵字換掉，改為需要的類型。</p>\n<p>使用命令行來執行</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">genny -in ./pkg/genny/source.go -out ./pkg/genny/gencode.go gen <span class=\"token string\">\"Something=int,string,float32\"</span></code></pre>\n<p>-in 是輸入；-out 是輸出；gen 後面接要替換的關鍵字與類型，這邊將 Something 換成 int、string、float32。</p>\n<p>執行後產出 gencode.go，內容是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// This file was automatically generated by genny.</span><br><span class=\"token comment\">// Any changes will be lost if this file is regenerated.</span><br><span class=\"token comment\">// see [https://github.com/cheekybits/genny](https://github.com/cheekybits/genny)</span><br><br><span class=\"token keyword\">package</span> genny<br><br><span class=\"token comment\">//FilterWithInt filter int type</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">FilterWithInt</span><span class=\"token punctuation\">(</span>source <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> callback <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> out <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><br>    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> element <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> source <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            out <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> out<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">//FilterWithString filter string type</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">FilterWithString</span><span class=\"token punctuation\">(</span>source <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> callback <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> out <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><br>    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> element <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> source <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            out <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> out<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">//FilterWithFloat32 filter float32 type</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">FilterWithFloat32</span><span class=\"token punctuation\">(</span>source <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float32</span><span class=\"token punctuation\">,</span> callback <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">float32</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float32</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> out <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float32</span><br>    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> element <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> source <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            out <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> out<br><span class=\"token punctuation\">}</span></code></pre>\n<p>函式自動生成！得到 3 個新函式，FilterWithInt、FilterWithString、FilterWithFloat32。</p>\n<p>回去修改 cmd，改為</p>\n<pre class=\"language-go\"><code class=\"language-go\">out <span class=\"token operator\">=</span> genny<span class=\"token punctuation\">.</span><span class=\"token function\">FilterWithInt</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>element <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> element <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>跟 Step 1 用法相同，只是名稱變成 FilterWithInt。</p>\n<h2 id=\"add-go-generate\"><a class=\"direct-link\" href=\"#add-go-generate\">#</a> Add go generate</h2>\n<p>用 Code Gen 的問題是需要執行命令行，在協作專案中，開發者可能不知道同伴用哪些指令來產生程式碼，這些資訊應該要能納入版本管理，讓 Code Gen 有跡可循。這時可以用 go generate。</p>\n<p>go generate 是 Golang 內建的工具，它可以用來調用命令行指令，可以看成是 Golang 底下的 shell，用於協調 Golang 跟其他程式的互動。當執行 go generate 時，Golang 會去看專案底下的 .go 檔有沒有 go generate 的註解，如果有就依照註解來執行。</p>\n<p>具體來說，修改 pkg 的 source.go，加入</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> genny<br><br><span class=\"token comment\">// ...</span><br><br><span class=\"token comment\">//go:generate genny -in ./source.go -out ./gencode.go gen \"Something=int,string,float32\"</span><br><br><span class=\"token comment\">// ...</span><br><span class=\"token keyword\">type</span> Something generic<span class=\"token punctuation\">.</span>Type</code></pre>\n<p>在 shell 輸入</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go generate ./<span class=\"token punctuation\">..</span>.</code></pre>\n<p>Golang 讀到 go:generate 開頭的註解，就會執行後面的命令，如果像我一樣，習慣用 Make 來編譯的話，可以將 Makefile 改成</p>\n<pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token symbol\">all</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">{</span>OUT_DIR<span class=\"token punctuation\">}</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">{</span>FILES_OUT<span class=\"token operator\">:=</span>.exe<span class=\"token punctuation\">}</span><br><br><span class=\"token symbol\"><span class=\"token variable\">$</span>{OUT_DIR}/%</span><span class=\"token punctuation\">:</span><br>    go generate ./... <br><span class=\"token symbol\">    go build -o <span class=\"token variable\">$</span>(@) ./cmd/<span class=\"token variable\">$</span>(basename <span class=\"token variable\">$</span>{[@F](http</span><span class=\"token punctuation\">:</span>//twitter.com/F<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>在 go build 前執行 go generate，就能串起編譯流程。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>比較幾個方案，我自己是傾向用型別斷言。開發者調用函式時，不用思考需要用 FilterWithString 還是 FilterWithFloat32，看起來更直覺，也更接近 C++ 的泛型。相對的，缺點是不知道傳入的型別，容易引發執行期錯誤；genny 則是嘗試用 Golang 的基本語法，解決掉泛型的問題。</p>\n<p>嚴格說來，兩種解法都不能取代真正的泛型。在注重生產力的現代語言環境中，沒有泛型真的是件頗奇怪的事。我猜 Golang 看重編譯速度，應該還是跟 Monorepo 的管理方式有關？</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://blog.golang.org/generics-next-step\">The Next Step for Generics</a></li>\n<li><a href=\"https://golang.org/doc/faq#generics\">Frequently Asked Questions (FAQ)</a></li>\n<li><a href=\"https://github.com/cheekybits/genny\">https://github.com/cheekybits/genny</a></li>\n</ul>\n",
      "date_published": "2020-09-19T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2020/a-full-duplex-protocol-websocket/",
      "url": "https://blog.kenwsc.com/posts/2020/a-full-duplex-protocol-websocket/",
      "title": "雙向互動的即時訊息：Websocket 入門",
      "content_html": "<p>在 HTTP 設計之初，網路應用主要是交換文件，因此當提交訊息或更新訊息時，需要刷新整個頁面，這也導致大量 HTML 被重複傳輸，浪費使用頻寬。後來 AJAX 被提出，讓 HTTP 可以只取得想要的伺服端訊息，同時在沒有重新導向的情況下更新頁面，讓 HTTP 更符合現代網路應用情境。</p>\n<p>但是對需要互動的應用，像是聊天室、遊戲、即時狀態監控等等來說，如果使用 HTTP 傳遞訊息，則需要客戶端頻繁向伺服端輪詢(Polling)，有點像客戶端三不五時跟伺服端問說：「你有沒有新資料需要更新的啊？」可想而知會造成客戶端跟伺服端很大的負擔。比較理想的情況是，應該存在一個事件驅動模型，當伺服端有事件發生時，它會主動通知訂閱的客戶端，客戶端再進行更新，而這就是 WebSocket 這套通訊協定誕生的原因。</p>\n<p>Websocket 沒有限定語言，但為了簡化操作，後端可以用 node.js，好跟前端的 JavaScript 共用一套函式庫。本文中會使用 node.js 常見的後端框架 Express，並搭配 <a href=\"http://socket.io\">socket.io</a>，來建立前後端之間的 WebSocket 連線。</p>\n<p>想 Clone 程式碼的，可以到<a href=\"https://github.com/ken00535/nodejs-medium-example\">這裡</a>。</p>\n<h2 id=\"create-server\"><a class=\"direct-link\" href=\"#create-server\">#</a> Create Server</h2>\n<p>既然是網路應用，首先來建立 Server，node.js 的專案結構是</p>\n<pre><code>project\n├── public\n├── index.js\n└── README.md\n</code></pre>\n<p>初始化專案</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> init</code></pre>\n<p>npm 會問你一堆問題，通常按照預設來回答就好</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP-2R08VK6:~/git/medium-example-nodejs/socket-io$ <span class=\"token function\">npm</span> init<br>This utility will walk you through creating a package.json file.<br>It only covers the <span class=\"token function\">most</span> common items, and tries to guess sensible defaults.<br><br>See <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">npm</span> <span class=\"token builtin class-name\">help</span> json<span class=\"token variable\">`</span></span> <span class=\"token keyword\">for</span> definitive documentation on these fields<br>and exactly what they do.<br><br>Use <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>pkg<span class=\"token operator\">></span><span class=\"token variable\">`</span></span> afterwards to <span class=\"token function\">install</span> a package and<br>save it as a dependency <span class=\"token keyword\">in</span> the package.json file.<br><br>Press ^C at any <span class=\"token function\">time</span> to quit.<br>package name: <span class=\"token punctuation\">(</span>socket-io<span class=\"token punctuation\">)</span> <br>version: <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span>.0<span class=\"token punctuation\">)</span> <br>description: socket.io demo<br>entry point: <span class=\"token punctuation\">(</span>index.js<span class=\"token punctuation\">)</span> <br><span class=\"token builtin class-name\">test</span> command: <br><span class=\"token function\">git</span> repository: <br>keywords: <br>author: kenwschen<br>license: <span class=\"token punctuation\">(</span>ISC<span class=\"token punctuation\">)</span> MIT<br>About to <span class=\"token function\">write</span> to /home/ken/git/medium-example-nodejs/socket-io/package.json:<br><br><span class=\"token punctuation\">{</span><br>    <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"socket-io\"</span>,<br>    <span class=\"token string\">\"version\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1.0.0\"</span>,<br>    <span class=\"token string\">\"description\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"socket.io demo\"</span>,<br>    <span class=\"token string\">\"main\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"index.js\"</span>,<br>    <span class=\"token string\">\"scripts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token string\">\"test\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"echo <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>Error: no test specified<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> &amp;&amp; exit 1\"</span><br>    <span class=\"token punctuation\">}</span>,<br>    <span class=\"token string\">\"author\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"kenwschen\"</span>,<br>    <span class=\"token string\">\"license\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"MIT\"</span><br><span class=\"token punctuation\">}</span><br><br>Is this OK? <span class=\"token punctuation\">(</span>yes<span class=\"token punctuation\">)</span></code></pre>\n<p>回答完後，專案初始化完成。</p>\n<p>接著來安裝 express，這是一套 node.js 的 Web 框架，可以用來將不同的 URL 導向不同的資源（用專有名詞來說，可以用來做多路複用），它的官網是<br>\n<a href=\"https://expressjs.com\">Express — Node.js web application framework</a></p>\n<p>安裝方式是</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> express --save</code></pre>\n<p>npm 會將 express 加入 node_modules 中，讓 node 可以調用依賴，專案變成</p>\n<pre><code>project\n├── node_modules\n├── public\n├── index.js\n├── package.json\n├── package-lock.json\n└── README.md\n</code></pre>\n<p>在入口 index.js 中加入內容</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    res<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, World.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><br>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8001</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Express started'</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>前面是引用函式庫，並建立 express instance</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>再建立 root 的回覆訊息</p>\n<pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    res<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, World.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>當收到 Get / 的 HTTP request 時，response 的形式是純文本；狀態是 200 ok；內容是 “Hello, World.”</p>\n<p>最後，監聽 port 8001，如果建立成功，印出訊息</p>\n<pre class=\"language-js\"><code class=\"language-js\">server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><br>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8001</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Express started'</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>執行程式</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">node index.js</code></pre>\n<p>在瀏覽器的導航列輸入 <a href=\"http://127.0.0.1:8001\">http://127.0.0.1:8001</a> 可以看到 “Hello, World.”</p>\n<h2 id=\"create-websocket-server\"><a class=\"direct-link\" href=\"#create-websocket-server\">#</a> Create WebSocket Server</h2>\n<p>有了基本 Server 後，再來加入 WebSocket，這邊使用 <a href=\"(https://socket.io/docs/)\">Socket.IO</a> 這套函式庫</p>\n<p>安裝方式是</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> socket.io --save</code></pre>\n<p>改寫 index.js 內容</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> io <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'socket.io'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// ...</span><br><br><span class=\"token keyword\">var</span> servIo <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>servIo<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        socket<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'second'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>WebSocket 跟 HTTP Listen 同一個 Port，訂閱 connection 事件，當連線建立時會觸發</p>\n<pre class=\"language-js\"><code class=\"language-js\">servIo<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span></code></pre>\n<p>若是連線成功，則每秒發送當前的秒數到 second 事件中</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        socket<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'second'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"create-websocket-client\"><a class=\"direct-link\" href=\"#create-websocket-client\">#</a> Create WebSocket Client</h2>\n<p>建立完伺服端，接著建立客戶端。客戶端用到的的靜態資源會放在 public 下，因此新增兩個檔案</p>\n<pre><code>project\n├── node_modules\n├── public\n│   ├── client.js\n│   └── socket.html\n├── index.js\n├── package.json\n├── package-lock.json\n└── README.md\n</code></pre>\n<p>也要讓 express 知道這件事，改寫 index.js</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> io <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'socket.io'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/public'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>新增的兩個資源，socket.html 用以描述前端頁面；client.js 用來建立 WebSocket 並改寫 HTML 顯示的資訊。</p>\n<p>先來看 HTML</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/socket.io/socket.io.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>client.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>second<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>引用了 <a href=\"http://socket.io\">socket.io</a> 的函式庫，還有 jQuery 用來操作 HTML 元素。body 內執行 client.js 的內容，並有一個 div 顯示秒數資訊。</p>\n<p>接著看 client.js</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> socket <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">second</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#second'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>訂閱 second 事件；當收到 second 時，改寫 second 元素中的內容</p>\n<p>用瀏覽器打開 <a href=\"http://127.0.0.1:8001/socket.html%EF%BC%8C%E5%8F%AB%E5%87%BA%E5%89%9B%E5%89%9B%E5%BB%BA%E7%AB%8B%E7%9A%84%E9%A0%81%E9%9D%A2%EF%BC%8C%E7%94%A8\">http://127.0.0.1:8001/socket.html，叫出剛剛建立的頁面，用</a> F12 打開瀏覽器的開發者視窗，可以看到資源都被 Get 回來</p>\n<p><img src=\"/img/posts/2020/a-full-duplex-protocol-websocket/ws-1.png\" alt=\"\"></p>\n<p>其中有個 WebSocket 連線，點選後可以看到伺服器不斷傳送訊息</p>\n<p><img src=\"/img/posts/2020/a-full-duplex-protocol-websocket/ws-2.png\" alt=\"\"></p>\n<p>前端頁面上的秒數值也會不斷被刷新。</p>\n<h2 id=\"monitor-websocket-packet\"><a class=\"direct-link\" href=\"#monitor-websocket-packet\">#</a> Monitor WebSocket Packet</h2>\n<p>我們可以用 WireShark 來觀察 WebSocket 的封包。WebSocket 的交握過程如下圖</p>\n<p><img src=\"/img/posts/2020/a-full-duplex-protocol-websocket/ws-3.png\" alt=\"\"></p>\n<p>Client 會發起 HTTP Upgrade，要求將 Session 升級為 WebSocket 協定，Server 收到後，會回覆 Client 已經 Upgrade，雙方後續就可以使用 WebSocket 通訊。如果用 WireShark 抓取封包，結果會是</p>\n<p><img src=\"/img/posts/2020/a-full-duplex-protocol-websocket/ws-4.png\" alt=\"\"></p>\n<p>可以看到一開始是 HTTP，等到雙方交握完成後，就改為 WebSocket。</p>\n<p>進一步查看交握的封包內容</p>\n<p><img src=\"/img/posts/2020/a-full-duplex-protocol-websocket/ws-5.png\" alt=\"\"></p>\n<p>HTTP 中會帶許多 Header，Upgrade 表示要升級的協定；Sec-WebSocket-Key 則是交握用的資訊。Server 收到後會回</p>\n<p><img src=\"/img/posts/2020/a-full-duplex-protocol-websocket/ws-6.png\" alt=\"\"></p>\n<p>狀態碼是 101，表示協議切換；其中 Sec-WebSocket-Accept 是用 Sec-WebSocket-Key 算出來的值，用來避免跨協議攻擊。</p>\n<p>後面 WebSocket 協定包括幀頭跟載荷</p>\n<p><img src=\"/img/posts/2020/a-full-duplex-protocol-websocket/ws-7.png\" alt=\"\"></p>\n<p>Fin 的 bit 表示該幀為完結幀，通常 WebSocket 傳送只用到一幀，但也能支援多幀傳送；Opcode 是操作碼，表示內容的類型，通常用於 WebSocket 的傳送都是文本；Payload 是資料內容，可以看到事件名稱跟秒數都在 Payload 中。</p>\n<h2 id=\"send-message-from-client\"><a class=\"direct-link\" href=\"#send-message-from-client\">#</a> Send Message From Client</h2>\n<p>由於 WebSocket 是雙向通訊，也可以改寫程式，由前端發訊息給後端，先在 HTML 中建立文本輸入欄位</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>client.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>second<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textarea</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>改寫 client.js</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">keypress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        socket<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'client_data'</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>charCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>在前端載入完成時註冊一個 function，當文本輸入欄位被輸入新的值，這個值就會立刻傳送回後端。</p>\n<p>接著改寫 index.js</p>\n<pre class=\"language-js\"><code class=\"language-js\">servIo<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        socket<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'second'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'client_data'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>訂閱 client_data，當收到前端回傳的資料，用 console.log() 印出。</p>\n<p>這樣就能完成雙向通訊了。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>隨著 Web 領域的發展，WebSocket 已經是非常常見的應用了，畢竟現在的網路應用越來越接近桌面程式，前後端的互動更加頻繁，有些時候必須仰賴 WebSocket 才能滿足即時性的需求。像是開發設備前端，如果只使用單純的 AJAX，由於瀏覽器不可能每秒都跟後端取資料，拿到的數據不免有可能會失真，無法正確反映瞬間峰值，這時就是改用 WebSocket 的時機點。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://expressjs.com/\">express</a></li>\n<li><a href=\"https://socket.io/docs/\">socket.io</a></li>\n<li><a href=\"https://www.cnblogs.com/sword-successful/p/4987124.html\">Node.js、Express、Socket.io 入门</a></li>\n<li><a href=\"https://w3c.hexschool.com/blog/e2d9c79d\">Node.js 實作 The F2E_ChatRoom (1) 環境建置</a></li>\n</ul>\n",
      "date_published": "2020-08-23T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2020/database-migration-by-go/",
      "url": "https://blog.kenwsc.com/posts/2020/database-migration-by-go/",
      "title": "資料庫版本遷移：以 Go 為例",
      "content_html": "<p>接續<a href=\"/posts/2020/gorm-from-init-to-use\">前面</a>，繼續來討論資料庫議題吧。</p>\n<p>在商務初期，追求的是驗證市場，這時資料庫往往只有相對簡單的版本，各種欄位也還不是很齊全。隨著商業模式逐漸成熟，資料庫會需要負擔更多的營運功能，也會需要在原有表格中加入新欄位。資料庫的版本管理問題就出現了。</p>\n<p>我們通常稱呼資料庫版本遷移為 Migration，在 Laravel 或 RoR 中都有整合好的 Migration 工具，而 Golang 目前仍需要仰賴自己動手，golang-migrate 是現在比較成熟的專案。本文會講解如何使用 golang-migrate 的 CLI 跟函式庫，來建立資料庫 Migration。</p>\n<h2 id=\"introduction\"><a class=\"direct-link\" href=\"#introduction\">#</a> Introduction</h2>\n<p>既然說版本遷移是 Migration，為什麼不直接稱呼 Version 就好，它跟 Version 有什麼不同？兩者的區別可以看看下圖</p>\n<p><img src=\"/img/posts/2020/database-migration-by-go/db-1.jpg\" alt=\"\"></p>\n<p>簡單來說，Version 指的是資料庫的狀態，而 Migration 指的是狀態到狀態之間的改變。因為後端程式會使用到資料庫，如果用到資料庫沒有的欄位，就會出現問題。對資料庫來說，表格的創建、欄位的新增等等，都是使用 SQL 來描述，如果將每次版本變遷用到的 SQL 記錄下來，等於是將版本記錄下來，並且隨時可以快進到最新開發版，或回退到穩定版本。這就是 Migration 的意義。</p>\n<h2 id=\"prepare-environment\"><a class=\"direct-link\" href=\"#prepare-environment\">#</a> Prepare Environment</h2>\n<p>一開始可以先用命令行工具來熟悉 Migration 的操作，參照<a href=\"https://github.com/golang-migrate/migrate/tree/master/cmd/migrate\">說明檔</a>，安裝 migrate，底下是 Linux 的安裝方式</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -L <span class=\"token punctuation\">[</span>https://packagecloud.io/golang-migrate/migrate/gpgkey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https://packagecloud.io/golang-migrate/migrate/gpgkey<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> apt-key <span class=\"token function\">add</span> -<br><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"deb [https://packagecloud.io/golang-migrate/migrate/ubuntu/](https://packagecloud.io/golang-migrate/migrate/ubuntu/) <span class=\"token variable\"><span class=\"token variable\">$(</span>lsb_release -sc<span class=\"token variable\">)</span></span> main\"</span> <span class=\"token operator\">></span> /etc/apt/sources.list.d/migrate.list<br><span class=\"token function\">apt-get</span> update<br><span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> -y migrate</code></pre>\n<p>安裝完成後，在專案目錄建立 Migration 用的資料夾</p>\n<pre><code>project\n├── cmd\n├── data\n│   └── migrate\n├── migrations\n├── pkg\n├── scripts\n├── go.mod\n└── README.md\n</code></pre>\n<p>初始化 Database</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">initdb -D ./data/migrate -U postgres<br>pg_ctl -D ./data/migrate -l logfile start</code></pre>\n<p>使用 migrate 創建 Migration 用的 SQL</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">migrate create -ext sql -dir migrations create_users_table</code></pre>\n<p>此時，目錄變成</p>\n<pre><code>project\n├── cmd\n├── data\n│   └── migrate\n├── migrations\n│   ├──20200813223102_create_users_table.up.sql\n│   └──20200813223102_create_users_table.down.sql\n├── pkg\n├── scripts\n├── go.mod\n└── README.md\n</code></pre>\n<p>20200813223102_create_users_table.up.sql 是 Migration 用的檔案，前面的數字是時間戳記，可以理解成版本號；中間的文字是描述；最後的 up 或 down 是關鍵字，用來表示該 SQL 是進還是退。</p>\n<p>在兩個 Migration 檔案中加入 SQL 語法，例如 up 可以用來創建表格，加入</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> players <span class=\"token punctuation\">(</span><br>    id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span><br>    age <span class=\"token keyword\">SMALLINT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><br>    username <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><br>    budget <span class=\"token keyword\">INTEGER</span><br><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>而 down 用來撤銷表格，加入</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> players<span class=\"token punctuation\">;</span></code></pre>\n<p>這時使用 migrate，就能建立起 players 表格了</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">migrate -verbose -source file://migrations -database postgres://postgres:<span class=\"token punctuation\">[</span>@127<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>http://twitter.com/127<span class=\"token punctuation\">)</span>.0.0.1:5432/postgres?sslmode<span class=\"token operator\">=</span>disable up <span class=\"token number\">1</span></code></pre>\n<p>-source 用來表示 migrations 放置的位置；-database 是用來連資料庫的協定；up 1 表示要進 1 個版本。</p>\n<p>輸入命令後，使用 DBeaver 連接資料庫，可以看到右側導航欄有 players 跟 schema_migrations 的資訊</p>\n<p><img src=\"/img/posts/2020/database-migration-by-go/db-2.png\" alt=\"\"></p>\n<p>接著可以試著下 down 的指令</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">migrate -verbose -source file://migrations -database postgres://postgres:<span class=\"token punctuation\">[</span>@127<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>http://twitter.com/127<span class=\"token punctuation\">)</span>.0.0.1:5432/postgres?sslmode<span class=\"token operator\">=</span>disable down <span class=\"token number\">1</span></code></pre>\n<p>會對資料庫執行 down，撤銷掉剛剛建立的 players 表格</p>\n<p><img src=\"/img/posts/2020/database-migration-by-go/db-3.png\" alt=\"\"></p>\n<h2 id=\"create-migrate-tool\"><a class=\"direct-link\" href=\"#create-migrate-tool\">#</a> Create Migrate Tool</h2>\n<p>migrate 可以進行資料庫的 Migration，但如果想要在應用程式中執行，應該如何做呢？</p>\n<p>我們先建立 migrate 的專案</p>\n<pre><code>project\n├── cmd\n│   └── migrate\n│       └── main.go\n├── data\n│   └── migrate\n├── migrations\n├── pkg\n│   └── migrate\n│       └── migrate.go\n├── scripts\n├── go.mod\n└── README.md\n</code></pre>\n<p>其中套件 migrate 引入 migrate 庫，內容是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> migrate<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"log\"</span><br>    <span class=\"token string\">\"os\"</span><br>    <span class=\"token string\">\"path/filepath\"</span><br><br>    <span class=\"token string\">\"github.com/golang-migrate/migrate/v4\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">type</span> Migration <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    client <span class=\"token operator\">*</span>migrate<span class=\"token punctuation\">.</span>Migrate<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Migration <span class=\"token punctuation\">{</span><br>    m <span class=\"token operator\">:=</span> Migration<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>    path<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Executable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        log<span class=\"token punctuation\">.</span><span class=\"token function\">Panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    path <span class=\"token operator\">=</span> <span class=\"token string\">\"file://\"</span> <span class=\"token operator\">+</span> filepath<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"..\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"..\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"migrations\"</span><span class=\"token punctuation\">)</span><br>    m<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> migrate<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"postgres://postgres:[@localhost](http://twitter.com/localhost):5432/postgres?sslmode=disable\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        log<span class=\"token punctuation\">.</span><span class=\"token function\">Panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>m<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Up to newest version</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Migration<span class=\"token punctuation\">)</span> <span class=\"token function\">Up</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">Up</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> err <span class=\"token operator\">!=</span> migrate<span class=\"token punctuation\">.</span>ErrNoChange <span class=\"token punctuation\">{</span><br>        log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Down to oldest current</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Migration<span class=\"token punctuation\">)</span> <span class=\"token function\">Down</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">Down</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> err <span class=\"token operator\">!=</span> migrate<span class=\"token punctuation\">.</span>ErrNoChange <span class=\"token punctuation\">{</span><br>        log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>前面引入套件後，建立一個 struct 用來操作客戶端</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Migration <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    client <span class=\"token operator\">*</span>migrate<span class=\"token punctuation\">.</span>Migrate<br><span class=\"token punctuation\">}</span></code></pre>\n<p>這個客戶端會在初始化後，回傳給應用程式</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Migration <span class=\"token punctuation\">{</span><br>    m <span class=\"token operator\">:=</span> Migration<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>    path<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Executable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        log<span class=\"token punctuation\">.</span><span class=\"token function\">Panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    path <span class=\"token operator\">=</span> <span class=\"token string\">\"file://\"</span> <span class=\"token operator\">+</span> filepath<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"..\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"..\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"migrations\"</span><span class=\"token punctuation\">)</span><br>    m<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> migrate<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"postgres://postgres:[@localhost](http://twitter.com/localhost):5432/postgres?sslmode=disable\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        log<span class=\"token punctuation\">.</span><span class=\"token function\">Panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>m<br><span class=\"token punctuation\">}</span></code></pre>\n<p>初始化的訊息包括資料庫路徑與連接的通訊協定，類似前面使用 migrate 命令行工具的參數</p>\n<p>底下再新增 Up 跟 Down 方法，調用 migrate 的 Up 跟 Down</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Up to newest version</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Migration<span class=\"token punctuation\">)</span> <span class=\"token function\">Up</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">Up</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> err <span class=\"token operator\">!=</span> migrate<span class=\"token punctuation\">.</span>ErrNoChange <span class=\"token punctuation\">{</span><br>        log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Down to oldest current</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Migration<span class=\"token punctuation\">)</span> <span class=\"token function\">Down</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">Down</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> err <span class=\"token operator\">!=</span> migrate<span class=\"token punctuation\">.</span>ErrNoChange <span class=\"token punctuation\">{</span><br>        log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Up 會將資料庫由現在版本升到最新版本；Down 會將資料庫由現在版本降為最舊版本。</p>\n<p>應用程式 main.go 的內容則是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"example/pkg/migrate\"</span><br>    <span class=\"token string\">\"flag\"</span><br><br>    <span class=\"token boolean\">_</span> <span class=\"token string\">\"github.com/golang-migrate/migrate/v4/database/postgres\"</span><br>    <span class=\"token boolean\">_</span> <span class=\"token string\">\"github.com/golang-migrate/migrate/v4/source/file\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> up<span class=\"token punctuation\">,</span> down <span class=\"token builtin\">bool</span><br>    flag<span class=\"token punctuation\">.</span><span class=\"token function\">BoolVar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>up<span class=\"token punctuation\">,</span> <span class=\"token string\">\"up\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"up to newest\"</span><span class=\"token punctuation\">)</span><br>    flag<span class=\"token punctuation\">.</span><span class=\"token function\">BoolVar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>down<span class=\"token punctuation\">,</span> <span class=\"token string\">\"down\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"down to oldest\"</span><span class=\"token punctuation\">)</span><br>    flag<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>    client <span class=\"token operator\">:=</span> migrate<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> up <span class=\"token punctuation\">{</span><br>        client<span class=\"token punctuation\">.</span><span class=\"token function\">Up</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">if</span> down <span class=\"token punctuation\">{</span><br>        client<span class=\"token punctuation\">.</span><span class=\"token function\">Down</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>在前面用 “<a href=\"http://github.com/golang-migrate/migrate/v4/database/postgres%E2%80%9D\">github.com/golang-migrate/migrate/v4/database/postgres”</a> 跟 “<a href=\"http://github.com/golang-migrate/migrate/v4/source/file%E2%80%9D\">github.com/golang-migrate/migrate/v4/source/file”</a> 引入 driver。</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"example/pkg/migrate\"</span><br>    <span class=\"token string\">\"flag\"</span><br>    <span class=\"token boolean\">_</span> <span class=\"token string\">\"github.com/golang-migrate/migrate/v4/database/postgres\"</span><br>    <span class=\"token boolean\">_</span> <span class=\"token string\">\"github.com/golang-migrate/migrate/v4/source/file\"</span><br><span class=\"token punctuation\">)</span></code></pre>\n<p>後面設定命令行參數，如果有帶 up 就執行 Up，如果帶 down 就執行 Down。</p>\n<p>在 migrations 下新增兩個 migration</p>\n<pre><code>project\n├── cmd\n│   └── migrate\n│       └── main.go\n├── data\n│   └── migrate\n├── migrations\n│   ├── 000001_create_players.up.sql\n│   ├── 000001_create_players.down.sql\n│   ├── 000002_managers.up.sql\n│   └── 000002_managers.down.sql\n├── pkg\n│   └── migrate\n│       └── migrate.go\n├── scripts\n├── go.mod\n└── README.md\n</code></pre>\n<p>因為是手動新增，前面版本編號就不用 timestamp 了，改成用流水號；create_players 的內容跟前面一樣；managers 則用來新增一個表格 managers。</p>\n<p>up 是</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> managers <span class=\"token punctuation\">(</span><br>    id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span><br>    age <span class=\"token keyword\">SMALLINT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><br>    username <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><br>    salary <span class=\"token keyword\">INTEGER</span><br><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>down 是</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> managers<span class=\"token punctuation\">;</span></code></pre>\n<p>編譯並執行</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">./bin/migrate -up</code></pre>\n<p>這次改用 psql 來看成果</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">psql -U postgre</code></pre>\n<p>輸入 psql 指令</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">postgres</span><span class=\"token operator\">=</span><span class=\"token comment\"># using postgres</span><br>postgres-<span class=\"token comment\"># \\c postgres</span><br>You are now connected to database <span class=\"token string\">\"postgres\"</span> as user <span class=\"token string\">\"postgres\"</span><span class=\"token builtin class-name\">.</span><br>postgres-<span class=\"token comment\"># \\dt</span><br>                List of relations<br>Schema <span class=\"token operator\">|</span>       Name        <span class=\"token operator\">|</span> Type  <span class=\"token operator\">|</span>  Owner   <br>-------+-------------------+-------+----------<br>public <span class=\"token operator\">|</span> managers          <span class=\"token operator\">|</span> table <span class=\"token operator\">|</span> postgres<br>public <span class=\"token operator\">|</span> players           <span class=\"token operator\">|</span> table <span class=\"token operator\">|</span> postgres<br>public <span class=\"token operator\">|</span> schema_migrations <span class=\"token operator\">|</span> table <span class=\"token operator\">|</span> postgres<br><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> rows<span class=\"token punctuation\">)</span></code></pre>\n<p>改成跑 down</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">./bin/migrate -down</code></pre>\n<p>結果變成</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">postgres-<span class=\"token comment\"># \\dt</span><br>            List of relations<br>Schema <span class=\"token operator\">|</span>       Name        <span class=\"token operator\">|</span> Type  <span class=\"token operator\">|</span>  Owner   <br>-------+-------------------+-------+----------<br>public <span class=\"token operator\">|</span> schema_migrations <span class=\"token operator\">|</span> table <span class=\"token operator\">|</span> postgres<br><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> row<span class=\"token punctuation\">)</span></code></pre>\n<p>可以看到 Up 跟 Down 有確實發揮作用。</p>\n<h2 id=\"force-to-specific-version\"><a class=\"direct-link\" href=\"#force-to-specific-version\">#</a> Force to Specific Version</h2>\n<p>資料庫能 Migration 很方便，但如果接手的是原先專案，建立時沒有設定 Migration，到專案中期才要導入，是不是只能把資料庫砍掉重建，由最初的版本慢慢 Up 起來？migrate 對應這狀況，提供 Force 函式，可以用來強制設定資料庫版本，使用 Force 後，資料庫就會認定當前版本為指令版本，用該版本來做 Migration。</p>\n<p>為加入 Force，在 pkg/migrate/migrate.go 新增</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Force sets a migeration version to</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Migration<span class=\"token punctuation\">)</span> <span class=\"token function\">Force</span><span class=\"token punctuation\">(</span>version <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">Force</span><span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> err <span class=\"token operator\">!=</span> migrate<span class=\"token punctuation\">.</span>ErrNoChange <span class=\"token punctuation\">{</span><br>        log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>也在 cmd/migrate/main.go 中新增</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> version <span class=\"token builtin\">int</span><br>    <span class=\"token comment\">// ...</span><br>    <span class=\"token keyword\">if</span> version <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">{</span><br>        client<span class=\"token punctuation\">.</span><span class=\"token function\">Force</span><span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token comment\">// ...</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Force 吃的參數就是版本號。</p>\n<p>為驗證 Force 有成功運作，試著砍掉版本資訊的 schema_migrations</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">postgres-<span class=\"token comment\"># drop table if exists schema_migrations;</span></code></pre>\n<p>啟動應用程式，指定版本為 1</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">./bin/migrate -force <span class=\"token number\">1</span></code></pre>\n<p>再 up 上去</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">./bin/migrate -up</code></pre>\n<p>觀察結果</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">postgres</span><span class=\"token operator\">=</span><span class=\"token comment\"># \\dt</span><br>            List of relations<br>Schema <span class=\"token operator\">|</span>       Name        <span class=\"token operator\">|</span> Type  <span class=\"token operator\">|</span>  Owner   <br>-------+-------------------+-------+----------<br>public <span class=\"token operator\">|</span> managers          <span class=\"token operator\">|</span> table <span class=\"token operator\">|</span> postgres<br>public <span class=\"token operator\">|</span> schema_migrations <span class=\"token operator\">|</span> table <span class=\"token operator\">|</span> postgres<br><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> rows<span class=\"token punctuation\">)</span></code></pre>\n<p>由於 Version 被指定為 1，在 Up 時就跳過 Migration 1，直接跑 Migration 2，因此最後的 table 中沒有 players。可見版本指定成功。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>Migration 在資料庫開發中會常用到，畢竟現在的軟體都是持續開發、持續交付，難免有需要升級的時候，而如果升級的版本出了問題，也會需要回滾到舊版。由於資料庫本身不會進 Git Repository，我們只能仰賴 Migration 來做管理。</p>\n<p>Golang 的設計以函式庫為核心，不訴求框架，某方面來講給予開發者更多的權力，讓開發者能選擇要用的工具；但無形中也增加了開發的門檻，像這類 Migration 的工具就需要自行整合。我認為可見的未來內，Golang 的發展方向應該不會變，樂觀點想，只要生態系夠活躍，這也許不是什麼大問題。</p>\n<p>P.S.</p>\n<p>我現在有將 Medium 中實作的專案放到 <a href=\"https://github.com/ken00535/golang-medium-example\">GitHub(按我)</a> 囉，有興趣的人可以 clone 來玩玩看。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://github.com/golang-migrate/migrate\">golang-migrate GitHub</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/69472163\">golang-migrate命令行的使用</a></li>\n<li><a href=\"https://medium.com/@weilihmen/ruby-on-rails-%E8%AB%87migration%E6%A6%82%E5%BF%B5%E8%88%87%E7%94%A8%E6%B3%95-22a52714f51f\">Ruby on Rails-談Migration概念與用法</a></li>\n</ul>\n",
      "date_published": "2020-08-16T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2020/mqtt-a-light-weight-mq/",
      "url": "https://blog.kenwsc.com/posts/2020/mqtt-a-light-weight-mq/",
      "title": "MQTT：輕量的消息隊列協定",
      "content_html": "<p>這幾年隨著物聯網(IoT)越喊越熱，MQTT 這套通訊協定也越來越常聽人提起。物聯網的核心精神是將終端數據傳輸到網路，網路中的運算單元在分析這些數據後，可以將它轉化為使用者想要的應用。在網路中，數據是用通訊協定來交換，而常見的通訊協定 HTTP 結構相對複雜，傳輸成本較高，也更要求終端裝置的效能，而且 HTTP 採用輪詢(Polling)機制來取得資料，需要客戶端頻繁跟裝置拉取訊息，不適合 IoT 的應用；相對的，MQTT 輕量、採用發佈/訂閱模式，更適合 IoT 的傳輸需求。</p>\n<p>最常見的 MQTT 工具是由 Eclipse Foundation 維護的 mosquitto，相關工具也都有開源。本文會講解如何使用 Golang 的 mqtt 套件，搭配 mosquitto 的中間人 Broker 服務，走一次 MQTT 的使用。</p>\n<h2 id=\"prepare-environment\"><a class=\"direct-link\" href=\"#prepare-environment\">#</a> Prepare Environment</h2>\n<p>首先要來準備 MQTT 的環境，在實際應用中，為了維護方便，會建議 MQTT 的伺服端架在 Linux 上，客戶端則看具體需求。因為我們只是要驗證概念，就選擇使用 Windows + WSL 作為開發環境，來對應 GUI + Server 配置兩種需要。</p>\n<p>WSL 的 mosquitto 安裝方式跟 Debian 相同</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> mosquitto mosquitto-clients</code></pre>\n<p>安裝後，開啟服務</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">mosquitto</code></pre>\n<p>這樣 MQTT 的伺服端就架好了。接著在 Windows 上安裝 MQTT 客戶端，如果習慣使用 GUI 的話，可以用 MQTT.fx</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">choco <span class=\"token function\">install</span> mqttfx -y</code></pre>\n<p>開啟 MQTT.fx，設定連線的資料。</p>\n<p><img src=\"/img/posts/2020/mqtt-a-light-weight-mq/mqtt-1.png\" alt=\"\"></p>\n<p>由於伺服器開在本機，Broker 輸入 127.0.0.1；Port 用預設的 1883；Client ID 主要供 Broker 判斷 Client 用，不要重複即可，這邊用亂數。</p>\n<p>在 Subscribe 的 Tab 中，可以選擇要訂閱的訊息，MQTT 是採用發佈/訂閱架構，Broker 收到發佈者的消息後，會將消息傳送給所有訂閱者。我們可以用通配符 # 來訂閱所有主題。</p>\n<p><img src=\"/img/posts/2020/mqtt-a-light-weight-mq/mqtt-2.png\" alt=\"\"></p>\n<p>到 Publish 的 Tab，試著發佈一則訊息訊息</p>\n<p><img src=\"/img/posts/2020/mqtt-a-light-weight-mq/mqtt-3.png\" alt=\"\"></p>\n<p>回到 Subscribe，可以看到該訊息已經被接收</p>\n<p><img src=\"/img/posts/2020/mqtt-a-light-weight-mq/mqtt-4.png\" alt=\"\"></p>\n<p>有第三方的環境後，就可以拿來驗證自己開發的應用程式是否正確。</p>\n<h2 id=\"send-mqtt-message\"><a class=\"direct-link\" href=\"#send-mqtt-message\">#</a> Send MQTT Message</h2>\n<p>建置完環境，開始來開發應用程式，同樣使用前面的專案架構，建立 cmd 並在 pkg 下加入需要的檔案</p>\n<pre><code>project\n├── cmd\n│   └── mqtt\n│       └── main.go\n├── configs\n├── pkg\n│   └── mqtt\n│       ├── message.go\n│       └── mqtt.go\n├── go.mod\n└── README.md\n</code></pre>\n<p>pkg/mqtt/message.go 用來建立訊息的模型；pkg/mqtt/mqtt.go 用來處理 MQTT 客戶端。</p>\n<p>引入需要的 package</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go get -u github.com/eclipse/paho.mqtt.golang</code></pre>\n<p>一個一個來看，pkg/mqtt/message.go 中的訊息格式是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> mqtt<br><br><span class=\"token keyword\">type</span> Message <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    Header  <span class=\"token builtin\">string</span><br>    Content <span class=\"token builtin\">string</span><br>    Footer  <span class=\"token builtin\">string</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>將訊息分為三部分，有 Header、Content、Footer，都是字串。當然用別的格式也行，就看各自需求。</p>\n<p>接著 pkg/mqtt/mqtt.go 的內容是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> mqtt<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"encoding/json\"</span><br>    <span class=\"token string\">\"fmt\"</span><br>    <span class=\"token string\">\"log\"</span><br>    <span class=\"token string\">\"math/rand\"</span><br>    <span class=\"token string\">\"os\"</span><br>    <span class=\"token string\">\"strconv\"</span><br>    <span class=\"token string\">\"time\"</span><br><br>    mqtt <span class=\"token string\">\"github.com/eclipse/paho.mqtt.golang\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Client is a mqtt client</span><br><span class=\"token keyword\">type</span> Client <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    client mqtt<span class=\"token punctuation\">.</span>Client<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// New mqtt client and connect to broker</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> Client <span class=\"token punctuation\">{</span><br>    c <span class=\"token operator\">:=</span> Client<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>    mqtt<span class=\"token punctuation\">.</span>DEBUG <span class=\"token operator\">=</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>    mqtt<span class=\"token punctuation\">.</span>ERROR <span class=\"token operator\">=</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>    s1 <span class=\"token operator\">:=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">NewSource</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UnixNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    r1 <span class=\"token operator\">:=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><br>    clientID <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    opts <span class=\"token operator\">:=</span> mqtt<span class=\"token punctuation\">.</span><span class=\"token function\">NewClientOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddBroker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tcp://127.0.0.1:1883\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetClientID</span><span class=\"token punctuation\">(</span>clientID<span class=\"token punctuation\">)</span><br><br>    c<span class=\"token punctuation\">.</span>client <span class=\"token operator\">=</span> mqtt<span class=\"token punctuation\">.</span><span class=\"token function\">NewClient</span><span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> token <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">return</span> c<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Publish mqtt message</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m Client<span class=\"token punctuation\">)</span> <span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span>topic <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> payload <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    text<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><br>    token <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><br>    token<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>前面宣告一個結構，該結構內有 MQTT 的相關方法，可供應用端調用。</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Client is a mqtt client</span><br><span class=\"token keyword\">type</span> Client <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    client mqtt<span class=\"token punctuation\">.</span>Client<br><span class=\"token punctuation\">}</span></code></pre>\n<p>建立一個 New function 將此結構回傳</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> Client <span class=\"token punctuation\">{</span><br>    c <span class=\"token operator\">:=</span> Client<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>    mqtt<span class=\"token punctuation\">.</span>DEBUG <span class=\"token operator\">=</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>    mqtt<span class=\"token punctuation\">.</span>ERROR <span class=\"token operator\">=</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre>\n<p>3、4 兩行的意思是將 MQTT 客戶端的 log 輸出到標準 log 中，方便 Debug。</p>\n<p>亂數產生一組 Client ID，並設定 Broker 的 Address，類似前面 MQTT.fx 的設定</p>\n<pre class=\"language-go\"><code class=\"language-go\">    s1 <span class=\"token operator\">:=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">NewSource</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UnixNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    r1 <span class=\"token operator\">:=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><br>    clientID <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    opts <span class=\"token operator\">:=</span> mqtt<span class=\"token punctuation\">.</span><span class=\"token function\">NewClientOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddBroker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tcp://127.0.0.1:1883\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetClientID</span><span class=\"token punctuation\">(</span>clientID<span class=\"token punctuation\">)</span></code></pre>\n<p>新建一個 MQTT client，並指給 Client 中的 client；使用 Connect 來連線，並用 Wait 跟 Error 來確認連線成功，沒出現問題</p>\n<pre class=\"language-go\"><code class=\"language-go\">    c<span class=\"token punctuation\">.</span>client <span class=\"token operator\">=</span> mqtt<span class=\"token punctuation\">.</span><span class=\"token function\">NewClient</span><span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> token <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> c<br><span class=\"token punctuation\">}</span></code></pre>\n<p>還要記得加入 Publish，用來發佈訊息</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Publish mqtt message</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m Client<span class=\"token punctuation\">)</span> <span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span>topic <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> payload <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    text<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><br>    token <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><br>    token<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Publish 需要兩個參數，分別是 Topic 跟 Payload，可以合理預期進來的 Payload 是 Message 格式，因此用 json.Marshal 將它序列化，方便傳輸。</p>\n<p>好的，pkg 開發完成，回到應用端，修改 cmd/mqtt/main.go 的內容為</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"example/pkg/mqtt\"</span><br>    <span class=\"token string\">\"time\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    client <span class=\"token operator\">:=</span> mqtt<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    payload <span class=\"token operator\">:=</span> mqtt<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">{</span><br>        Header<span class=\"token punctuation\">:</span> <span class=\"token string\">\"this is header\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><br>    client<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topic/golang\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>設定的 Topic 是 “topic/golang”，Payload 的 Header 帶有內容；Content 跟 Footer 為空。</p>\n<p>編譯並執行，可以看到</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP-2R08VK6:~/git/golang-medium-example$ ./bin/mqtt <br><span class=\"token number\">6966058732451841891</span><br><span class=\"token punctuation\">[</span>client<span class=\"token punctuation\">]</span>   Connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">[</span>store<span class=\"token punctuation\">]</span>    memorystore initialized<br><span class=\"token punctuation\">[</span>client<span class=\"token punctuation\">]</span>   about to <span class=\"token function\">write</span> new connect msg<br><span class=\"token punctuation\">[</span>client<span class=\"token punctuation\">]</span>   socket connected to broker<br><span class=\"token punctuation\">[</span>client<span class=\"token punctuation\">]</span>   Using MQTT <span class=\"token number\">3.1</span>.1 protocol<br><span class=\"token punctuation\">[</span>net<span class=\"token punctuation\">]</span>      connect started<br><span class=\"token punctuation\">[</span>net<span class=\"token punctuation\">]</span>      received connack<br><span class=\"token punctuation\">[</span>client<span class=\"token punctuation\">]</span>   client is connected<br><span class=\"token punctuation\">[</span>net<span class=\"token punctuation\">]</span>      logic started<br><span class=\"token punctuation\">[</span>net<span class=\"token punctuation\">]</span>      logic waiting <span class=\"token keyword\">for</span> msg on ibound<br><span class=\"token punctuation\">[</span>client<span class=\"token punctuation\">]</span>   <span class=\"token builtin class-name\">exit</span> startClient<br><span class=\"token punctuation\">[</span>net<span class=\"token punctuation\">]</span>      outgoing started<br><span class=\"token punctuation\">[</span>net<span class=\"token punctuation\">]</span>      outgoing waiting <span class=\"token keyword\">for</span> an outbound message<br><span class=\"token punctuation\">[</span>net<span class=\"token punctuation\">]</span>      incoming started<br><span class=\"token punctuation\">[</span>pinger<span class=\"token punctuation\">]</span>   keepalive starting<br><span class=\"token punctuation\">[</span>client<span class=\"token punctuation\">]</span>   enter Publish<br><span class=\"token punctuation\">[</span>client<span class=\"token punctuation\">]</span>   sending publish message, topic: topic/golang<br><span class=\"token punctuation\">[</span>net<span class=\"token punctuation\">]</span>      obound wrote msg, id: <span class=\"token number\">0</span><br><span class=\"token punctuation\">[</span>net<span class=\"token punctuation\">]</span>      outgoing waiting <span class=\"token keyword\">for</span> an outbound message</code></pre>\n<p>同時，MQTT.fx 也能看到訂閱的訊息</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2486/1*kvqjIHWI6WVaeIegXBkatw.png\" alt=\"\"></p>\n<h2 id=\"receive-mqtt-message\"><a class=\"direct-link\" href=\"#receive-mqtt-message\">#</a> Receive MQTT Message</h2>\n<p>如果是對純收集資訊的終端應用，Publish 應該已經能滿足需求了，但有時會需要更細緻的互動，例如出門在外，希望透過 MQTT 發佈訊息，將家裡的電燈關掉，這時就會要求終端需要具備 Subscribe 的能力。</p>\n<p>作法很單純，修改 pkg/mqtt/mqtt.go，加入 Subscribe</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Subscribe mqtt message</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m Client<span class=\"token punctuation\">)</span> <span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>topic <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> token <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>        os<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Client 已經可以訂閱主題了，但收到主題後希望進行什麼處理呢？因此加入 Handler，在收到訊息後，將 Topic 跟 Payload 印出，並將這個 Handler 設為預設的處理方式</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> f mqtt<span class=\"token punctuation\">.</span>MessageHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>client mqtt<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">,</span> msg mqtt<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TOPIC: %s\\n\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">Topic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MSG: %s\\n\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">Payload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// ...</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> Client <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// ...</span><br>    opts<span class=\"token punctuation\">.</span>DefaultPublishHandler <span class=\"token operator\">=</span> f<br>    <span class=\"token comment\">// ...</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>應用端也跟著修改</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    client <span class=\"token operator\">:=</span> mqtt<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    payload <span class=\"token operator\">:=</span> mqtt<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">{</span><br>        Header<span class=\"token punctuation\">:</span> <span class=\"token string\">\"this is header\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><br>    client<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topic/golang\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><br>    client<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topic/golang\"</span><span class=\"token punctuation\">)</span><br>    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>後面加個 Sleep 30 秒，讓應用程式不要立刻結束，才能看到訂閱的訊息。</p>\n<p>同樣編譯並執行，在程式執行期間，使用 MQTT.fx 發佈訊息</p>\n<p><img src=\"/img/posts/2020/mqtt-a-light-weight-mq/mqtt-6.png\" alt=\"\"></p>\n<p>在 Golang 可以看到對應的消息印出</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>net<span class=\"token punctuation\">]</span>      received publish, msgId: <span class=\"token number\">0</span><br><span class=\"token punctuation\">[</span>net<span class=\"token punctuation\">]</span>      putting msg on onPubChan<br><span class=\"token punctuation\">[</span>net<span class=\"token punctuation\">]</span>      <span class=\"token keyword\">done</span> putting msg on incomingPubChan<br><span class=\"token punctuation\">[</span>net<span class=\"token punctuation\">]</span>      logic waiting <span class=\"token keyword\">for</span> msg on ibound<br>TOPIC: topic/golang<br>MSG: hello<br><span class=\"token punctuation\">[</span>pinger<span class=\"token punctuation\">]</span>   <span class=\"token function\">ping</span> check <span class=\"token number\">20.0000549</span></code></pre>\n<h2 id=\"encrypt-message\"><a class=\"direct-link\" href=\"#encrypt-message\">#</a> Encrypt Message</h2>\n<p>如果訊息的傳輸是在內網，使用未加密的傳輸就行了，但如果訊息會通過公有網路進到伺服器，就需要對訊息進行加密了。TLS 是常用的安全協定，只要讓 MQTT 跑在 TLS 上，MQTT 的訊息就會被加密，即使第三方透過網路竊聽，也無法取得訊息內容。</p>\n<p>現代的訊息加密都是透過信任鍊的方式，具體可以參照<a href=\"https://medium.com/schaoss-blog/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%8D%81-28-web-http-%E5%92%8C-https-%E7%9A%84%E5%B7%AE%E5%88%A5%E6%98%AF%E4%BB%80%E9%BA%BC-21ccafb6f36f\">這篇</a>的說明，不再贅述。為加密訊息，要先有 CA 簽證，因為是自己開發的東西，使用自簽 CA 來做為信任鍊的基礎。</p>\n<p>先產生一組 CA 用的私鑰 ca.key</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">openssl genrsa -out configs/mqtt/ca.key <span class=\"token number\">2048</span></code></pre>\n<p>使用這組私鑰來產生自簽證書 ca.crt</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">openssl req -new -x509 -days <span class=\"token number\">365</span> -sha256 <span class=\"token punctuation\">\\</span><br>    -subj <span class=\"token string\">\"/[C=TW/ST=Taipei/O=FOO/OU=BAR/CN=ken00535.com/emailAddress=ken00535@ken00535.com](mailto:C=TW/ST=Taipei/O=FOO/OU=BAR/CN=ken00535.com/emailAddress=ken00535@ken00535.com)\"</span> <span class=\"token punctuation\">\\</span><br>    -key configs/mqtt/ca.key <span class=\"token punctuation\">\\</span><br>    -out configs/mqtt/ca.crt</code></pre>\n<p>再產生一組 server 用的私鑰 server.key</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">openssl genrsa -out configs/mqtt/server.key <span class=\"token number\">2048</span></code></pre>\n<p>再產生憑證簽發的請求檔 csr</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">openssl req -new -sha256 <span class=\"token punctuation\">\\</span><br>    -key configs/mqtt/server.key <span class=\"token punctuation\">\\</span><br>    -subj <span class=\"token string\">\"/C=TW/ST=Taipei/O=FOO/OU=BAR/CN=ken00535/emailAddress=ken00535@gmail.com\"</span> <br>    -out configs/mqtt/server.csr</code></pre>\n<p>使用 CA 簽發請求檔</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">openssl x509 -req -CAcreateserial -days <span class=\"token number\">365</span> <br>    -CA configs/mqtt/ca.crt <span class=\"token punctuation\">\\</span><br>    -CAkey configs/mqtt/ca.key <span class=\"token punctuation\">\\</span><br>    -in configs/mqtt/server.csr <span class=\"token punctuation\">\\</span><br>    -out configs/mqtt/server.crt</code></pre>\n<p>完成一組球員兼裁判的簽發程序。簽發完成的證書 server.crt 可以用來做為 Broker 的證書，同樣的步驟跑一次，可以再產生一組 client.crt 做為 client 的證書，供雙向驗證用。為了方便，先都統一使用 server.crt。</p>\n<p>接著產生一份 mosquitto 的設定檔，在其中加入</p>\n<pre class=\"language-ini\"><code class=\"language-ini\">cafile configs/mqtt/ca.crt<br><br><span class=\"token comment\"># Path to the PEM encoded server certificate.</span><br>certfile configs/mqtt/server.crt<br><br><span class=\"token comment\"># Path to the PEM encoded keyfile.</span><br>keyfile configs/mqtt/server.key</code></pre>\n<p>放入認證用的證書。啟動 Broker 時帶入這組設定</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">mosquitto -c configs/mqtt/mosquitto.conf</code></pre>\n<p>Broker 就能被認證與加密了。</p>\n<p>同理，Client 端也需要設定加密程序，新增 pkg/mqtt/tls.go 來產生加密設定</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> mqtt<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"crypto/tls\"</span><br>    <span class=\"token string\">\"crypto/x509\"</span><br>    <span class=\"token string\">\"io/ioutil\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">NewTLSConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>tls<span class=\"token punctuation\">.</span>Config <span class=\"token punctuation\">{</span><br>    certpool <span class=\"token operator\">:=</span> x509<span class=\"token punctuation\">.</span><span class=\"token function\">NewCertPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    pemCerts<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"configs/mqtt/ca.crt\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        certpool<span class=\"token punctuation\">.</span><span class=\"token function\">AppendCertsFromPEM</span><span class=\"token punctuation\">(</span>pemCerts<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token comment\">// Import client certificate/key pair</span><br>    cert<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> tls<span class=\"token punctuation\">.</span><span class=\"token function\">LoadX509KeyPair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"configs/mqtt/server.crt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"configs/mqtt/server.key\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token comment\">// Create tls.Config with desired tls properties</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>tls<span class=\"token punctuation\">.</span>Config<span class=\"token punctuation\">{</span><br>        RootCAs<span class=\"token punctuation\">:</span>            certpool<span class=\"token punctuation\">,</span><br>        ClientAuth<span class=\"token punctuation\">:</span>         tls<span class=\"token punctuation\">.</span>NoClientCert<span class=\"token punctuation\">,</span><br>        ClientCAs<span class=\"token punctuation\">:</span>          <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span><br>        InsecureSkipVerify<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>        Certificates<span class=\"token punctuation\">:</span>       <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>tls<span class=\"token punctuation\">.</span>Certificate<span class=\"token punctuation\">{</span>cert<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>使用 tls.Config，在 RootCAs 放入 CA 證書；在 Certificates 放入客戶端的證書與私鑰。即可完成設定。</p>\n<p>再修改 pkg/mqtt/mqtt.go，套用設定到 Client 端</p>\n<pre class=\"language-go\"><code class=\"language-go\">tlsConfig <span class=\"token operator\">:=</span> <span class=\"token function\">NewTLSConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>opts<span class=\"token punctuation\">.</span><span class=\"token function\">SetTLSConfig</span><span class=\"token punctuation\">(</span>tlsConfig<span class=\"token punctuation\">)</span></code></pre>\n<p>也要記得修改 tcp 為 tcps，表示套用 tls</p>\n<pre class=\"language-go\"><code class=\"language-go\">opts <span class=\"token operator\">:=</span> mqtt<span class=\"token punctuation\">.</span><span class=\"token function\">NewClientOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddBroker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tcps://127.0.0.1:1883\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetClientID</span><span class=\"token punctuation\">(</span>clientID<span class=\"token punctuation\">)</span></code></pre>\n<p>MQTT.fx 也跟著加入設定</p>\n<p><img src=\"/img/posts/2020/mqtt-a-light-weight-mq/mqtt-7.png\" alt=\"\"></p>\n<p>可以用 Wireshark 來比較一下加入 tls 前後的差別，在未加密的模式下，能輕易看到 Topic 跟 Payload 的訊息</p>\n<p><img src=\"/img/posts/2020/mqtt-a-light-weight-mq/mqtt-8.png\" alt=\"\"></p>\n<p>如果是已加密，則只能看到 TLS</p>\n<p><img src=\"/img/posts/2020/mqtt-a-light-weight-mq/mqtt-9.png\" alt=\"\"></p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>MQTT 在 IoT 的應用上，應該會越來越常見，Golang 在 IoT 的優勢是跨平台編譯，只需要在 PC 上開發完後，就能編譯出 Arm 架構的 Binary Code，至於底層編譯有沒有對 Arm 優化就不得而知了。我覺得 Golang 的主要應用應該還是會落在 Server 端的 Application 開發，而 MQTT 比較像是扮演一個輕量的資料交換格式，用於初期或低負載的情境。</p>\n<p>另個可以探索的題目是 mosquitto 的負載能力。因為 IoT 多是高頻輕負載的資訊傳輸，當連線數達到極限時，仍然要處理負載平衡的問題；應用端也可能需要有個 Message Queue 的緩衝機制，避免瞬間流量進來衝垮伺服器，或者沒有收到該收的資料。整個商業情境要處理的事還挺多的，也許後面有機會可以再試著討論看看。</p>\n<h2 id=\"reference%3A\"><a class=\"direct-link\" href=\"#reference%3A\">#</a> Reference:</h2>\n<ul>\n<li><a href=\"https://pkg.go.dev/github.com/eclipse/paho.mqtt.golang@v1.2.0?tab=doc\">Package mqtt</a></li>\n<li><a href=\"https://medium.com/schaoss-blog/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%8D%81-28-web-http-%E5%92%8C-https-%E7%9A%84%E5%B7%AE%E5%88%A5%E6%98%AF%E4%BB%80%E9%BA%BC-21ccafb6f36f\">前端三十｜28. [WEB] HTTP 和 HTTPS 的差別是什麼？</a></li>\n</ul>\n",
      "date_published": "2020-08-10T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2020/gorm-from-init-to-use/",
      "url": "https://blog.kenwsc.com/posts/2020/gorm-from-init-to-use/",
      "title": "GORM：從建置到 CRUD",
      "content_html": "<p>進行後端開發時，少不了要使用資料庫，由於資料庫的設計與使用方式偏向函數思維，跟主流的物件導向習慣不同，因此很多語言都有對應的 ORM 套件，用來將資料庫轉為物件，方便開發者使用。</p>\n<p>Golang 同樣有許多第三方的 ORM 套件，例如 lib/pq、go-pg、gorm、pgx，其中 <a href=\"https://github.com/go-gorm/gorm\">gorm</a> 是 GitHub 上星星數較多的專案，而且能對應到不同類型的資料庫，在 Golang 中常被使用。本文會講解如何使用 gorm 來操作 Postgres，順帶走一次後端資料庫開發的基本流程。</p>\n<h2 id=\"establish-database\"><a class=\"direct-link\" href=\"#establish-database\">#</a> Establish Database</h2>\n<p>既然要使用 ORM 來開發資料庫，當然要先有資料庫啦。Postgres 是常用到的關聯式資料，它是 web based，支援高併發，相對傳統的 SQLite 等 file based 的資料庫，更適合網路應用。</p>\n<p>要安裝 Postgres，可以用</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">choco <span class=\"token function\">install</span> postgresql -y</code></pre>\n<p>安裝包會安裝 Postgres 的程式本體，還有一些命令行工具，使用這些工具可以不用進到 Postgres 的互動介面，就能操作資料庫。</p>\n<p>接著，在專案目錄下新增資料庫資料夾，存放資料以及相關檔案</p>\n<pre><code>project\n├── cmd\n├── data\n│   └── postgres\n├── pkg\n├── scripts\n├── go.mod\n└── README.md\n</code></pre>\n<p>使用命令行工具 initdb 來初始化資料庫</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">initdb.exe -D ./data/postgres -U postgres</code></pre>\n<p>-D 是指定資料夾；-U 是指定 user。初始化後，可以看到 data/postgres 資料夾下產生出許多新檔案。</p>\n<p>有資料庫後，要將這個資料庫的服務連上網路，讓使用者使用。可以用命令行工具 pg_ctl 來執行</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">pg_ctl.exe -D ./data/postgres -l logfile start</code></pre>\n<p>-l 是 log 的位置。</p>\n<p>執行後可以看到</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">waiting <span class=\"token keyword\">for</span> server to start<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span> <span class=\"token keyword\">done</span><br>server started</code></pre>\n<p>伺服器啟動成功。</p>\n<p>在開始使用資料庫前，需要先制定資料庫的表格結構(schema)，告訴使用者資料庫有哪些欄位，資料格式是什麼，這些資料定義語言通常會用 sql 描述。</p>\n<p>為做到這件事，在 scripts 中建立一個 sql 檔案</p>\n<pre><code>project\n├── cmd\n├── data\n│   └── postgres\n├── pkg\n├── scripts\n│   └── postgres\n│       └── initialize.sql\n├── go.mod\n└── README.md\n</code></pre>\n<p>內容是</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> players <span class=\"token punctuation\">(</span><br>    id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span><br>    age <span class=\"token keyword\">SMALLINT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><br>    username <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><br>    budget <span class=\"token keyword\">INTEGER</span><br><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>意思是要創建一張名為 players 的表格，用來記錄比賽選手的資料。表格中有 id、age、username、budget 四個欄位。其中 id 是會自行增加的整數，也是主 key，用來當索引；age 是整數，不得為空；username 是字串，長度最多 50，不得為空；budget 是整數。</p>\n<p>接著用 psql 來操作 sql</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">psql -U postgres -d postgres -f scripts/postgres/initialize.sql</code></pre>\n<p>執行後，剛剛的 sql 生效，資料庫初始化完成。</p>\n<h2 id=\"connect-with-pgadmin\"><a class=\"direct-link\" href=\"#connect-with-pgadmin\">#</a> Connect with pgadmin</h2>\n<p>雖然說資料庫初始化完成，但看不到實體，還是沒有實感。這時可以先用互動式的命令行界面來看</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">psql -U postgres</code></pre>\n<p>登入後，輸入搜尋語句</p>\n<pre class=\"language-sql\"><code class=\"language-sql\">postgres<span class=\"token operator\">=</span><span class=\"token comment\"># select * from players;</span><br>id <span class=\"token operator\">|</span> age <span class=\"token operator\">|</span> username <span class=\"token operator\">|</span> budget<br><span class=\"token comment\">----+-----+----------+--------</span><br><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token keyword\">rows</span><span class=\"token punctuation\">)</span></code></pre>\n<p>如搜尋結果，表格格式跟剛剛創建的相同。</p>\n<p>但如果每次查詢都要用命令行，需要記憶大量指令，操作起來不直覺，好在 Postgres 也有提供 GUI 讓使用者操作，安裝可以用</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">choco <span class=\"token function\">install</span> pgadmin4 -y</code></pre>\n<p><img src=\"/img/posts/2020/gorm-from-init-to-use/gorm-1.png\" alt=\"\"></p>\n<p>安裝好後啟動，可以再右下角看到 pgAdmin4 的圖案</p>\n<p>由於 pgAdmin4 是 web based 的客戶端，啟動後會開啟瀏覽器網頁。可以用 Create Server 將剛剛創建好的資料庫加入</p>\n<p><img src=\"/img/posts/2020/gorm-from-init-to-use/gorm-2.png\" alt=\"\"></p>\n<p>輸入帳號密碼後連線</p>\n<p><img src=\"/img/posts/2020/gorm-from-init-to-use/gorm-3.png\" alt=\"\"></p>\n<p>在左邊的專案樹中出現連線到的 Server，底下能看到創建好的表格</p>\n<p><img src=\"/img/posts/2020/gorm-from-init-to-use/gorm-4.png\" alt=\"\"></p>\n<p>選擇 All Rows 後，就能瀏覽現在有的資料</p>\n<p><img src=\"/img/posts/2020/gorm-from-init-to-use/gorm-5.png\" alt=\"\"></p>\n<p>當然，現在什麼都還沒有。</p>\n<p>因為 web based 的設計，pgAdmin4 跟瀏覽器綁在一起，雖然適合分散式應用，但響應速度較慢、操作較麻煩，對開發初期或個人專案來講不是很方便。有些人會選擇 pgAdmin3 或是 dbeaver 這類 GUI，這邊就見仁見智，建議先都試試看，再選擇符合自己習慣的來使用。</p>\n<h2 id=\"connect-to-database\"><a class=\"direct-link\" href=\"#connect-to-database\">#</a> Connect to Database</h2>\n<p>建置完資料庫後，開始來開發應用程式，建立 cmd 並在 configs 跟 pkg 下加入需要的檔案</p>\n<pre><code>project\n├── cmd\n│   └── postgres\n│       └── main.go\n├── configs\n│   └── postgres\n│       └── config.json\n├── data\n│   └── postgres\n├── pkg\n│   └── postgres\n│       ├── client.go\n│       └── config.go\n├── scripts\n│   └── postgres\n│       └── initialize.sql\n├── go.mod\n└── README.md\n</code></pre>\n<p>pkg/client 用來建立資料庫的客戶端；pkg/config 用來設定資料庫。</p>\n<p>引入 gorm</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go get -u github.com/jinzhu/gorm</code></pre>\n<p>configs/config.json 的內容是</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"Addr\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"Port\"</span><span class=\"token operator\">:</span> <span class=\"token number\">5432</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"Username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"postgres\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"Name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"postgres\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"Password\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"postgres\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>表明連線的位置、端口、使用者帳密等。這些資訊可以用 Golang 在 pkg/config 讀出，內容是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> postgres<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"encoding/json\"</span><br>    <span class=\"token string\">\"io/ioutil\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">type</span> dbConfig <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    Addr     <span class=\"token builtin\">string</span><br>    Port     <span class=\"token builtin\">int</span><br>    Username <span class=\"token builtin\">string</span><br>    Name     <span class=\"token builtin\">string</span><br>    Password <span class=\"token builtin\">string</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">getDbConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>dbConfig <span class=\"token punctuation\">{</span><br>    config <span class=\"token operator\">:=</span> dbConfig<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>    file <span class=\"token operator\">:=</span> <span class=\"token string\">\"./configs/postgres/config.json\"</span><br>    data<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><br>    err <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>config<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>config<br><span class=\"token punctuation\">}</span></code></pre>\n<p>有設定檔的資料後，Golang 可以在 pkg/client 根據設定來建立連線，內容是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> postgres<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"github.com/jinzhu/gorm\"</span><br>    <span class=\"token comment\">// for postgres</span><br>    <span class=\"token boolean\">_</span> <span class=\"token string\">\"github.com/jinzhu/gorm/dialects/postgres\"</span><br>    <span class=\"token string\">\"fmt\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">type</span> DBClient <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    client <span class=\"token operator\">*</span>gorm<span class=\"token punctuation\">.</span>DB<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>DBClient<span class=\"token punctuation\">)</span> <span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    config <span class=\"token operator\">:=</span> <span class=\"token function\">getDbConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    client<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> gorm<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><br>        <span class=\"token string\">\"postgres\"</span><span class=\"token punctuation\">,</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><br>            <span class=\"token string\">\"host=%s port=%d user=%s dbname=%s password=%s sslmode=disable\"</span><span class=\"token punctuation\">,</span><br>            config<span class=\"token punctuation\">.</span>Addr<span class=\"token punctuation\">,</span><br>            config<span class=\"token punctuation\">.</span>Port<span class=\"token punctuation\">,</span><br>            config<span class=\"token punctuation\">.</span>Username<span class=\"token punctuation\">,</span><br>            config<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span><br>            config<span class=\"token punctuation\">.</span>Password<span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    m<span class=\"token punctuation\">.</span>client <span class=\"token operator\">=</span> client<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>DBClient<span class=\"token punctuation\">)</span> <span class=\"token function\">Disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    m<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>主要的程式碼是</p>\n<pre class=\"language-go\"><code class=\"language-go\">client<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> gorm<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"postgres\"</span><span class=\"token punctuation\">,</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><br>        <span class=\"token string\">\"host=%s port=%d user=%s dbname=%s password=%s sslmode=disable\"</span><span class=\"token punctuation\">,</span><br>        config<span class=\"token punctuation\">.</span>Addr<span class=\"token punctuation\">,</span><br>        config<span class=\"token punctuation\">.</span>Port<span class=\"token punctuation\">,</span><br>        config<span class=\"token punctuation\">.</span>Username<span class=\"token punctuation\">,</span><br>        config<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span><br>        config<span class=\"token punctuation\">.</span>Password<span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">)</span></code></pre>\n<p>gorm 的設定很單純，只要指定連線的資料庫類型；再輸入對應的參數，就能進行連線。連線後會回傳 client 供後續操作。這邊將 client 保存到 m.client 中。</p>\n<p>如果要中斷連線，則可以用</p>\n<pre class=\"language-go\"><code class=\"language-go\">m<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>有了 client 後，就能在 cmd/main.go 中使用它</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"example/pkg/postgres\"</span><br>    <span class=\"token string\">\"fmt\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    client <span class=\"token operator\">:=</span> postgres<span class=\"token punctuation\">.</span>DBClient<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>    client<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    client<span class=\"token punctuation\">.</span><span class=\"token function\">Disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"crud\"><a class=\"direct-link\" href=\"#crud\">#</a> CRUD</h2>\n<p>CRUD 是資料庫的四種操作，分別是 Create/Read/Update/Delete。前面已經連上資料庫了，接著把 CRUD 給補齊</p>\n<p>先來建模，新增 pkg/player.go</p>\n<pre><code>project\n├── cmd\n│   └── postgres\n│       └── main.go\n├── configs\n│   └── postgres\n│       └── config.json\n├── data\n│   └── postgres\n├── pkg\n│   └── postgres\n│       ├── client.go\n│       ├── player.go\n│       └── config.go\n├── scripts\n│   └── postgres\n│       └── initialize.sql\n├── go.mod\n└── README.md\n</code></pre>\n<p>內容跟前面建好的 schema 相同</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> postgres<br><br><span class=\"token comment\">// Player is player</span><br><span class=\"token keyword\">type</span> Player <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    ID <span class=\"token builtin\">int</span><br>    Age <span class=\"token builtin\">int</span><br>    Username <span class=\"token builtin\">string</span><br>    Budget <span class=\"token builtin\">int</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>修改 client 的操作，加入 Create</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>DBClient<span class=\"token punctuation\">)</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>player Player<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>    res <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>player<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> res<span class=\"token punctuation\">.</span>Error <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>Error<br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>簽名很直觀，應用端會傳入資料，client 將資料傳給資料庫，如果有錯誤就回報。</p>\n<p>加入 Read</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>DBClient<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Player<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    players <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Player<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>    res <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">Order</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>players<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> res<span class=\"token punctuation\">.</span>Error <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>Error<br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> players<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這個稍微複雜點，client 用 Find 查詢資料，並將得到的資料 assign 給 struct，由於資料可能有多筆，要使用 slice。前面的 Order 是排序用，確保得到的資料會依照 id 來排。得到資料後，將資料回傳給應用端。</p>\n<p>加入 Update</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>DBClient<span class=\"token punctuation\">)</span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span>player Player<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>    res <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>player<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> res<span class=\"token punctuation\">.</span>Error <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>Error<br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這邊改用 Save 來保存資料；gorm 的 Save 是當資料不存在時，會創建資料，資料存在時，會更新資料。用來判斷存不存在的依據是 id，應用端傳下來的值應該要帶 id，才能有更新的效果。</p>\n<p>加入 Delete</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>DBClient<span class=\"token punctuation\">)</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>player Player<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>    res <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>player<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> res<span class=\"token punctuation\">.</span>Error <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>Error<br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>很直觀，就是刪除，值得注意的是 gorm 有特別說明</p>\n<blockquote>\n<p>Delete delete value match given conditions, if the value has primary key, then will including the primary key as condition<br>\nWARNING If model has DeletedAt field, GORM will only set field DeletedAt’s value to current time</p>\n</blockquote>\n<p>記得要帶主 key，以免找不到條件而刪除整張表格；有時在資料庫應用中，因為有稽核與回滾的需求，不希望刪除資料，取而代之是使用標記的方式來表示該資料已經不被使用了。如果要標記刪除，可以用 DeletedAt 這個欄位。</p>\n<p>建好 CRUD 後，在應用端也加入對應的使用</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    client <span class=\"token operator\">:=</span> postgres<span class=\"token punctuation\">.</span>DBClient<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>    client<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    player <span class=\"token operator\">:=</span> postgres<span class=\"token punctuation\">.</span>Player<span class=\"token punctuation\">{</span><br>        Age<span class=\"token punctuation\">:</span>      <span class=\"token number\">18</span><span class=\"token punctuation\">,</span><br>        Username<span class=\"token punctuation\">:</span> <span class=\"token string\">\"ken\"</span><span class=\"token punctuation\">,</span><br>        Budget<span class=\"token punctuation\">:</span>   <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><br>    client<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">)</span><br>    players<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span><br>        players<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Budget <span class=\"token operator\">=</span> <span class=\"token number\">2000</span><br>        client<span class=\"token punctuation\">.</span><span class=\"token function\">Update</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    client<span class=\"token punctuation\">.</span><span class=\"token function\">Disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>編譯並執行程式碼，可以在 pgAdmin 上看到結果</p>\n<p><img src=\"/img/posts/2020/gorm-from-init-to-use/gorm-6.png\" alt=\"\"></p>\n<p>執行多次，可以看到每次執行都會增加一筆，同時 id = 2 的資料 budget 被改成 2000</p>\n<p><img src=\"/img/posts/2020/gorm-from-init-to-use/gorm-7.png\" alt=\"\"></p>\n<h2 id=\"join\"><a class=\"direct-link\" href=\"#join\">#</a> Join</h2>\n<p>有時候會需要同時取得兩張表格的資料，並合成一張大表格，在資料庫的操作中稱為 Join。來看一個情境，假設現在新增一張 games 的表格，用來表示比賽的地點、勝利選手、獎金。可以修改 sql 為</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> players<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> games<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> players <span class=\"token punctuation\">(</span><br>    id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span><br>    age <span class=\"token keyword\">SMALLINT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><br>    username <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><br>    budget <span class=\"token keyword\">INTEGER</span><br><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> games <span class=\"token punctuation\">(</span><br>    id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span><br>    winner_id <span class=\"token keyword\">SMALLINT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><br>    location <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><br>    prize <span class=\"token keyword\">INTEGER</span><br><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>並在 pkg 下建立新模型 game.go</p>\n<pre><code>project\n├── cmd\n│   └── postgres\n│       └── main.go\n├── configs\n│   └── postgres\n│       └── config.json\n├── data\n│   └── postgres\n├── pkg\n│   └── postgres\n│       ├── client.go\n│       ├── player.go\n│       ├── game.go\n│       └── config.go\n├── scripts\n│   └── postgres\n│       └── initialize.sql\n├── go.mod\n└── README.md\n</code></pre>\n<p>內容是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> postgres<br><br><span class=\"token comment\">// Game is game</span><br><span class=\"token keyword\">type</span> Game <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    ID       <span class=\"token builtin\">int</span><br>    WinnerID <span class=\"token builtin\">int</span><br>    Location <span class=\"token builtin\">string</span><br>    Prize    <span class=\"token builtin\">int</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>現在有個需求，希望查詢選手時，能一併查詢出該選手贏得的比賽，這時就可以透過 Join 來完成。</p>\n<p>在原本的 game.go 中新增一個擴增表格用的結構</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// JoinResult is join result</span><br><span class=\"token keyword\">type</span> JoinResult <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    Player<br>    Game<br><span class=\"token punctuation\">}</span></code></pre>\n<p>因為 Golang 組合的特性，直接用兩個子結構合併即可。</p>\n<p>在 client 的使用中新增 Join</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>DBClient<span class=\"token punctuation\">)</span> <span class=\"token function\">GetPlayerJoinGame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>JoinResult<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    results <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>JoinResult<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>    res <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"players\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Joins</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inner join games on players.id = games.winner_id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>results<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> res<span class=\"token punctuation\">.</span>Error <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>Error<br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Join 的條件是 player 的 id 等於 game 的 winner_id，就將兩者表示為同一列。得到的結果用 Scan 裝進 results 結構中。</p>\n<p>用 pgAdmin 手動新增一筆 game 的資料</p>\n<p><img src=\"/img/posts/2020/gorm-from-init-to-use/gorm-8.png\" alt=\"\"></p>\n<p>在應用端加入查詢，並印出</p>\n<pre class=\"language-go\"><code class=\"language-go\">results<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">GetPlayerJoinGame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>client<span class=\"token punctuation\">.</span><span class=\"token function\">Disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>編譯並執行，得到</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span> <span class=\"token number\">18</span> ken <span class=\"token number\">2000</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> New York <span class=\"token number\">3000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n<p>前一個 {} 是選手的資料；後一個 {} 是比賽的資料。透過單次查詢，得到兩個表格的資料並放入同一個結構中。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>跑完 CRUD 後，覺得 gorm 的用法比想像中直覺，反而是前面建置資料庫的步驟比較麻煩。Golang 以組合來替代繼承的哲學，的確讓它在操作資料庫上顯得更輕巧。但錯誤處理的方式還是有些繁瑣，某程度上，會有種 Golang 希望開發者對於第三方套件保持警戒的味道在。</p>\n<p>很有意思的是，如果使用 Wireshark 來看，gorm 的查詢會是</p>\n<p><img src=\"/img/posts/2020/gorm-from-init-to-use/gorm-9.png\" alt=\"\"></p>\n<p>如果熟悉 Postgres 的通訊協定的話，也許可以成為效能優化的參考。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://github.com/go-gorm/gorm\">Gorm GitHub</a></li>\n<li><a href=\"https://medium.com/@shengyou/-2018ironman-eos-for-php-developer-day28-19521bffeb7d\">[2018 鐵人賽] 簡潔高效的 PHP &amp; Laravel 工作術：從 elementary OS 下手的聰明改造提案 #28</a></li>\n<li><a href=\"https://docs.postgresql.tw/\">Postgres 正體中文使用手冊</a></li>\n</ul>\n",
      "date_published": "2020-07-26T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2020/publish-subscribe-pattern-by-go/",
      "url": "https://blog.kenwsc.com/posts/2020/publish-subscribe-pattern-by-go/",
      "title": "模組間的解耦合：發佈/訂閱模型",
      "content_html": "<p>Observer Pattern 是物件導向常用的架構，例如多個 Chart 與單一 Data Source 的互動，就可以使用 Observer Pattern 設計，好避免資料不同步的問題。而且 Observer Pattern 可以切開 Subject 跟 Observer，讓個別模組的功能更明確，修改副作用更小。</p>\n<p>Golang 的哲學是簡單，語言上更強調小元件的延展與復用，例如使用組合取代繼承，使用 Goroutine 取代 Thread 等。本文會講解怎麼使用 channel 來實現 Observer Pattern，或者更現代的說法，實現 Publish/Subscribe 的架構，來建構彼此獨立的模組。</p>\n<h2 id=\"introduce-observer-pattern\"><a class=\"direct-link\" href=\"#introduce-observer-pattern\">#</a> Introduce Observer Pattern</h2>\n<p>先來對 Observer Pattern 做個解說。依照 GoF 的物件導向經典《Design Pattern》，Observer Pattern 的需求場景是</p>\n<blockquote>\n<p>定義對象間的一種一對多的依賴關係，當一個對象的狀態發生改變時，所有依賴於它的對象都得到通知並被自動更新。</p>\n</blockquote>\n<p>我們可以想像成訂閱報紙的情境，當現在有個新的事件發生，所有有訂閱報紙的讀者，都可以收到最新的事件訊息，讀者可以根據這個訊息來採取反應，例如買賣股票、規劃行程、改變計劃等。報紙的發行人不知道讀者會採取什麼行動，它只負責將消息傳遞給讀者。</p>\n<p>如果將 Observer Pattern 用 Class Diagram 來表示，會是</p>\n<p><img src=\"/img/posts/2020/publish-subscribe-pattern-by-go/pattern-1.png\" alt=\"\"></p>\n<p>由圖中可以看到，主要分成兩個物件，Subject 知道有誰訂閱，當發生消息時，會 Notify 所有訂閱者，要求它們 Update；Observer 則實作 Update，會由 Subject 中取得最新資料，以供後續使用。將前後順序用 Sequence Diagram 來表示後，就會是</p>\n<p><img src=\"/img/posts/2020/publish-subscribe-pattern-by-go/pattern-2.png\" alt=\"\"></p>\n<h2 id=\"design-pub%2Fsub-module\"><a class=\"direct-link\" href=\"#design-pub%2Fsub-module\">#</a> Design Pub/Sub Module</h2>\n<p>我們的需求是設計一個發佈/訂閱的模組，用於支撐商業邏輯的開發。這個模組類似於中間人的角色，發佈者透過這個模組來發佈訊息，模組也會負責將收到的訊息轉發給訂閱者。</p>\n<p>專案架構為</p>\n<pre><code>project\n├── cmd\n├── pkg\n│   └── pubsub\n│       └── pubsub.go\n├── scripts\n│   └── build_win.bat\n├── go.mod\n└── README.md\n</code></pre>\n<p>完整的程式碼如下</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> pubsub<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"fmt\"</span><br>    <span class=\"token string\">\"sync\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// DataType is data type of message</span><br><span class=\"token keyword\">type</span> DataType <span class=\"token builtin\">string</span><br><br><span class=\"token comment\">// Client is a client of pub/sub pattern</span><br><span class=\"token keyword\">type</span> Client <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    writer  <span class=\"token keyword\">chan</span> DataType<br>    readers <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">chan</span> DataType<br>    mutex   sync<span class=\"token punctuation\">.</span>Mutex<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Pub publish message</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Client<span class=\"token punctuation\">)</span> <span class=\"token function\">Pub</span><span class=\"token punctuation\">(</span>data DataType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    m<span class=\"token punctuation\">.</span>writer <span class=\"token operator\">&lt;-</span> data<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Sub subscribe message</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Client<span class=\"token punctuation\">)</span> <span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span>handler <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>DataType<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    m<span class=\"token punctuation\">.</span>mutex<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">defer</span> m<span class=\"token punctuation\">.</span>mutex<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    readChannel <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> DataType<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><br>    m<span class=\"token punctuation\">.</span>readers <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>readers<span class=\"token punctuation\">,</span> readChannel<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>            data <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>readChannel<br>            <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>                fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// NewClient new a client</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">NewClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Client <span class=\"token punctuation\">{</span><br>    broker <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Client<span class=\"token punctuation\">{</span><br>        writer<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> DataType<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>            data <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>broker<span class=\"token punctuation\">.</span>writer<br>            <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> reader <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> broker<span class=\"token punctuation\">.</span>readers <span class=\"token punctuation\">{</span><br>                reader <span class=\"token operator\">&lt;-</span> data<br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> broker<br><span class=\"token punctuation\">}</span></code></pre>\n<p>一段一段來看。</p>\n<p>首先定義訊息格式 DataType，假設為 string，但可依照需求自行定義，如果要傳輸的格式比較複雜，也可以定義成 struct</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// DataType is data type of message</span><br><span class=\"token keyword\">type</span> DataType <span class=\"token builtin\">string</span></code></pre>\n<p>定義用戶端，讓創建此用戶端的人，可以進行 pub/sub。這邊用 channel 做為 pub/sub 溝通的管道。</p>\n<p>channel 在 Golang 中，類似 Linux 的 pipeline 概念，常用於在兩個不同的 Go routine 間傳遞資料。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*y05M3ztJWGbFsn-u\" alt=\"https://www.slideshare.net/ssuser9ebf46/golang-101\"><em><a href=\"https://www.slideshare.net/ssuser9ebf46/golang-101\">https://www.slideshare.net/ssuser9ebf46/golang-101</a></em></p>\n<p>writer 這個 channel 用於接受發佈訊息，經由中間人的 Goroutine 後，會將訊息用各訂閱的 channel readers，轉交給訂閱者的 Goroutine</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Client is a client of pub/sub pattern</span><br><span class=\"token keyword\">type</span> Client <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    writer  <span class=\"token keyword\">chan</span> DataType<br>    readers <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">chan</span> DataType<br>    mutex   sync<span class=\"token punctuation\">.</span>Mutex<br><span class=\"token punctuation\">}</span></code></pre>\n<p>實現 pub 的邏輯，當使用者輸入訊息後，將此訊息丟到 channel 中</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Pub publish message</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Client<span class=\"token punctuation\">)</span> <span class=\"token function\">Pub</span><span class=\"token punctuation\">(</span>data DataType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    m<span class=\"token punctuation\">.</span>writer <span class=\"token operator\">&lt;-</span> data<br><span class=\"token punctuation\">}</span></code></pre>\n<p>實現 sub 的邏輯，當使用者訂閱時，創建一個新的 channel，並將它加入 readers 的陣容內，同時啟動 Goroutine，持續監聽這個 channel。如果有任何訊息進來，調用使用者註冊的 handler 來處理這則訊息。</p>\n<p>Goroutine 是 Golang 的最大特色，類似其他語言中的 Thread，中文翻成協程，相對 Thread 輕量，適合用在高併發的場景。它的底層對應到內部的 scheduler，會根據當前的狀況來決定調用哪個 Goroutine。我們利用 Go routine 來實現 Publish/Subscribe 的架構，可以更有效率處理訂閱問題。</p>\n<p>使用 Goroutine 只要用關鍵字 go 即可</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Sub subscribe message</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Client<span class=\"token punctuation\">)</span> <span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span>handler <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>DataType<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    m<span class=\"token punctuation\">.</span>mutex<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">defer</span> m<span class=\"token punctuation\">.</span>mutex<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    readChannel <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> DataType<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><br>    m<span class=\"token punctuation\">.</span>readers <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>readers<span class=\"token punctuation\">,</span> readChannel<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>            data <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>readChannel<br>            <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>                fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>接著建立 writer 與 readers 間的轉發關係。</p>\n<p>當 Client 初始化時，建立 writer，同時用 Goroutine 來監看 writer，如果 writer 內有任何的訊息，Goroutine 會遍歷 readers，將消息轉發給 readers。</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// NewClient new a client</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">NewClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Client <span class=\"token punctuation\">{</span><br>    broker <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Client<span class=\"token punctuation\">{</span><br>    writer<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> DataType<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>            data <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>broker<span class=\"token punctuation\">.</span>writer<br>            <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> reader <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> broker<span class=\"token punctuation\">.</span>readers <span class=\"token punctuation\">{</span><br>                reader <span class=\"token operator\">&lt;-</span> data<br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> broker<br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"step-3%3A-use-pub%2Fsub-module\"><a class=\"direct-link\" href=\"#step-3%3A-use-pub%2Fsub-module\">#</a> Step 3: Use Pub/Sub Module</h2>\n<p>完成模組開發後，再來就是使用模組了，新增使用的主程式</p>\n<pre><code>project\n├── cmd\n│   └── pubsub\n│       └── main.go\n├── pkg\n│   └── pubsub\n│       └── pubsub.go\n├── scripts\n│   └── build_win.bat\n├── go.mod\n└── README.md\n</code></pre>\n<p>內容是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"errors\"</span><br>    <span class=\"token string\">\"example/pkg/pubsub\"</span><br>    <span class=\"token string\">\"fmt\"</span><br>    <span class=\"token string\">\"time\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    client <span class=\"token operator\">:=</span> pubsub<span class=\"token punctuation\">.</span><span class=\"token function\">NewClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">var</span> printMessage <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>pubsub<span class=\"token punctuation\">.</span>DataType<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><br>    printMessage <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>msg pubsub<span class=\"token punctuation\">.</span>DataType<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> msg <span class=\"token operator\">==</span> <span class=\"token string\">\"error\"</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is an error\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br>    <span class=\"token punctuation\">}</span><br>    client<span class=\"token punctuation\">.</span><span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span>printMessage<span class=\"token punctuation\">)</span><br>    client<span class=\"token punctuation\">.</span><span class=\"token function\">Pub</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><br>    client<span class=\"token punctuation\">.</span><span class=\"token function\">Pub</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><br>    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>使用模組內的初始化函式（因為 Golang 不是物件導向語言，沒有建構式），來取得要使用的 client</p>\n<pre class=\"language-go\"><code class=\"language-go\">client <span class=\"token operator\">:=</span> pubsub<span class=\"token punctuation\">.</span><span class=\"token function\">NewClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>建立 handler 做為訂閱時的 callback function，當訂閱的訊息出現時，調用這個 handler 來處理。這裡建立的 handler 會判斷訊息是不是 error 這個字串，如果是的話，回傳錯誤訊息，否則正常印出訊息</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> printMessage <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>pubsub<span class=\"token punctuation\">.</span>DataType<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><br>printMessage <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>msg pubsub<span class=\"token punctuation\">.</span>DataType<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> msg <span class=\"token operator\">==</span> <span class=\"token string\">\"error\"</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is an error\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>最後訂閱與發佈訊息</p>\n<p>用 Sub 註冊訂閱用的 handler；用 Pub 發佈訊息。發佈的訊息有兩則，第一則是正常訊息，內容是 Hello；第二則是 error 訊息，如果正常運行的話，會讓 handler 回傳錯誤</p>\n<pre class=\"language-go\"><code class=\"language-go\">client<span class=\"token punctuation\">.</span><span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span>printMessage<span class=\"token punctuation\">)</span><br>client<span class=\"token punctuation\">.</span><span class=\"token function\">Pub</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><br>client<span class=\"token punctuation\">.</span><span class=\"token function\">Pub</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><br>time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span></code></pre>\n<p>實際執行</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">D:<span class=\"token punctuation\">\\</span>git<span class=\"token punctuation\">\\</span>golang-project<span class=\"token operator\">></span>.<span class=\"token punctuation\">\\</span>bin<span class=\"token punctuation\">\\</span>pubsub.exe<br>Hello<br>this is an error</code></pre>\n<p>得到訊息內容跟 error！</p>\n<h2 id=\"multiple-topic\"><a class=\"direct-link\" href=\"#multiple-topic\">#</a> Multiple Topic</h2>\n<p>在前面的設計中，已經可以進行發佈跟訂閱了，但如果想要訂閱多個主題，就需要建立多個 client，用起來很麻煩，這衍生出新的需求：我們需要擴充原來的介面，使它可以支持多主題訂閱</p>\n<p>回去修改模組為</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> pubsub<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"fmt\"</span><br>    <span class=\"token string\">\"sync\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// DataType is data type of message</span><br><span class=\"token keyword\">type</span> DataType <span class=\"token builtin\">string</span><br><br><span class=\"token comment\">// MessageChannel is a channel of pub/sub pattern</span><br><span class=\"token keyword\">type</span> MessageChannel <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    writer  <span class=\"token keyword\">chan</span> DataType<br>    readers <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">chan</span> DataType<br>    mutex   sync<span class=\"token punctuation\">.</span>Mutex<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Client is client of pub/sub pattern</span><br><span class=\"token keyword\">type</span> Client <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    topic <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>MessageChannel<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Pub publish message</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Client<span class=\"token punctuation\">)</span> <span class=\"token function\">Pub</span><span class=\"token punctuation\">(</span>topic <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> data DataType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    m<span class=\"token punctuation\">.</span>topic<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>writer <span class=\"token operator\">&lt;-</span> data<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Sub subscribe message</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Client<span class=\"token punctuation\">)</span> <span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span>topic <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handler <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>DataType<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    m<span class=\"token punctuation\">.</span>topic<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mutex<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">defer</span> m<span class=\"token punctuation\">.</span>topic<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mutex<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    readChannel <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> DataType<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><br>    m<span class=\"token punctuation\">.</span>topic<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>readers <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>topic<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>readers<span class=\"token punctuation\">,</span> readChannel<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>            data <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>readChannel<br>            <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>                fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// AddTopic publish message</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Client<span class=\"token punctuation\">)</span> <span class=\"token function\">AddTopic</span><span class=\"token punctuation\">(</span>topic <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    m<span class=\"token punctuation\">.</span>topic<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>MessageChannel<span class=\"token punctuation\">{</span><br>        writer<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> DataType<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>            data <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>m<span class=\"token punctuation\">.</span>topic<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>writer<br>            <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> reader <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> m<span class=\"token punctuation\">.</span>topic<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>readers <span class=\"token punctuation\">{</span><br>                reader <span class=\"token operator\">&lt;-</span> data<br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// NewClient new a client</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">NewClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Client <span class=\"token punctuation\">{</span><br>    client <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Client<span class=\"token punctuation\">{</span><br>        topic<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>MessageChannel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> client<br><span class=\"token punctuation\">}</span></code></pre>\n<p>在原來的架構上，再抽象一層，重新命名原來的 Client 為 MessageChannel，負責各 Topic 的實際執行。上面則建立新的 Client，內部是一個 map，可以放置多個 MessageChannel，好實現多主題的訂閱</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// MessageChannel is a channel of pub/sub pattern</span><br><span class=\"token keyword\">type</span> MessageChannel <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    writer  <span class=\"token keyword\">chan</span> DataType<br>    readers <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">chan</span> DataType<br>    mutex   sync<span class=\"token punctuation\">.</span>Mutex<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Client is client of pub/sub pattern</span><br><span class=\"token keyword\">type</span> Client <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    topic <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>MessageChannel<br><span class=\"token punctuation\">}</span></code></pre>\n<p>當 Pub/Sub 時，會取出對應 Topic 的 MessageChannel，進行 Pub/Sub</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Pub publish message</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Client<span class=\"token punctuation\">)</span> <span class=\"token function\">Pub</span><span class=\"token punctuation\">(</span>topic <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> data DataType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    m<span class=\"token punctuation\">.</span>topic<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>writer <span class=\"token operator\">&lt;-</span> data<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Sub subscribe message</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Client<span class=\"token punctuation\">)</span> <span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span>topic <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handler <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>DataType<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    m<span class=\"token punctuation\">.</span>topic<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mutex<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">defer</span> m<span class=\"token punctuation\">.</span>topic<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mutex<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    readChannel <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> DataType<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><br>    m<span class=\"token punctuation\">.</span>topic<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>readers <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>topic<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>readers<span class=\"token punctuation\">,</span> readChannel<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>            data <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>readChannel<br>            <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>                fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>新增 AddTopic，當使用者要使用新的 Topic 時，會在內部建立轉發機制</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// AddTopic publish message</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>Client<span class=\"token punctuation\">)</span> <span class=\"token function\">AddTopic</span><span class=\"token punctuation\">(</span>topic <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    m<span class=\"token punctuation\">.</span>topic<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>MessageChannel<span class=\"token punctuation\">{</span><br>        writer<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> DataType<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span><br>            data <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>m<span class=\"token punctuation\">.</span>topic<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>writer<br>            <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> reader <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> m<span class=\"token punctuation\">.</span>topic<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>readers <span class=\"token punctuation\">{</span><br>                reader <span class=\"token operator\">&lt;-</span> data<br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>同時修改使用的程式碼 main.go，改為</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    client <span class=\"token operator\">:=</span> pubsub<span class=\"token punctuation\">.</span><span class=\"token function\">NewClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    client<span class=\"token punctuation\">.</span><span class=\"token function\">AddTopic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><br>    client<span class=\"token punctuation\">.</span><span class=\"token function\">AddTopic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"echo\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">var</span> printMessage <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>msg pubsub<span class=\"token punctuation\">.</span>DataType<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> msg <span class=\"token operator\">==</span> <span class=\"token string\">\"error\"</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is an error\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">var</span> echoMessage <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>msg pubsub<span class=\"token punctuation\">.</span>DataType<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>msg <span class=\"token operator\">+</span> <span class=\"token string\">\" nice to meet you!\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br>    <span class=\"token punctuation\">}</span><br>    client<span class=\"token punctuation\">.</span><span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> printMessage<span class=\"token punctuation\">)</span><br>    client<span class=\"token punctuation\">.</span><span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"echo\"</span><span class=\"token punctuation\">,</span> echoMessage<span class=\"token punctuation\">)</span><br>    client<span class=\"token punctuation\">.</span><span class=\"token function\">Pub</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><br>    client<span class=\"token punctuation\">.</span><span class=\"token function\">Pub</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><br>    client<span class=\"token punctuation\">.</span><span class=\"token function\">Pub</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"echo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Go\"</span><span class=\"token punctuation\">)</span><br>    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>在這個例子中，對 hello、echo 兩個 topic 進行訂閱</p>\n<pre class=\"language-go\"><code class=\"language-go\">client<span class=\"token punctuation\">.</span><span class=\"token function\">AddTopic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><br>client<span class=\"token punctuation\">.</span><span class=\"token function\">AddTopic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"echo\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>兩個訂閱有不同的 handler。echo 除了印出訊息外，也副加其他內容</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> echoMessage <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>msg pubsub<span class=\"token punctuation\">.</span>DataType<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>msg <span class=\"token operator\">+</span> <span class=\"token string\">\" nice to meet you!\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>對兩個 Topic 進行發佈/訂閱</p>\n<pre class=\"language-go\"><code class=\"language-go\">client<span class=\"token punctuation\">.</span><span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> printMessage<span class=\"token punctuation\">)</span><br>client<span class=\"token punctuation\">.</span><span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"echo\"</span><span class=\"token punctuation\">,</span> echoMessage<span class=\"token punctuation\">)</span><br>client<span class=\"token punctuation\">.</span><span class=\"token function\">Pub</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><br>client<span class=\"token punctuation\">.</span><span class=\"token function\">Pub</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><br>client<span class=\"token punctuation\">.</span><span class=\"token function\">Pub</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"echo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Go\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>確認成果</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">Go <span class=\"token function\">nice</span> to meet you<span class=\"token operator\">!</span><br>Hello<br>This is an error</code></pre>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>用 Golang 完成 Pub/Sub 模型後，可以回去跟標準的 Observer Pattern 比較。兩者的概念是類似的，中間都有一段程式碼負責轉發訊息，在 Observer Pattern 是 Notify，在我們的設計中，是 AddTopic 的 Goroutine。</p>\n<p>Observer Pattern 在設計上，是由發佈者調用 Subject 的函式 SetState 來發佈訊息，再由各訂閱者自行調用 Subject 的函式來獲得訂閱的訊息，Subject 在中間只充當通知的角色。整個動作是由發佈者發起，並在發佈者的 thread 中執行，如果想要併發的效果，則需要另外設計。</p>\n<p><img src=\"/img/posts/2020/publish-subscribe-pattern-by-go/pattern-3.png\" alt=\"\"></p>\n<p>Golang 由於有 Goroutine 跟 channel，在設計上可以更精巧，發佈者與訂閱者都有各自獨立的 Goroutine 在處理，效率高得多；而且因為有 channel 的存在，使得 Goroutine 推送或接收訊息時，無須理會其他模組的執行狀況，即使有 Fail 的情形，也不會影響到其他模組。簡單講，因為併發實現的成本降低了，可以更容易享受到併發的優勢。</p>\n<p>在設計處理上，Golang 似乎認為 OOP 過早強調設計，導致編寫程式碼時，都需要先定義類別，這樣會讓程式碼因為類別而硬化，重構時需要反覆對類別進行 Push Up 跟 Push Down，有看過 Martin Fowler 的《Refactoring》應該會很有感，整本書的精神就在講如何重新設計類別。</p>\n<p>Golang 的概念更偏向使用時才設計，例如處理函式不用放在事先定義的 Update 中，而是訂閱時才有的 echoMessage，某程度上，Golang 不強調模型，而是強調使用。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://tour.golang.org/concurrency/1\">A Tour of Go</a></li>\n</ul>\n",
      "date_published": "2020-07-13T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2020/use-protobuf-in-golang/",
      "url": "https://blog.kenwsc.com/posts/2020/use-protobuf-in-golang/",
      "title": "一種更緊湊的數據格式：Protobuf 入門",
      "content_html": "<p>Protocol buffers，簡稱 Protobuf，是由 Google 設計的結構化序列化資料技術。對網路應用來講，常常需要在不同的伺服端、客戶端之間交換資料，這些資料格式有 XML、JSON 等等之類。XML 特點是完整，便於記載更多的 meta data，但格式複雜，需要更強的效能來解析，傳輸時也需要更多頻寬；而 JSON 是 JavaScript 用於表示物件的語法，相對 XML 來得簡潔，隨著 JavaScript 普及，也變成現在常用的輕量級資料交換格式。</p>\n<p>儘管 XML 跟 JSON 在當前網路應用中已經相當常見，但用不同語言開發的伺服端程式，都需要分別實現自己語言的 XML 或 JSON 解析，同時，這些格式定義也是團隊協作的痛點。假設 A 團隊開發某支應用，因為開發時沒有定義文件，只用 Email 跟 B 團隊說明，如果說明得不夠清楚，就會導致 B 團隊在交換資料時格式錯誤，需要好幾個來回，才能釐清彼此應該實現的格式。</p>\n<p>Protobuf 對這些問題有它的看法，本文會使用 Protobuf 來序列化資料，搭配 Golang 寫個簡單的讀檔寫檔程式，體會一下 Protobuf 的設計特點。</p>\n<h2 id=\"prepare-environment\"><a class=\"direct-link\" href=\"#prepare-environment\">#</a> Prepare Environment</h2>\n<p>Prorobuf 使用前，需要依據格式定義文件 proto file 來編譯訊息，編譯用工具是 protoc，可以到官網下載，或使用</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">choco <span class=\"token function\">install</span> protoc</code></pre>\n<p>來安裝，安裝後輸入</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">PS C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>ken<span class=\"token operator\">></span> protoc --version<br>libprotoc <span class=\"token number\">3.12</span>.3</code></pre>\n<p>來確認版本。版本號很重要，跟 Google 其他的工具一樣，不同版本間可能有相容問題，使用時盡量依照語意化版本的方式選用對應版本。</p>\n<p>Protobuf 用於結構化訊息的方法，是先將格式定義好，再用定義好的格式來產生序列化訊息，可以參考官方說明</p>\n<blockquote>\n<p>You define how you want your data to be structured once, then you can use special generated source code to easily write and read your structured data to and from a variety of data streams and using a variety of languages.</p>\n</blockquote>\n<p>因為包含 Code Generator，Protobuf 可以相容多種語言，常見的 C++、C#、Java 等等都在支援中。</p>\n<p>參照 Golang 的專案目錄，建個 pb 來放置 proto file</p>\n<pre><code>project\n├── cmd\n├── pkg\n├── scripts\n|   └── build_win.bat\n├── pb\n|   └── person.proto\n|── go.mod\n└── README.md\n</code></pre>\n<p>檔案內容是</p>\n<pre class=\"language-protobuf\"><code class=\"language-protobuf\"><span class=\"token keyword\">syntax</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"proto3\"</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">package</span> person<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">message</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token builtin\">string</span> name <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>    <span class=\"token builtin\">string</span> address <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><br>    <span class=\"token builtin\">string</span> gender <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><br>    <span class=\"token builtin\">int32</span> age <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>syntax 是版本，用於跟 proto2 區別；package 是這份 proto file 所屬的套件名稱；message 用於定義訊息結構。假設訊息結構是 Person，其中包含姓名、地址、性別、年齡等欄位，用於表示 Person 的資料。各欄位等號後數字是用於區別欄位，如果開發中需要新增欄位，可以直接在 field 中使用新數字，即可無痛向後相容。</p>\n<h2 id=\"use-protobuf-command-line-tool\"><a class=\"direct-link\" href=\"#use-protobuf-command-line-tool\">#</a> Use Protobuf Command Line Tool</h2>\n<p>材料準備好後，來試著用 protoc 序列化訊息。前面已經定義好的格式了，這邊將需要傳輸的內容寫在 sample.txt</p>\n<pre><code>name: &quot;Ken Chen&quot;\naddress: &quot;New Taipei City&quot;\ngender: &quot;Male&quot;\nage: 18\n</code></pre>\n<p>引號後面是 proto 欄位的值，格式類似 JSON，可以參考官方說明。</p>\n<p>然後用 protoc 來序列化訊息</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">protoc --encode person.Person ./pb/person.proto <span class=\"token operator\">></span> encode.txt <span class=\"token operator\">&lt;</span> sample.txt<br><span class=\"token builtin class-name\">type</span> encode.txt<br><br>Ken ChenNew Taipei CityMale</code></pre>\n<p>最底下那串是序列化後的訊息，可以看到 string 還留著，但 field 跟 number 都被序列化成 byte 訊息了。</p>\n<p>這些序列化完成的訊息，可以再用 protoc 反序列化回來，變成人眼可讀</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">protoc --decode person.Person ./pb/person.proto <span class=\"token operator\">&lt;</span> encode.txt<br>name: <span class=\"token string\">\"Ken Chen\"</span><br>address: <span class=\"token string\">\"New Taipei City\"</span><br>gender: <span class=\"token string\">\"Male\"</span><br>age: <span class=\"token number\">18</span></code></pre>\n<p>我們將傳輸內容序列化、寫進檔案、讀出、反序列化，這就是個簡單的傳輸過程。</p>\n<h2 id=\"prepare-golang-environment\"><a class=\"direct-link\" href=\"#prepare-golang-environment\">#</a> Prepare Golang Environment</h2>\n<p>驗證 Protobuf 的使用流程後，接著要將 Protobuf 的機制放到自行開發的應用程式中。</p>\n<p>先下載 Golang 的 Protobuf 套件</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go get google.golang.org/protobuf/cmd/protoc-gen-go</code></pre>\n<p>修改 proto file，讓它帶有 Golang Package 的資訊</p>\n<pre class=\"language-protobuf\"><code class=\"language-protobuf\"><span class=\"token keyword\">syntax</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"proto3\"</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">option</span> go_package <span class=\"token operator\">=</span> <span class=\"token string\">\"example/pkg/pb/person\"</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">package</span> person<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">message</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token builtin\">string</span> name <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>    <span class=\"token builtin\">string</span> address <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><br>    <span class=\"token builtin\">string</span> gender <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><br>    <span class=\"token builtin\">int32</span> age <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>使用 protoc 中的 Code Generator 來產生 go 的程式碼</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">protoc --go_out<span class=\"token operator\">=</span>./ --go_opt<span class=\"token operator\">=</span>paths<span class=\"token operator\">=</span>source_relative ./pb/*.proto</code></pre>\n<p>go_out 是產出文件的路徑；我們將 pb 的所有 proto file 都產生一份對應的 go 程式碼</p>\n<p>可以看看產出文件 person.pb.go 的開頭</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Code generated by protoc-gen-go. DO NOT EDIT.</span><br><span class=\"token comment\">// versions:</span><br><span class=\"token comment\">//  protoc-gen-go v1.25.0</span><br><span class=\"token comment\">//  protoc        v3.12.3</span><br><span class=\"token comment\">// source: pb/person.proto</span><br><br><span class=\"token keyword\">package</span> person<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    proto <span class=\"token string\">\"github.com/golang/protobuf/proto\"</span><br>    protoreflect <span class=\"token string\">\"google.golang.org/protobuf/reflect/protoreflect\"</span><br>    protoimpl <span class=\"token string\">\"google.golang.org/protobuf/runtime/protoimpl\"</span><br>    reflect <span class=\"token string\">\"reflect\"</span><br>    sync <span class=\"token string\">\"sync\"</span><br><span class=\"token punctuation\">)</span></code></pre>\n<p>如第一行寫的，這是產出文件，看看就好，不要修改它。如果有一些客製化應用，希望在既有的 Protobuf struct 加上自己的 method，建議可以用 go package 的機制，在同目錄底下放 patch.go 文件來新增。</p>\n<p>把產出的文件放到專案路徑 pkg，變成</p>\n<pre><code>project\n├── cmd\n├── pkg\n|   └── person\n|      └── person.pb.go\n├── scripts\n|   └── build_win.bat\n├── pb\n|   └── person.proto\n|── go.mod\n└── README.md\n</code></pre>\n<h2 id=\"read%2Fwrite-data-in-golang\"><a class=\"direct-link\" href=\"#read%2Fwrite-data-in-golang\">#</a> Read/Write Data in Golang</h2>\n<p>可以來寫點應用了，在 cmd 下新增 go 程式碼</p>\n<pre><code>project\n├── cmd\n|   └── proto\n|      └── main.go\n├── pkg\n|   └── person\n|      └── person.pb.go\n├── scripts\n|   └── build_win.bat\n├── pb\n|   └── person.proto\n|── go.mod\n└── README.md\n</code></pre>\n<p>內容是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"example/pkg/person\"</span><br>    <span class=\"token string\">\"fmt\"</span><br>    <span class=\"token string\">\"io/ioutil\"</span><br><br>    <span class=\"token string\">\"github.com/golang/protobuf/proto\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    data<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"encode.txt\"</span><span class=\"token punctuation\">)</span><br>    msg <span class=\"token operator\">:=</span> person<span class=\"token punctuation\">.</span>Person<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>    err <span class=\"token operator\">:=</span> proto<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>Gender<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>Age<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>由於前面已經用 protoc 產生序列化後的檔案 encode.txt，這裡可以讀取該檔來驗證程式。example/pkg/person 是引入剛剛產出的 go 套件。使用 ioutil 讀檔，再用 proto.Umarshal 反序列化成 struct，最後印出。</p>\n<p>編譯並執行，看看結果</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">.<span class=\"token punctuation\">\\</span>bin<span class=\"token punctuation\">\\</span>proto.exe<br>Ken Chen Male New Taipei City <span class=\"token number\">18</span></code></pre>\n<p>可以看到欄位值跟 sample.txt 相同。</p>\n<p>接著來寫檔，修改 main.go</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// write file</span><br>    msgWrite <span class=\"token operator\">:=</span> person<span class=\"token punctuation\">.</span>Person<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>    msgWrite<span class=\"token punctuation\">.</span>Age <span class=\"token operator\">=</span> <span class=\"token number\">22</span><br>    msgWrite<span class=\"token punctuation\">.</span>Gender <span class=\"token operator\">=</span> <span class=\"token string\">\"Female\"</span><br>    msgWrite<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Cythia\"</span><br>    msgWrite<span class=\"token punctuation\">.</span>Address <span class=\"token operator\">=</span> <span class=\"token string\">\"Boston ,US\"</span><br>    dataWrite<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> proto<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msgWrite<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    err <span class=\"token operator\">=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">WriteFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"encode.txt\"</span><span class=\"token punctuation\">,</span> dataWrite<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>ModePerm<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token comment\">// read file</span><br>    data<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"encode.txt\"</span><span class=\"token punctuation\">)</span><br>    msg <span class=\"token operator\">:=</span> person<span class=\"token punctuation\">.</span>Person<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>    err <span class=\"token operator\">=</span> proto<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>Gender<span class=\"token punctuation\">)</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">)</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>Age<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>寫檔的順序跟讀檔相反，先建立 Protobuf struct，填入各欄位，用 proto.Marshal 序列化，再用 ioutil.WriteFile 將序列化後的資訊寫進檔案中。寫入檔案同樣是 encode.txt，底下再用讀檔將內容讀出。</p>\n<p>編譯並執行，觀察結果</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">.<span class=\"token punctuation\">\\</span>bin<span class=\"token punctuation\">\\</span>proto.exe<br>Cythia<br>Female<br>Boston ,US<br><span class=\"token number\">22</span></code></pre>\n<p>檔案內容由 Ken 改為 Cythia，寫入成功。</p>\n<h2 id=\"compare-with-json\"><a class=\"direct-link\" href=\"#compare-with-json\">#</a> Compare with JSON</h2>\n<p>既然都有現成的資料了，可以再跟 JSON 比較，看看兩者序列化後的大小差多少。</p>\n<p>由於 Protobuf 相容 JSON 的格式，這件事變得很容易，可以看 person.pb.go 的內容</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Person <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    state         protoimpl<span class=\"token punctuation\">.</span>MessageState<br>    sizeCache     protoimpl<span class=\"token punctuation\">.</span>SizeCache<br>    unknownFields protoimpl<span class=\"token punctuation\">.</span>UnknownFields<br><br>    Name    <span class=\"token builtin\">string</span> <span class=\"token string\">`protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\"`</span><br>    Address <span class=\"token builtin\">string</span> <span class=\"token string\">`protobuf:\"bytes,2,opt,name=address,proto3\" json:\"address,omitempty\"`</span><br>    Gender  <span class=\"token builtin\">string</span> <span class=\"token string\">`protobuf:\"bytes,3,opt,name=gender,proto3\" json:\"gender,omitempty\"`</span><br>    Age     <span class=\"token builtin\">int32</span>  <span class=\"token string\">`protobuf:\"varint,4,opt,name=age,proto3\" json:\"age,omitempty\"`</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>在 Person 這個 struct 中，Name、Address、Gender、Age 等欄位有同時打上 protobuf 跟 json 兩種 tag，因此要轉換 struct 為 json，只需要直接使用 Golang 標準庫中的 json 庫即可。</p>\n<p>修改 main.go</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// write json</span><br>dataJSON<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msgWrite<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br>err <span class=\"token operator\">=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">WriteFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"encode_json.txt\"</span><span class=\"token punctuation\">,</span> dataJSON<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>ModePerm<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>執行後可以看到多出 encode_json.txt 這個檔案，內容是</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Cythia\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"address\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Boston ,US\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"gender\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Female\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">22</span><span class=\"token punctuation\">}</span></code></pre>\n<p>來比較 Protobuf 跟 JSON 序列化後的差異，用</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">dir</span> *.txt /s</code></pre>\n<p>得到</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">2020</span>/06/26  下午 02:42                <span class=\"token number\">30</span> encode.txt<br><span class=\"token number\">2020</span>/06/26  下午 02:42                <span class=\"token number\">67</span> encode_json.txt</code></pre>\n<p>Protobuf 只要 30 bytes，而 JSON 需要 67 bytes，相差一倍多，難怪 Google 宣稱它又小又快。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>Protobuf 對網路應用來講，最主要的優點就是體積更小，傳輸更快，在高密度的資料交換場景，例如微服務組成的大型應用中，Protobuf 能有效提高傳輸速度。讓人訝異的是，根據這篇<a href=\"https://medium.com/@akresling/go-benchmark-json-v-protobuf-4ec3c62ec8d4\">文章</a>，Protobuf 在解析使用的資源居然還低於 JSON，真要說不方便的地方，大約是人眼不可讀這點。</p>\n<p>除了傳輸與效能上的特點，Protobuf 將資料格式文件化，無意中也防止兩個不同的應用程序無法交換，對多人協作來講有其優勢。麻煩的地方可能是 proto file 需要額外版控，而 Git 目前的子版本版控技術用起來不是很方便，無論 submodule 或 subtree 都有限制，以 subtree 來講，會需要開發者先到 proto file 的 Repo 中修改檔案，加入並提交後，再到專案開發資料夾用 subtree 拉下來。可以預期在開發初期，proto file 會頻繁變更，衍生出許多隱形的開發成本。</p>\n<p>Google 怎麼處理這問題呢？他們不用處理，因為 Google 的版控 Policy 是 Monorepo，所有的程式碼都放在一起，不需要做子版本版控。這好像是某種<a href=\"https://zh.wikipedia.org/zh-tw/%E5%BA%B7%E5%A8%81%E5%AE%9A%E5%BE%8B\">康威定律</a>的佐證。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://developers.google.com/protocol-buffers\">Protocol Buffers</a></li>\n<li><a href=\"https://yami.io/protobuf/\">比起 JSON 更方便、更快速、更簡短的 Protobuf 格式</a></li>\n<li><a href=\"https://medium.com/@akresling/go-benchmark-json-v-protobuf-4ec3c62ec8d4\">Go Benchmark : JSON v. ProtoBuf</a></li>\n</ul>\n",
      "date_published": "2020-06-26T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2020/develop-your-middleware-by-golang/",
      "url": "https://blog.kenwsc.com/posts/2020/develop-your-middleware-by-golang/",
      "title": "訊息的處理架構：路由與中間層模式",
      "content_html": "<p>進行後端程式開發時，常會使用到 Golang 的 http 標準庫。例如要對某個 URL 進行處理時，會用到</p>\n<pre class=\"language-go\"><code class=\"language-go\">http<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/foo\"</span><span class=\"token punctuation\">,</span> fooHandler<span class=\"token punctuation\">)</span></code></pre>\n<p>可以想像，如果沒有 http 庫，就需要使用大量的 if else 來對 URL 判斷，大幅降低程式碼可讀性。http 庫對 URL 進行 function 註冊的設計模式，不僅可以使用在後端開發，也能應用於更普遍的情境。對於要對同類型資訊進行不同處理的例子，都可以使用這個設計模式。</p>\n<p>本文會用 Golang 來開發一個類似 http middleware 的程式，處理自訂的訊息格式，藉由這過程，也順便走一次 http 庫的路由設計原理。</p>\n<h2 id=\"build-a-go-module\"><a class=\"direct-link\" href=\"#build-a-go-module\">#</a> Build a Go Module</h2>\n<p>依照<a href=\"/posts/2020/develop-a-command-line-tool-by-golang\">前篇</a>提過的專案目錄結構，我們的使用情境是：(1)有個主程式負責主要邏輯；(2)有關路由跟 middleware 的內部邏輯，使用 package 來處理。因此專案目錄會是</p>\n<pre><code>project\n├── cmd  # main applications for this project.\n|   └── main\n|      └── main.go\n├── pkg  # code that's ok to use by external applications\n|   └── route\n|      └── route.go\n├── scripts\n|   └── build_win.bat\n|── go.mod\n└── README.md\n</code></pre>\n<p>go.mod 是由 go moudle 產生出來的文件，這是 Golang 在 1.11 後推出的套件管理工具，讓開發者可以不用依照 GOPATH 的結構來安排專案（原本使用 GOPATH 大約是因為 Google 用 Monorepo 來管理專案，而 Golang 沿襲著 Google 的風格）。</p>\n<p>要將當前的專案目錄建立為 Module，只需要用 CLI 寫入</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go mod init router</code></pre>\n<p>go module 會自動生成 go.mod，記錄模組與相依情況，這裡的 router 是模組名稱，如果這個模組會放到 github，可以用你的 github 網址作為模組名稱，更符合 Golang 的設計</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">module router<br><br>go <span class=\"token number\">1.14</span></code></pre>\n<p>然後，因為專案目錄變得比較複雜了，也建立一個 batch file 來幫忙 build code</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>@echo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>http://twitter.com/echo<span class=\"token punctuation\">)</span> off<br><br><span class=\"token keyword\">if</span> not exist bin <span class=\"token punctuation\">(</span><br>    <span class=\"token function\">mkdir</span> bin<br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">for</span> /f <span class=\"token string\">\"usebackq\"</span> %%i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">dir</span> /b /on /a:d .<span class=\"token punctuation\">\\</span>cmd<span class=\"token variable\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token builtin class-name\">echo</span> %%i<br>    go build -o ./bin/%%i.exe ./cmd/%%i<br><span class=\"token punctuation\">)</span></code></pre>\n<p>執行這個 batch file 後，會建立 bin 資料夾，並依照 cmd 下所有的資料夾名稱，個別建立執行檔。由於現在有 main.go，會生成對應的 ./bin/main.exe。</p>\n<h2 id=\"design-router\"><a class=\"direct-link\" href=\"#design-router\">#</a> Design Router</h2>\n<p>在 pkg 下設計一個簡單的路由模組，負責將不同的訊息路由到對應的處理函式，路由器的設計可以長這樣</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> route<br><br><span class=\"token comment\">// Message is message</span><br><span class=\"token keyword\">type</span> Message <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    Identification <span class=\"token builtin\">string</span><br>    Time           <span class=\"token builtin\">string</span><br>    Content        <span class=\"token builtin\">string</span><br>    Size           <span class=\"token builtin\">int</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Handler is handler</span><br><span class=\"token keyword\">type</span> Handler <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>Message<span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Router is router</span><br><span class=\"token keyword\">type</span> Router <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    mux <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Handler<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// NewRouter new a router</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">NewRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Router <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Router<span class=\"token punctuation\">{</span><br>    mux<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Add a route</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>route <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> h Handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> mergedHandler <span class=\"token operator\">=</span> h<br>    r<span class=\"token punctuation\">.</span>mux<span class=\"token punctuation\">[</span>route<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mergedHandler<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Run router</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>Message<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>    route <span class=\"token operator\">:=</span> req<span class=\"token punctuation\">.</span>Identification<br>    handler<span class=\"token punctuation\">,</span> exists <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>mux<span class=\"token punctuation\">[</span>route<span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">if</span> exists <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>一段一段來看</p>\n<p>首先設計一個訊息格式，視具體的應用需求，用來乘載要處理的資訊。這邊假設訊息格式中帶有辨識用的 Identification，如果是 http，可能是請求資源用的 URL。其他欄位可以是不同的 attribute，例如時間、內容、訊息大小等等。</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Message is message</span><br><span class=\"token keyword\">type</span> Message <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    Identification <span class=\"token builtin\">string</span><br>    Time           <span class=\"token builtin\">string</span><br>    Content        <span class=\"token builtin\">string</span><br>    Size           <span class=\"token builtin\">int</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>使用 type 的方式，定義訊息的處理函式。</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Handler is handler</span><br><span class=\"token keyword\">type</span> Handler <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>Message<span class=\"token punctuation\">)</span></code></pre>\n<p>定義路由器</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Router is router</span><br><span class=\"token keyword\">type</span> Router <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    mux <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Handler<br><span class=\"token punctuation\">}</span></code></pre>\n<p>路由器的具體實作是個 hashtable，用 Identification 當 key，處理函式當 value，當請求進來時，直接用 Identification 查出對應的處理函式進行處理。</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// NewRouter new a router</span><br><span class=\"token keyword\">func</span> <span class=\"token function\">NewRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Router <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>Router<span class=\"token punctuation\">{</span><br>        mux<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>路由器的建構式，因為 Golang 不是完全的物件導向語言，因此沒有預設的建構式，使用上習慣用 NewType 的函式做為建構式。</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Add a route</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>route <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> h Handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> mergedHandler <span class=\"token operator\">=</span> h<br>    r<span class=\"token punctuation\">.</span>mux<span class=\"token punctuation\">[</span>route<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mergedHandler<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Run router</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>Message<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>    route <span class=\"token operator\">:=</span> req<span class=\"token punctuation\">.</span>Identification<br>    handler<span class=\"token punctuation\">,</span> exists <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>mux<span class=\"token punctuation\">[</span>route<span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">if</span> exists <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>最後是路由器的關鍵 method。路由器有兩個 method，Add 用來將路由規則跟函式註冊到路由器中；Run 用來執行路由器。當路由器被執行時，它會去查自己的註冊表中有沒有對應的規則，如果有就執行。由於 Run 前會用 Add 將規則都寫進路由器中，message 進來就會進行對應的調用。</p>\n<h2 id=\"use-router\"><a class=\"direct-link\" href=\"#use-router\">#</a> Use Router</h2>\n<p>來看看在 cmd 下應該如何使用設計好的路由器模組</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token string\">\"fmt\"</span><br>    <span class=\"token string\">\"router/pkg/route\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    router <span class=\"token operator\">:=</span> route<span class=\"token punctuation\">.</span><span class=\"token function\">NewRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    router<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> helloHandler<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">var</span> res route<span class=\"token punctuation\">.</span>Message<br>    req <span class=\"token operator\">:=</span> route<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">{</span><br>        Identification<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><br>        Content<span class=\"token punctuation\">:</span>        <span class=\"token string\">\"Gopher\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><br>    router<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>res<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>req<span class=\"token punctuation\">)</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">helloHandler</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>route<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    res<span class=\"token punctuation\">.</span>Content <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>Content<br><span class=\"token punctuation\">}</span></code></pre>\n<p>先由 pkg/route 引入使用的模組，建構新的路由器，對它進行註冊。假設可以由訊息的 Identification 來 Locate 訊息，則可以用</p>\n<pre class=\"language-go\"><code class=\"language-go\">router<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> helloHandler<span class=\"token punctuation\">)</span></code></pre>\n<p>來標明 Identification 是 hello 的訊息，希望用 helloHandler 來處理，而 helloHandler 的內容是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">helloHandler</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>route<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    res<span class=\"token punctuation\">.</span>Content <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>Content<br><span class=\"token punctuation\">}</span></code></pre>\n<p>它依照前面 route 模組 Handler 的定義，有兩個引數，分別表示 response 跟 request，helloHandler 會將 request 的 content 複製給 response。因此經過 helloHandler 後，出去的響應會有跟請求相同的內容。</p>\n<p>建立一則訊息，Identification 是 hello，Content 是 Gopher，執行路由。</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> res route<span class=\"token punctuation\">.</span>Message<br>req <span class=\"token operator\">:=</span> route<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">{</span><br>    Identification<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><br>    Content<span class=\"token punctuation\">:</span>        <span class=\"token string\">\"Gopher\"</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><br>router<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>res<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>req<span class=\"token punctuation\">)</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">)</span></code></pre>\n<p>寫好程式先編譯，看看結果</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">.<span class=\"token punctuation\">\\</span>scripts<span class=\"token punctuation\">\\</span>build_win.bat<br>.<span class=\"token punctuation\">\\</span>bin<span class=\"token punctuation\">\\</span>main.exe<br><br>Gopher</code></pre>\n<p>Content 成功複製給 response 了。</p>\n<h2 id=\"add-various-method\"><a class=\"direct-link\" href=\"#add-various-method\">#</a> Add Various Method</h2>\n<p>假設今天訊息類似 http method 一樣，有好幾種不同的處理方式，希望在進行註冊時，能明確各處理方式，免得出現 Get 寫成 Got 這類無意間拼錯的悲劇，可以怎麼做？</p>\n<p>首先，來修改 route 模組，先修改訊息格式，加入 method</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Message <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    Identification <span class=\"token builtin\">string</span><br>    Method         <span class=\"token builtin\">string</span><br>    Time           <span class=\"token builtin\">string</span><br>    Content        <span class=\"token builtin\">string</span><br>    Size           <span class=\"token builtin\">int</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>將 Add 由 public 改為 private，免得誤用，並增加各 method 的 function</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// add a route</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>route <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> h Handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> mergedHandler <span class=\"token operator\">=</span> h<br>    r<span class=\"token punctuation\">.</span>mux<span class=\"token punctuation\">[</span>route<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mergedHandler<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Get add a get method pattern</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>route <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> h Handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    r<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get:\"</span><span class=\"token operator\">+</span>route<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Put add a put method pattern</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">Put</span><span class=\"token punctuation\">(</span>route <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> h Handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    r<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"put:\"</span><span class=\"token operator\">+</span>route<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Post add a post method pattern</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">Post</span><span class=\"token punctuation\">(</span>route <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> h Handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    r<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"post:\"</span><span class=\"token operator\">+</span>route<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Delete add a delete method pattern</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>route <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> h Handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    r<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete:\"</span><span class=\"token operator\">+</span>route<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Run 函式改為</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>Message<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>    route <span class=\"token operator\">:=</span> req<span class=\"token punctuation\">.</span>Method <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span>Identification<br>    handler<span class=\"token punctuation\">,</span> exists <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>mux<span class=\"token punctuation\">[</span>route<span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">if</span> exists <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>概念上很單純，就是在 key 上新加個字段，用來分別 method。</p>\n<p>使用上則變成</p>\n<pre class=\"language-go\"><code class=\"language-go\">router<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> helloHandler<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">var</span> res route<span class=\"token punctuation\">.</span>Message<br>req <span class=\"token operator\">:=</span> route<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">{</span><br>    Identification<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><br>    Method<span class=\"token punctuation\">:</span>         <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span><br>    Content<span class=\"token punctuation\">:</span>        <span class=\"token string\">\"Gopher\"</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><br>router<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>res<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>req<span class=\"token punctuation\">)</span></code></pre>\n<p>註冊時直接用 Get 來註冊即可。</p>\n<h2 id=\"add-middleware\"><a class=\"direct-link\" href=\"#add-middleware\">#</a> Add Middleware</h2>\n<p>如果現在有個情境，Identification foo 跟 bar 在進行核心的處理前，都需要某種共通的訊息處理，例如記錄運算時間，但 hello 不需要；或者是我們希望將前處理的邏輯跟核心處理邏輯分開，不要讓兩種不同邏輯混雜在一起，又要怎麼進行呢？這時就是 Middleware 派上用場的時刻了。</p>\n<p>Middleware 顧名思義，是軟體的中間層，可以想像成是 Request 到核心邏輯，再到 Response 這段的中間夾層。這些中間層可以類似漢堡的結構，你想要加入什麼樣的食材，例如高麗菜、牛肉、酸黃瓜、起司等等，你就多加一層中間層，藉此達到分離與彈性的效果。</p>\n<p><img src=\"/img/posts/2020/develop-your-middleware-by-golang/middleware.png\" alt=\"middleware 示意圖\"><em>middleware 示意圖</em></p>\n<p>為了讓 route 模組具有中間層的功能，新增</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Middleware is public middleware</span><br><span class=\"token keyword\">type</span> middleware <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>Handler<span class=\"token punctuation\">)</span> Handler<br><br><span class=\"token comment\">// Router is router</span><br><span class=\"token keyword\">type</span> Router <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    middlewareChain <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>middleware<br>    mux <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Handler<br><span class=\"token punctuation\">}</span></code></pre>\n<p>middleware 是中間層的 type，它是個函式，會吃進 Handler 進行包裝後，再吐出包裝後，具有同樣簽名的 Handler。因為 middleware 的存在，可以再執行被包裝的 Handler 前，先執行一些想要的前處理。</p>\n<p>Router 的部分也加入 middlewareChain，讓這些 middleware 可以被註冊到路由器中，並進行嵌套式的包裝。</p>\n<p>另外，也需要改寫 add，並新增一個 middleware 的註冊函式</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Use add middleware</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>m middleware<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    r<span class=\"token punctuation\">.</span>middlewareChain <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>middlewareChain<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// add a route</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>route <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> h Handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> mergedHandler <span class=\"token operator\">=</span> h<br>    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>middlewareChain<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span> <span class=\"token punctuation\">{</span><br>    mergedHandler <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>middlewareChain<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>mergedHandler<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>    r<span class=\"token punctuation\">.</span>mux<span class=\"token punctuation\">[</span>route<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mergedHandler<br><span class=\"token punctuation\">}</span></code></pre>\n<p>Use 負責將 middleware 加入路由器中；add 中新增一個 for 迴圈，對 Handler 進行包裝。可以看到 for 迴圈會由最後一個加入的 middleware 開始，一層一層將 middleware 包覆到 Handler 上，等全部都包裝完後，放進 route 中。</p>\n<p>最後修改 main 的使用方式，加入兩層 middleware</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    router <span class=\"token operator\">:=</span> route<span class=\"token punctuation\">.</span><span class=\"token function\">NewRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    router<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>cheeseMiddleware<span class=\"token punctuation\">)</span><br>    router<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>beefMiddleware<span class=\"token punctuation\">)</span><br>    router<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> helloHandler<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">var</span> res route<span class=\"token punctuation\">.</span>Message<br>    req <span class=\"token operator\">:=</span> route<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">{</span><br>        Identification<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><br>        Method<span class=\"token punctuation\">:</span>         <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span><br>        Content<span class=\"token punctuation\">:</span>        <span class=\"token string\">\"Gopher\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><br>    router<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>res<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>req<span class=\"token punctuation\">)</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">helloHandler</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>route<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is core\"</span><span class=\"token punctuation\">)</span><br>    res<span class=\"token punctuation\">.</span>Content <span class=\"token operator\">+=</span> req<span class=\"token punctuation\">.</span>Content<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">cheeseMiddleware</span><span class=\"token punctuation\">(</span>next route<span class=\"token punctuation\">.</span>Handler<span class=\"token punctuation\">)</span> route<span class=\"token punctuation\">.</span>Handler <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>route<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        res<span class=\"token punctuation\">.</span>Content <span class=\"token operator\">+=</span> <span class=\"token string\">\"cheese \"</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is cheese\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is cheese\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">beefMiddleware</span><span class=\"token punctuation\">(</span>next route<span class=\"token punctuation\">.</span>Handler<span class=\"token punctuation\">)</span> route<span class=\"token punctuation\">.</span>Handler <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>route<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        res<span class=\"token punctuation\">.</span>Content <span class=\"token operator\">+=</span> <span class=\"token string\">\"beef \"</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is beef\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is beef\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>在進到核心處理邏輯前，先加入一層 cheese，再加入一層 beef，這兩層 middleware 都會印出訊息，並修改 response 的內容。</p>\n<p>來看看輸出結果</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">.<span class=\"token punctuation\">\\</span>bin<span class=\"token punctuation\">\\</span>main.exe<br><br>This is cheese<br>This is beef<br>This is core<br>This is beef<br>This is cheese<br>cheese beef Gopher</code></pre>\n<p>夾心 Gopher 完成。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>http 庫跟 middleware 是現代 Web 開發中常使用的設計模式，跟基本的 if else 相比，route 的邏輯非常乾淨，只需要</p>\n<pre class=\"language-go\"><code class=\"language-go\">router<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>cheeseMiddleware<span class=\"token punctuation\">)</span><br>router<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>beefMiddleware<span class=\"token punctuation\">)</span><br>router<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> helloHandler<span class=\"token punctuation\">)</span></code></pre>\n<p>就能看出程式碼的意圖，無須關注條件判斷。同時，因為 middleware 跟 route 在設計時已經對介面進行定義，其他人在開發時能根據相同的 interface 來設計，擴充性也比 if else 來得要好。</p>\n<p>這種以函式為主體，進行嵌套跟處理的模式，就是標準的函數式編程(Functional Programming)，這也是 Golang 相對於傳統語言的一大特色。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://drstearns.github.io/tutorials/gomiddleware/\">Middleware Patterns in Go</a></li>\n<li><a href=\"https://golang.org/pkg/net/http/\">Package http</a></li>\n</ul>\n",
      "date_published": "2020-06-14T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2020/develop-a-command-line-tool-by-golang/",
      "url": "https://blog.kenwsc.com/posts/2020/develop-a-command-line-tool-by-golang/",
      "title": "Go 命令行工具初體驗：使用標準包開發",
      "content_html": "<p>最初是在社群活動時接觸到 Golang，前陣子換工作後，新的產品團隊也是使用 Golang 來開發產品，在接觸新語言時覺得有些地方很有意思，好像能看到某種程式語言的變遷，或者說開發方向之類？跟常見的物件導向語言不同，Golang 不強調物件，而且帶有一些函式編程的特色，如果說 C++ 是替 C 補上物件導向的環節，那 Golang 更像是 C 語言的現代版。</p>\n<p>本篇會簡單介紹如何使用 Golang 來開發一個簡單的命令行工具。我們可以假設一個微服務開發的情境，開發者需要頻繁在開發環境中啟動或關閉微服務，這時它會需要一個工具，能依照需求啟動各個微服務，通常在 Linux，我們會使用 shell script 來做這件事；如果是 Windows，則會使用 power shell 或 batch file；更正式的生產環境，可能會採用容器調度工具。Golang 由於具有跨平台的特性，也可以用在這個情境中。</p>\n<h2 id=\"install-golang\"><a class=\"direct-link\" href=\"#install-golang\">#</a> Install Golang</h2>\n<p>開發前，當然要先安裝囉，對於 Windows 的使用者，會建議使用 chocolatey 來安裝</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">choco <span class=\"token function\">install</span> golang -y</code></pre>\n<p>安裝好後確認版本</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go version</code></pre>\n<p>得到</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go version go1.14 windows/amd64</code></pre>\n<p>由於 Golang 是發展快速的語言，對版本要特別注意，可能前個版本的功能或環境，到下個版本就不同了。</p>\n<p>然後，建議開發者的專案目錄可以長這樣</p>\n<pre><code>project\n├── cmd  # main applications for this project.\n|   └── main.go\n├── pkg  # code that's ok to use by external applications\n|   ├── module 1\n|   |   └── module.go\n|   └── module 2\n└── README.md\n</code></pre>\n<p>cmd 用來放主要的應用程式，pkg 用來放相關的 lib，更細部的 layout 可以參考相關<a href=\"https://github.com/golang-standards/project-layout\">連結</a>。因為我們的程式不會很大，這邊先用到 cmd 就可以了。</p>\n<h2 id=\"hello-world\"><a class=\"direct-link\" href=\"#hello-world\">#</a> Hello World</h2>\n<p>所有語言的入門款就是 Hello, World，在 cmd/main.go 下加入程式碼，印出第一行文字</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main<br><br><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>package main 是這個 go file 所屬的 module，對於所有的 go file 而言，都會有專屬的模組，方便進行引用；import 則是引用其他的模組，fmt 是 format 的縮寫，是 Go 的標準庫，用來做一些格式化的輸入輸出，可以在相關的<a href=\"https://pkg.go.dev/fmt?tab=doc\">網站</a>看到說明</p>\n<blockquote>\n<p>Package fmt implements formatted I/O with functions analogous to C’s printf and scanf. The format ‘verbs’ are derived from C’s but are simpler.</p>\n</blockquote>\n<p>main 是 Go 的保留關鍵字，只要是 func main，就會是程式的入口，概念跟 C 語言的 int main() 相同。</p>\n<p>當敲好程式後，可以直接用 go run 來編譯並執行</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go run cmd/main.go</code></pre>\n<p>將 command-line tool 整合到 language 中，這點就很有現代語言特色，讓開發者更專注心力於開發上。當然，如果只是想要 build 應用程式，也可以使用</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go build -o micro-cli.exe ./cmd</code></pre>\n<p>執行完後可以看到專案目錄多了一個 micro-cli.exe，執行可以得到</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">D:<span class=\"token punctuation\">\\</span>git<span class=\"token punctuation\">\\</span>golang-introduction<span class=\"token operator\">></span>micro-cli.exe<br>Hello, world</code></pre>\n<h2 id=\"exec-system-command\"><a class=\"direct-link\" href=\"#exec-system-command\">#</a> Exec System Command</h2>\n<p>接著，我們需要使用 Golang 來執行外部的程式，引入 os/exec 這個模組</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world\"</span><span class=\"token punctuation\">)</span><br>    noteCmd <span class=\"token operator\">:=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"notepad\"</span><span class=\"token punctuation\">)</span><br>    noteCmd<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這樣就能用 Golang 來打開記事本了。</p>\n<p>如果除了啟動程式，還需要重新導向該程式的標準輸出到現在的視窗，可以怎麼做？這邊先準備一個文字檔，裡面放要輸出的內容</p>\n<pre class=\"language-md\"><code class=\"language-md\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> README</span><br><br>this is readme file</code></pre>\n<p>在 Windows 下，可以使用</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">type</span> README.md</code></pre>\n<p>來輸出檔案內容。我們將 go file 改成</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world\"</span><span class=\"token punctuation\">)</span><br>    noteCmd <span class=\"token operator\">:=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"type README.md\"</span><span class=\"token punctuation\">)</span><br>    buf <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><br>    stdout<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> noteCmd<span class=\"token punctuation\">.</span><span class=\"token function\">StdoutPipe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    noteCmd<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    stdout<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><br>    os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>先建立一個 byte 的動態儲存陣列（Go 的專門用語叫 slice），大小是 1024，再將 noteCmd 的標準輸出建立 pipeline，連接到建好的陣列中。如此 noteCmd 的輸出就會像水管，源源不絕進到 buf，我們再由 buf 中取值，輸出到 micro-cli.exe 的標準輸出，完成串接。</p>\n<h2 id=\"parse-arguments\"><a class=\"direct-link\" href=\"#parse-arguments\">#</a> Parse Arguments</h2>\n<p>因為命令行工具需要對應到不同的情境，比如說，有些時候希望輸出 A 檔案的內容，有些時候希望輸出 B 檔案的內容，因此最好有個 option 可以讓人做切換。Golang 的標準庫自帶 argument parser，名稱是 flag，說明可以看<a href=\"https://pkg.go.dev/flag?tab=doc\">這</a>，用法是</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span><br>    help     <span class=\"token builtin\">bool</span><br>    filename <span class=\"token builtin\">string</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    flag<span class=\"token punctuation\">.</span><span class=\"token function\">BoolVar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>help<span class=\"token punctuation\">,</span> <span class=\"token string\">\"h\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"this is help\"</span><span class=\"token punctuation\">)</span><br>    flag<span class=\"token punctuation\">.</span><span class=\"token function\">StringVar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"select your file\"</span><span class=\"token punctuation\">)</span><br>    flag<span class=\"token punctuation\">.</span>Usage <span class=\"token operator\">=</span> usage<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    flag<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> help <span class=\"token punctuation\">{</span><br>    flag<span class=\"token punctuation\">.</span><span class=\"token function\">Usage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span><br>    <span class=\"token punctuation\">}</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world\"</span><span class=\"token punctuation\">)</span><br>    noteCmd <span class=\"token operator\">:=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"type README.md\"</span><span class=\"token punctuation\">)</span><br>    buf <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><br>    stdout<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> noteCmd<span class=\"token punctuation\">.</span><span class=\"token function\">StdoutPipe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    noteCmd<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    stdout<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><br>    os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">usage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Usage: micro-cli [-h] [-r filename]\"</span><span class=\"token punctuation\">)</span><br>    flag<span class=\"token punctuation\">.</span><span class=\"token function\">PrintDefaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>先看第一部分</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span><br>    help     <span class=\"token builtin\">bool</span><br>    filename <span class=\"token builtin\">string</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    flag<span class=\"token punctuation\">.</span><span class=\"token function\">BoolVar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>help<span class=\"token punctuation\">,</span> <span class=\"token string\">\"h\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"this is help\"</span><span class=\"token punctuation\">)</span><br>    flag<span class=\"token punctuation\">.</span><span class=\"token function\">StringVar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"select your file\"</span><span class=\"token punctuation\">)</span><br>    flag<span class=\"token punctuation\">.</span>Usage <span class=\"token operator\">=</span> usage<br><span class=\"token punctuation\">}</span></code></pre>\n<p>用 var 建立兩個全域變數 help 跟 filename，用來儲存 flag 的值，接著在 init 設定 flag。func init 跟 func main 同樣是保留字，當程式進入時，會先執行 init 的內容，之後才進行 main，這用在一些初始化設定很方便。</p>\n<p>這邊做了三個初始化設定：(1) 看 h 這個選項是否存在，如果存在，賦值給 help，預設是 false，最後的文字是說明；(2) 看 r 這個選項是否存在，如果存在，賦值給 filename；(3) 將 Usage 這個函數指給 flag.Usage。</p>\n<p>再來看第二部分</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    flag<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> help <span class=\"token punctuation\">{</span><br>    flag<span class=\"token punctuation\">.</span><span class=\"token function\">Usage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token operator\">...</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">usage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Usage: micro-cli [-h] [-r filename]\"</span><span class=\"token punctuation\">)</span><br>    flag<span class=\"token punctuation\">.</span><span class=\"token function\">PrintDefaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>使用 flag.Parse 來解析選項，並實際賦值給前面設定好的變數；使用後，就能運用 help 跟 filename 了，這邊定義，當使用者用了 h 參數，就印出使用說明。使用說明看函式 usage，會先印出使用方法，再用 PrintDefaults 顯示細部設定。</p>\n<p>來看看實際執行結果，先看 help</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go run cmd/main.go -h<br><br>Usage: micro-cli <span class=\"token punctuation\">[</span>-h<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-r filename<span class=\"token punctuation\">]</span><br>    -h this is <span class=\"token builtin class-name\">help</span><br>    -r string<br>       <span class=\"token keyword\">select</span> your <span class=\"token function\">file</span></code></pre>\n<p>簡單將使用說明與程式結合起來。</p>\n<p>接著，修改程式，來讀讀看不同的檔案</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    flag<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> help <span class=\"token punctuation\">{</span><br>    flag<span class=\"token punctuation\">.</span><span class=\"token function\">Usage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span><br>    <span class=\"token punctuation\">}</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world\"</span><span class=\"token punctuation\">)</span><br>    noteCmd <span class=\"token operator\">:=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"type \"</span><span class=\"token operator\">+</span>filename<span class=\"token punctuation\">)</span><br>    buf <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><br>    stdout<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> noteCmd<span class=\"token punctuation\">.</span><span class=\"token function\">StdoutPipe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    noteCmd<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    n<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> stdout<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><br>    os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>執行</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go run cmd/main.go -r file1<br>Hello, world<br>This is <span class=\"token function\">file</span> <span class=\"token number\">1</span><br><br>go run cmd/main.go -r file2<br>Hello, world<br>This is <span class=\"token function\">file</span> <span class=\"token number\">2</span></code></pre>\n<p>只要後面帶不同的 filename，就能讀到不同的檔案了</p>\n<h2 id=\"read-config\"><a class=\"direct-link\" href=\"#read-config\">#</a> Read Config</h2>\n<p>因為每次要讀檔案，都要重新再輸入一次 option，對某些情境實在有點麻煩，想想，如果只有一兩個 option 就算了，假設現在 option 有 10 個，每次啟動程式都要輸入，很容易出現 typo，最好的辦法是將不常更改的 option 放在 config file，使用 config 來設定。</p>\n<p>先在專案結構中建立一個 configs 資料夾，用來放設定檔，設定檔格式可以使用 json，但不限制，這邊用 json 格式相對單純而且我比較熟</p>\n<pre><code>project\n├── cmd  # main applications for this project.\n|   └── main.go\n├── configs\n|   └── config.json\n├── pkg  # code that's ok to use by external applications\n|   ├── module 1\n|   |   └── module.go\n|   └── module 2\n└── README.md\n</code></pre>\n<p>內容是</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"filename\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"file1\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>為讀取 config，要先建立一個對應 config 結構的 struct，好讓程式知道該如何將 config 翻譯成物件</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> config <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    Filename <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"filename\"`</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>包在反引號 ` 中的文字是 Go 的 tag，它的功用是讓編譯器知道這個 struct 可以對應到 json，在這個例子中，struct config 的 field Filename 對應到 config file 的 filename 欄位。</p>\n<p>修改主程式來讀取設定檔</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    data<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"configs/config.json\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">var</span> fileConfig config<br>    json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fileConfig<span class=\"token punctuation\">)</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world\"</span><span class=\"token punctuation\">)</span><br>    noteCmd <span class=\"token operator\">:=</span> exec<span class=\"token punctuation\">.</span><span class=\"token function\">Command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"type \"</span><span class=\"token operator\">+</span>fileConfig<span class=\"token punctuation\">.</span>Filename<span class=\"token punctuation\">)</span><br>    buf <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><br>    stdout<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> noteCmd<span class=\"token punctuation\">.</span><span class=\"token function\">StdoutPipe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    noteCmd<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    n<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> stdout<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><br>    os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>使用 ioutil 來讀取檔案，將讀取到的 byte 資訊用 json.Unmarshal 反序列化，轉成人眼能看懂的結構，或者講更明白，賦值給 fileConfig 這個變數。接著，就能使用 fileConfig 內的 Filename 來讀取檔案了。</p>\n<p>觀察執行結果</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go run cmd/main.go<br>Hello, world<br>This is <span class=\"token function\">file</span> <span class=\"token number\">1</span></code></pre>\n<p>好的，不用每次都帶 option 了。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>用簡單的命令行工具，來當 Golang 的入門熱身，可以看到 Golang 跟 C 語言些相同的地方，例如它們都是靜態語言，可讀性跟可維護性較腳本語言更好，適合開發大型程式。但是 Golang 相對於 C，有幾項優點</p>\n<ul>\n<li>支援多重回傳值，有效解決 C 語言函式輸入輸出語意模糊的問題</li>\n<li>標準庫更強大，例如 flags 或是 ioutil，讓開發者能更專注於開發</li>\n<li>支援垃圾回收，同樣也讓開發者更專注於應用</li>\n<li>跨平台，這對當前的應用環境很重要，你絕對不希望換個作業系統要重寫一次程式碼</li>\n<li>工具齊全，有時候有點太齊全了，例如強制性的語法靜態檢查</li>\n<li>編譯速度快如閃電</li>\n</ul>\n<p>作為 Google 力推的程式語言，Golang 可以挖掘的地方還有很多，像是它最重要的賣點 Goroutine，很適合開發高併發程式；它的精簡語法也適合開發微服務。我們可以想像它是因應雲端世代而產生的新工具。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://github.com/golang-standards/project-layout\">Standard Go Project Layout</a></li>\n<li><a href=\"https://tour.golang.org/list\">A Tour of Go</a></li>\n</ul>\n",
      "date_published": "2020-06-06T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2020/use-conan-to-manage-c-package/",
      "url": "https://blog.kenwsc.com/posts/2020/use-conan-to-manage-c-package/",
      "title": "Conan：C/C++ 的套件管理工具",
      "content_html": "<p>開發 C++ 程式時，套件管理會是個困擾開發者的問題，C++ 不像 Python 有 pip；node.js 有 npm；lua 有 rock；C# 有 Nuget。它就只是沒有。沒有套件管理，當不同開發環境的使用者要開發程式時，不僅需要手動將相關的檔案塞進 repository 中，還會遇到相容性的問題，例如小明使用 paho-c 1.3.0 開發，開發到一半時，另一位開發者小華引用了小明放在 repo 中 include 資料夾下的 header file，卻使用了自己的 1.3.1 shared library，這使得兩個人的版本不相容，要花很多時間除錯。</p>\n<p>此外，當需要更新 repo 中的第三方套件版本時，需要手動將檔案放到 include 跟 libs 的資料夾，你引用多少套套件，你就要塞多少檔案進去；而跨平台的問題也是，Win32 可能要一份，Win64 要一份，Release 跟 Debug 的 Libs 各要一份，Linux 跟 Mac 再各要一份，最後 x86、arm、mips 再各要一份，自行排列組合一下就知道這個更新的痛苦了。為什麼我知道呢？因為我就是那個被困擾的人。</p>\n<p>好在許多開發者都有同樣的問題，於是 Conan 出來了，這是一個 C++ 套件管理工具，用 Python 寫成，目的在於協助開發者解決上述的困擾。本文會簡單介紹 Conan 的用法，希望大家看完後都能如獲新生。</p>\n<h2 id=\"install-conan\"><a class=\"direct-link\" href=\"#install-conan\">#</a> Install conan</h2>\n<p>首先來安裝 conan 這套工具，由於 conan 是用 python 寫的，也有在 pip 的 remote repo 中，因此只要用 pip 即可安裝</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP-2R08VK6:~/git/conan/build$ pip3 <span class=\"token function\">install</span> conan<br>Collecting conan<br>    Downloading <span class=\"token punctuation\">[</span>https://files.pythonhosted.org/packages/2e/b7/560406ecd9d20e308498ce378dc8c1e0bc932f44d5377bc0ca62ec8dd75b/conan-1.21.1.tar.gz<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https://files.pythonhosted.org/packages/2e/b7/560406ecd9d20e308498ce378dc8c1e0bc932f44d5377bc0ca62ec8dd75b/conan-1.21.1.tar.gz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>552kB<span class=\"token punctuation\">)</span><br>    <span class=\"token number\">100</span>% <span class=\"token operator\">|</span>████████████████████████████████<span class=\"token operator\">|</span> 552kB 761kB/s <br>Collecting Jinja<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&lt;</span><span class=\"token number\">3</span>,<span class=\"token operator\">>=</span><span class=\"token number\">2.3</span> <span class=\"token punctuation\">(</span>from conan<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">..</span>.</code></pre>\n<p>安裝完記得重新讀取 .profile，引入 conan 指令</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.profile</code></pre>\n<h2 id=\"prepare-environment\"><a class=\"direct-link\" href=\"#prepare-environment\">#</a> Prepare Environment</h2>\n<p>來看一下專案環境，假設我們<a href=\"https://medium.com/@ken00535/use-cmake-to-build-cross-platform-application-8888db861cb3\">參照前篇</a>，用 cmake 來進行編譯，工作目錄會長</p>\n<pre><code>project/\n├── build/\n├── src/\n|   ├── CMakeLists.txt\n|   └── hello.cpp\n├── CMakeLists.txt\n├── conanfile.txt\n└── README\n</code></pre>\n<p>其中 src 放原始碼，hello.cpp 內容為經典的 hello, world</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Poco/Thread.h\"</span></span><br><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Poco/Runnable.h\"</span></span><br><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloRunnable</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> Poco<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Runnable</span></span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello, world!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    HelloRunnable runnable<span class=\"token punctuation\">;</span><br>    Poco<span class=\"token double-colon punctuation\">::</span>Thread thread<span class=\"token punctuation\">;</span><br>    thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    thread<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這邊使用 Poco 的 Lib 來創建 thread，並呼叫一個印出 Hello, world 的 Runnable。之所以用 Poco 是因為 conan 官方也用 Poco 當範例，而且方便進行跨平台。Lib 本身不是重點，重點是有使用了一個第三方套件。</p>\n<p>關於 CMakeLists.txt 的使用請參照前篇，不再多述，兩個 CMakeLists.txt 分別是</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># .CmakeLists.txt</span><br><br>CMAKE_MINIMUM_REQUIRED<span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">2.6</span><span class=\"token punctuation\">)</span><br>PROJECT<span class=\"token punctuation\">(</span>HELLOLIB<span class=\"token punctuation\">)</span><br>ADD_SUBDIRECTORY<span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span></code></pre>\n<p>以及</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># .src/CmakeLists.txt</span><br><br>ADD_EXECUTABLE<span class=\"token punctuation\">(</span>hello hello.cpp<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"edit-conanfile\"><a class=\"direct-link\" href=\"#edit-conanfile\">#</a> Edit conanfile</h2>\n<p>conan 使用 conanfile.txt 來管理套件，conanfile 的格式有點像 TOML，但我找不到官方說法，對使用者來說也許不用想太多，只要知道是某種配置文件就行，它的內容是</p>\n<pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token header\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">requires</span><span class=\"token punctuation\">]</span></span><br>Poco/1.9.4@pocoproject/stable<br><br><span class=\"token header\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">generators</span><span class=\"token punctuation\">]</span></span><br>cmake</code></pre>\n<p>這段內容表示依賴套件是 Poco，版本 1.9.4，來源 pocoproject/stable，產生cmake 模組。</p>\n<p>接著進到 build 目錄，使用 conan</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP-2R08VK6:~/git/conan/build$ conan <span class=\"token function\">install</span> <span class=\"token punctuation\">..</span><br>Configuration:<br><span class=\"token punctuation\">[</span>settings<span class=\"token punctuation\">]</span><br><span class=\"token assign-left variable\">arch</span><span class=\"token operator\">=</span>x86_64<br><span class=\"token assign-left variable\">arch_build</span><span class=\"token operator\">=</span>x86_64<br><span class=\"token assign-left variable\">build_type</span><span class=\"token operator\">=</span>Release<br><span class=\"token assign-left variable\">compiler</span><span class=\"token operator\">=</span>gcc<br>compiler.libcxx<span class=\"token operator\">=</span>libstdc++<br>compiler.version<span class=\"token operator\">=</span><span class=\"token number\">7</span><br><span class=\"token assign-left variable\">os</span><span class=\"token operator\">=</span>Linux<br><span class=\"token assign-left variable\">os_build</span><span class=\"token operator\">=</span>Linux<br><span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">[</span>build_requires<span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">[</span>env<span class=\"token punctuation\">]</span><br><br>conanfile.txt: Installing package<br>Requirements<br>    OpenSSL/1.0.2o@conan/stable from <span class=\"token string\">'conan-center'</span> - Cache<br>    Poco/1.9.4@pocoproject/stable from <span class=\"token string\">'conan-center'</span> - Cache<br>    zlib/1.2.11@conan/stable from <span class=\"token string\">'conan-center'</span> - Cache<br>Packages<br>    OpenSSL/1.0.2o@conan/stable:b781af3f476d0aa5070a0a35b544db7a3c193cc8 - Cache<br>    Poco/1.9.4@pocoproject/stable:57e3039664a87aab5ccabd995efae6da01c1ff17 - Cache<br>    zlib/1.2.11@conan/stable:d50a0d523d98c15bb147b18fa7d203887c38be8b - Cache<br><br>zlib/1.2.11@conan/stable: Already installed<span class=\"token operator\">!</span><br>OpenSSL/1.0.2o@conan/stable: Already installed<span class=\"token operator\">!</span><br>Poco/1.9.4@pocoproject/stable: Already installed<span class=\"token operator\">!</span><br>conanfile.txt: Generator cmake created conanbuildinfo.cmake<br>conanfile.txt: Generator txt created conanbuildinfo.txt<br>conanfile.txt: Generated conaninfo.txt<br>conanfile.txt: Generated graphinfo</code></pre>\n<p>然後工作目錄就變成</p>\n<pre><code>project/\n├── build/\n|   ├── ...\n|   ├── conanbuildinfo.cmake\n|   └── ...\n├── src/\n|   ├── CMakeLists.txt\n|   └── hello.cpp\n├── CMakeLists.txt\n├── conanfile.txt\n└── README\n</code></pre>\n<p>跟之前對照，多出了 cmake 模組 conanbuildinfo.cmake</p>\n<h2 id=\"modify-cmakelists\"><a class=\"direct-link\" href=\"#modify-cmakelists\">#</a> Modify CMakeLists</h2>\n<p>之所以要有 cmake 模組，就是為了讓 cmake 引用，因此要回頭改 CMakeLists.txt，將 conan 相關的指令加進去</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># .CMakeLists.txt</span><br><br>CMAKE_MINIMUM_REQUIRED<span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">2.6</span><span class=\"token punctuation\">)</span><br>PROJECT<span class=\"token punctuation\">(</span>HELLOLIB<span class=\"token punctuation\">)</span><br><br>INCLUDE<span class=\"token punctuation\">(</span><span class=\"token variable\">${CMAKE_BINARY_DIR}</span>/conanbuildinfo.cmake<span class=\"token punctuation\">)</span><br>CONAN_BASIC_SETUP<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>INCLUDE_DIRECTORIES<span class=\"token punctuation\">(</span><span class=\"token variable\">${CONAN_INCLUDE_DIRS}</span><span class=\"token punctuation\">)</span><br>MESSAGE<span class=\"token punctuation\">(</span>STATUS <span class=\"token variable\">${CONAN_INCLUDE_DIRS}</span><span class=\"token punctuation\">)</span><br>ADD_SUBDIRECTORY<span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span></code></pre>\n<p>其中 INCLUDE 是引用 conan 產生的 cmake 模組；CONAN_BASIC_SETUP 會設定 conan 需要的變數；INCLUDE_DIRECTORIES 是引用 conan 相關的 header file，免去手動搬運 header file 的麻煩。MESSAGE 可加可不加，這邊是用來印出 conan header file 的所在目錄，讓開發者心底踏實一點。</p>\n<p>而另一個 CMakeLists.txt 則改成</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># .src/CMakeLists.txt</span><br><br>ADD_EXECUTABLE<span class=\"token punctuation\">(</span>hello hello.cpp<span class=\"token punctuation\">)</span><br>TARGET_LINK_LIBRARIES<span class=\"token punctuation\">(</span>hello <span class=\"token variable\">${CONAN_LIBS}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>非常單純，就是鏈結 conan 相關的 lib。</p>\n<h2 id=\"build\"><a class=\"direct-link\" href=\"#build\">#</a> Build</h2>\n<p>關鍵的時候到了，用 cmake 配置並編譯</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP-2R08VK6:~/git/conan/build$ cmake <span class=\"token punctuation\">..</span><br>-- The C compiler identification is GNU <span class=\"token number\">7.4</span>.0<br><span class=\"token punctuation\">..</span>.<br>-- /home/ken/.conan/data/Poco/1.9.4/pocoproject/stable/package/57e3039664a87aab5ccabd995efae6da01c1ff17/include/home/ken/.conan/data/OpenSSL/1.0.2o/conan/stable/package/b781af3f476d0aa5070a0a35b544db7a3c193cc8/include/home/ken/.conan/data/zlib/1.2.11/conan/stable/package/d50a0d523d98c15bb147b18fa7d203887c38be8b/include<br><span class=\"token punctuation\">..</span>.</code></pre>\n<p>可以看到 conan 抓下來的檔案會放在 user 家目錄的 .conan。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP-2R08VK6:~/git/conan/build$ cmake --build <span class=\"token builtin class-name\">.</span><br>Scanning dependencies of target hello<br><span class=\"token punctuation\">[</span> <span class=\"token number\">50</span>%<span class=\"token punctuation\">]</span> Building CXX object src/CMakeFiles/hello.dir/hello.cpp.o<br><span class=\"token punctuation\">[</span><span class=\"token number\">100</span>%<span class=\"token punctuation\">]</span> Linking CXX executable <span class=\"token punctuation\">..</span>/bin/hello<br><span class=\"token punctuation\">[</span><span class=\"token number\">100</span>%<span class=\"token punctuation\">]</span> Built target hello</code></pre>\n<p>編譯完成，來執行看看</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP-2R08VK6:~/git/conan/build$ ./bin/hello <br>Hello, world<span class=\"token operator\">!</span></code></pre>\n<p>結束！conan 自動抓完 header file 跟 library，開發者不要再煩惱套件跟庫管理了，專心來享受寫程式的快樂吧。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>看到 conan 能自動管理套件，真的不是個「爽」字能形容，套句強者我同事的話：「我不常寫 C++，因為它的套件管理太可怕了」。有使用開源程式碼開發的人，應該非常能了解這種感受。</p>\n<p>在使用 conan 開發途中，難免踩到一些坑，直接上 GitHub 發問後，沒想到 conan 的 Contributor 在短短幾小時內就快速回覆，還 involve 相關專案的 Contributor 一起來確認，現在開源社群的活躍度已經這麼厲害了嗎？</p>\n<p>要說 conan 的問題，可能是普及度還不夠，有時需要的 library 不一定會有，但我覺得這沒有關係，只要會 python，就可以捲起袖子，把自己要用的 library 打包後回饋，讓其他人也能快速利用同樣的資源。畢竟人生苦短，不要重複造輪子，我們可以面朝大海。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://conan.io/\">Conan Official Website</a></li>\n<li><a href=\"https://docs.conan.io/en/latest/reference/generators/cmake.html\">常用的 conan cmake 變數</a></li>\n<li><a href=\"http://blog.guorongfei.com/2018/04/23/conan-tutorial/\">C++包管理器 — — conan</a></li>\n</ul>\n",
      "date_published": "2020-01-18T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2020/use-cmake-to-build-cross-platform-application/",
      "url": "https://blog.kenwsc.com/posts/2020/use-cmake-to-build-cross-platform-application/",
      "title": "跨平台軟體建置：CMake 入門",
      "content_html": "<p>當我們將軟體的價值視為服務時，跨平台就會越來越重要，因為它代表軟體能跨越限制，降低客戶使用成本，進而更快創造價值。工程師可能很難想像，當客戶拿到新軟體時，他需要面對一堆設定問題，還需要建置平台，這會是一件多讓人厭世的事。</p>\n<p>常見的跨平台是指，軟體可在三大主流平台上運作，也就是支援 Windows、Linux、Mac；也有些跨平台指硬體平台，像是 x86 或 arm。本文會用 cmake 這個跨平台建置工具，分別建置可於 Windows 與 Linux 上執行的應用程式。</p>\n<h2 id=\"prerequisite\"><a class=\"direct-link\" href=\"#prerequisite\">#</a> Prerequisite</h2>\n<p>對於 Windows 的開發者，建議用 MinGW 來建置，這個工具讓 Windows 上有跟 Linux 相同的操作經驗，可以避免二次學習。Windows 10 有很便利的 Package Management Chocolatey，類似 Ubuntu 的 apt 或 Fedora 的 yum，可以用來安裝 MinGW</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">choco <span class=\"token function\">install</span> mingw -y</code></pre>\n<h2 id=\"install-cmake\"><a class=\"direct-link\" href=\"#install-cmake\">#</a> Install CMake</h2>\n<p>主角可以登場了，使用 Chocolatey 來安裝 cmake</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">choco <span class=\"token function\">install</span> cmake -y</code></pre>\n<p>安裝完執行</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">cmake</code></pre>\n<p>來看是否安裝成功</p>\n<p><img src=\"/img/posts/2020/use-cmake-to-build-cross-platform-application/cmake-1.png\" alt=\"\"></p>\n<p>如果 Command Prompt 找不到 cmake，確認有沒有將 cmake 的執行檔路徑加入 PATH 環境變數。 Command Prompt 會從 PATH 中抓指令，如果沒加的話記得加入並重新啟動 Command Prompt。</p>\n<h2 id=\"prepare-source-code\"><a class=\"direct-link\" href=\"#prepare-source-code\">#</a> Prepare Source Code</h2>\n<p>先看一下 cmake 的資料夾結構，通常會是</p>\n<pre><code>project/\n├── build/\n├── src/\n|   ├── CMakeLists.txt\n|   └── hello.c\n├── CMakeLists.txt\n└── README\n</code></pre>\n<p>build 資料夾用於放置 cmake 的建構文件；src 用於放置原始碼；CMakeLists.txt 類似 GNU 中的 makefile，用於描述應該如何建構檔案。cmake 使用遞迴建構，每個子資料夾中都要放置該資料夾的 CMakeLists.txt。</p>\n<p>當建立好資料夾後，在 src 底下產生 hello.c，內容是</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>如此一來，環境就準備完成了。</p>\n<h2 id=\"edit-cmake-makefile\"><a class=\"direct-link\" href=\"#edit-cmake-makefile\">#</a> Edit CMake makefile</h2>\n<p>有了環境後，開始 cmake 的重頭戲：編寫 CmakeLists.txt。先處理最上層專案目錄的 CmakeLists.txt</p>\n<pre class=\"language-makefile\"><code class=\"language-makefile\">PROJECT <span class=\"token punctuation\">(</span>HELLO<span class=\"token punctuation\">)</span><br>ADD_SUBDIRECTORY<span class=\"token punctuation\">(</span>src bin<span class=\"token punctuation\">)</span></code></pre>\n<p>對，兩行，就這樣，有沒有很單純？cmake 的語法是</p>\n<pre class=\"language-makefile\"><code class=\"language-makefile\">CMD <span class=\"token punctuation\">(</span>ARG<span class=\"token punctuation\">)</span></code></pre>\n<p>所以這兩行的意思是：(1) 命名專案為 HELLO；(2) 加入子目錄 src，並將產生的目標檔放入 bin 目錄中。</p>\n<p>接著來看 src 中的 CmakeLists.txt</p>\n<pre class=\"language-makefile\"><code class=\"language-makefile\">ADD_EXECUTABLE<span class=\"token punctuation\">(</span>hello hello.c<span class=\"token punctuation\">)</span></code></pre>\n<p>意思是使用 hello.c 產生 hello 執行檔。</p>\n<p>由於專案目錄中的 CmakeLists.txt 會引用到 src 中的 CmakeLists.txt，當 cmake 執行時，它會讀取兩個 CmakeLists.txt，並按照命令來設定建置環境。</p>\n<h2 id=\"compile-for-windows\"><a class=\"direct-link\" href=\"#compile-for-windows\">#</a> Compile for Windows</h2>\n<p>我們來試著建置 Windows 的應用程式，因為 cmake 的設計原則是將 src 與建置環境分開，不要讓 cmake 產生出來的文件汙染專案，強烈建議進入 build 中建置</p>\n<pre class=\"language-makefile\"><code class=\"language-makefile\">cd build<br>cmake -G <span class=\"token string\">\"MinGW Makefiles\"</span> ..</code></pre>\n<p>使用 -G 是選擇 build system 的 Generator；cmake 支援 Visual Studio 專案、MinGW Makefiles、CodeLite 專案等等。由於我們希望操作方式盡量一致，使用與 GNU 風格相同的 MinGW。</p>\n<p>此時，會看到 cmake 在 build 下自動產生文件</p>\n<pre><code>project/\n├── build/\n|   ├── bin/\n|   ├── CMakeFiles/\n|   ├── cmake_install.cmake\n|   └── Makefile\n├── src/\n|   ├── CMakeLists.txt\n|   └── hello.c\n├── CMakeLists.txt\n└── README\n</code></pre>\n<p>看到 Makefile 後，直接反應就是 make 啦</p>\n<pre><code>mingw32-make\n</code></pre>\n<p>得到編譯訊息</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">D:<span class=\"token punctuation\">\\</span>git<span class=\"token punctuation\">\\</span>cmake-example<span class=\"token punctuation\">\\</span>t2<span class=\"token punctuation\">\\</span>build<span class=\"token operator\">></span>mingw32-make<br>Scanning dependencies of target hello<br><span class=\"token punctuation\">[</span> <span class=\"token number\">50</span>%<span class=\"token punctuation\">]</span> Building C object bin/CMakeFiles/hello.dir/hello.obj<br><span class=\"token punctuation\">[</span><span class=\"token number\">100</span>%<span class=\"token punctuation\">]</span> Linking C executable hello.exe<br><span class=\"token punctuation\">[</span><span class=\"token number\">100</span>%<span class=\"token punctuation\">]</span> Built target hello</code></pre>\n<p>執行檔案</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">D:<span class=\"token punctuation\">\\</span>git<span class=\"token punctuation\">\\</span>cmake-example<span class=\"token punctuation\">\\</span>t2<span class=\"token punctuation\">\\</span>build<span class=\"token operator\">></span>.<span class=\"token punctuation\">\\</span>bin<span class=\"token punctuation\">\\</span>hello.exe<br>Hello World<span class=\"token operator\">!</span></code></pre>\n<p>Windows 版本建置完成。</p>\n<h2 id=\"compile-for-linux\"><a class=\"direct-link\" href=\"#compile-for-linux\">#</a> Compile for Linux</h2>\n<p>將相同的專案複製到 Linux 底下，再次編譯。如果你是使用 Windows 為開發平台，可以使用 WSL 來建構 Linux 環境。執行步驟相同，只是使用 cmake 時不用加 MinGW，下 cmake 前記得清空 build 資料夾</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> build<br><span class=\"token function\">rm</span> -rf ./*<br>cmake <span class=\"token punctuation\">..</span></code></pre>\n<p>得到配置訊息</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP-2R08VK6:/mnt/d/git/cmake-example/t2/build$ cmake <span class=\"token punctuation\">..</span><br>-- The C compiler identification is GNU <span class=\"token number\">7.4</span>.0<br>-- The CXX compiler identification is GNU <span class=\"token number\">7.4</span>.0<br>-- Check <span class=\"token keyword\">for</span> working C compiler: /usr/bin/cc<br>-- Check <span class=\"token keyword\">for</span> working C compiler: /usr/bin/cc -- works<br>-- Detecting C compiler ABI info<br>-- Detecting C compiler ABI info - <span class=\"token keyword\">done</span><br>-- Detecting C compile features<br>-- Detecting C compile features - <span class=\"token keyword\">done</span><br>-- Check <span class=\"token keyword\">for</span> working CXX compiler: /usr/bin/c++<br>-- Check <span class=\"token keyword\">for</span> working CXX compiler: /usr/bin/c++ -- works<br>-- Detecting CXX compiler ABI info<br>-- Detecting CXX compiler ABI info - <span class=\"token keyword\">done</span><br>-- Detecting CXX compile features<br>-- Detecting CXX compile features - <span class=\"token keyword\">done</span><br>CMake Warning <span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> CMakeLists.txt:<br>    No cmake_minimum_required <span class=\"token builtin class-name\">command</span> is present.  A line of code such as<br><br>cmake_minimum_required<span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">3.10</span><span class=\"token punctuation\">)</span><br><br>should be added at the <span class=\"token function\">top</span> of the file.  The version specified may be lower<br>    <span class=\"token keyword\">if</span> you wish to support older CMake versions <span class=\"token keyword\">for</span> this project.  For <span class=\"token function\">more</span><br>    information run <span class=\"token string\">\"cmake --help-policy CMP0000\"</span><span class=\"token builtin class-name\">.</span><br>This warning is <span class=\"token keyword\">for</span> project developers.  Use -Wno-dev to suppress it.<br><br>-- Configuring <span class=\"token keyword\">done</span><br>-- Generating <span class=\"token keyword\">done</span><br>-- Build files have been written to: /mnt/d/git/cmake-example/t2/build</code></pre>\n<p>進行編譯</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">make</span></code></pre>\n<p>得到</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP-2R08VK6:/mnt/d/git/cmake-example/t2/build$ <span class=\"token function\">make</span><br>Scanning dependencies of target hello<br><span class=\"token punctuation\">[</span> <span class=\"token number\">50</span>%<span class=\"token punctuation\">]</span> Building C object bin/CMakeFiles/hello.dir/main.o<br><span class=\"token punctuation\">[</span><span class=\"token number\">100</span>%<span class=\"token punctuation\">]</span> Linking C executable hello<br><span class=\"token punctuation\">[</span><span class=\"token number\">100</span>%<span class=\"token punctuation\">]</span> Built target hello</code></pre>\n<p>執行程式</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP-2R08VK6:/mnt/d/git/cmake-example/t2/build$ ./bin/hello <br>Hello World<span class=\"token operator\">!</span></code></pre>\n<p>如果對檔案格式有興趣，也可以用 file 指令查看</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP-2R08VK6:/mnt/d/git/cmake-example/t2/build$ <span class=\"token function\">file</span> ./bin/hello <br>./bin/hello: ELF <span class=\"token number\">64</span>-bit LSB shared object, x86-64, version <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span>SYSV<span class=\"token punctuation\">)</span>, dynamically linked, interpreter /lib64/l, <span class=\"token keyword\">for</span> GNU/Linux <span class=\"token number\">3.2</span>.0, BuildID<span class=\"token punctuation\">[</span>sha1<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>e7fcca840caa7d5e99bdd0e26bf329b79b7e83fd, not stripped</code></pre>\n<p>可看到 ELF 是 Linux 可執行檔格式。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>cmake 雖然功能不錯，但學習曲線真的有點陡，別看簡單寫個 hello, world，中間的坑一堆；不是很理解 cmake 反人類的語法是怎麼設計的，跟其他語言差距非常大，剛開始發現沒有 case sensitive 時還很開心，結果程式碼一寫長就覺得風格混亂，維護困難；每個子資料夾都要 CmakeLists.txt 也讓人無言，容易迷路在專案結構中，看不到全貌；最麻煩的是除錯困難，範例又少，要使用 cmake 幾乎無法避免一系列花式踩坑。</p>\n<p>但是！對於 C/C++ 的跨平台建構來說，cmake 仍是目前最方便最主流的工具，支援的 Generator 夠多，成熟度也高。如果開發者有使用 autotools 來建構專案的經驗，應該能上手 cmake。我不是要黑使用 Visual Studio 的開發者，但如果習慣 GUI 的人，應該會覺得痛苦指數很高。cmake 有自己的圖形介面，似乎也能跟 Visual Studio 整合，但這就留到日後再來慢慢研究了。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://cmake.org/\">Cmake Official Website</a></li>\n<li><a href=\"https://www.zhihu.com/question/276415476\">如何評價 CMake？</a></li>\n</ul>\n",
      "date_published": "2020-01-12T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2019/use-codelite-to-program-c/",
      "url": "https://blog.kenwsc.com/posts/2019/use-codelite-to-program-c/",
      "title": "C++ 開發環境架設：使用 CodeLite",
      "content_html": "<p>很久沒寫 C++ 了，上次是一年多前的事，當時為了在專案中使用 TDD 開發，套用 CppUTest 當 Unit Test Framework，而這套 Framework 就是用 C++ 寫的。最近工作上又需要用到 C++ 當底層資源，環境重架之餘，順手紀錄一下歷程。</p>\n<p>原本的開發環境是 Windows 7 + uVision，使用 C 來開發 MCU。為了導入 TDD，需要在 Local 端有編譯執行的能力，考量到資源開放性，選擇用 cygwin 來執行 GNU，同時選擇當時資源豐富的 VSCode 做為編輯器。如果現在重選的話，可能會直接使用 Ubuntu 的 GNU，搭配 STM32CubeMX 自動生成 Makefile 來編譯，不論是自由度還是效能都較好，而且沒有後面 cygwin 一系列踩坑問題，But，人生就是這個 But，當時我不知道 cygwin 有這麼多坑。</p>\n<p>由於現在工作的開發環境會用 Windows 10，仍然需要找個在 Windows 下的編譯執行工具，同時也希望是 cross-platform，無論 IDE 有多好，如果不能 cross-platform，不利於現在變動頻繁的開發環境與挑戰（想想看，原本用 .NET 全家餐用得好好的，結果開發環境變 Linux，又要重新用一套 IDE，而且你可能已經在原本的 IDE 上自行整合一些套件了）。現行的幾款 C++ IDE 有 CodeLite、Eclipse、CLion、Dev-C++、Visual Studio。由於我不想為 C++ 重新編寫 Makefile，不考慮 VSCode、Notepad++ 等 Editor；Dev-C++ 跟 Visual Studio 因為無法跨平台也劃掉；CLion 是 JetBrains 開發的 IDE，據說相當優秀，是很多人的首選，但我只需要開發小程式，用付款軟體太麻煩，劃掉；Eclipse 通常開發 Java 比較多，而且吃的資源有點兇，因此最後選用 CodeLite 來開發。</p>\n<p>如果你是習慣使用 Visual Studio 的 Windows 開發者，不用懷疑，直接用 Visual Studio；如果你想在工作上選擇一款 cross-platform，CLion 是你的好夥伴；如果你只是想簡單寫點程式來驗證概念，也許可以跟我一樣用 CodeLite。</p>\n<h2 id=\"install-mingw\"><a class=\"direct-link\" href=\"#install-mingw\">#</a> Install MinGW</h2>\n<p>CodeLite 底層推薦用 MinGW 中的 GNU toolchain 來編譯，如果對象平台是 Windows，也可以使用 Visual C++，因為 WIN 10 有 WSL 可以執行 Linux Binary File，使用 MinGW 就能滿足需求了。</p>\n<p>MinGW 是一套 Windows 下的開發環境，讓 Windows 的開發者也能使用 GNU 等 Linux 工具。要安裝 MinGW，到 <a href=\"http://mingw.org/\">MinGW 官網</a>下載安裝程式</p>\n<p><img src=\"/img/posts/2019/use-codelite-to-program-c/codelite-1.png\" alt=\"\"></p>\n<p>安裝時，在 Basic Setup 中選擇 mingw32-base-bin、mingw32-gcc-g++-bin、msys-base-bin</p>\n<p><img src=\"/img/posts/2019/use-codelite-to-program-c/codelite-2.png\" alt=\"\"></p>\n<p>安裝完後，要將執行檔路徑加入環境變數，讓 CodeLite 能抓到底層。打開控制台\\系統及安全性\\系統，選擇[進階系統設定]，點選[環境變數]</p>\n<p><img src=\"/img/posts/2019/use-codelite-to-program-c/codelite-3.png\" alt=\"\"></p>\n<p>在系統變數中，編輯 Path</p>\n<p><img src=\"/img/posts/2019/use-codelite-to-program-c/codelite-4.png\" alt=\"\"></p>\n<p>將 C:\\MinGW\\bin 加入 Path 中。</p>\n<h2 id=\"install-codelite\"><a class=\"direct-link\" href=\"#install-codelite\">#</a> Install CodeLite</h2>\n<p>接著來安裝 CodeLite，到官網下載安裝檔，官網上可以看到 CodeLite 主要支援三款語言：C++、php、node.js，主要 TA 是放在後端上</p>\n<p><img src=\"/img/posts/2019/use-codelite-to-program-c/codelite-5.png\" alt=\"\"></p>\n<p>下載，解壓縮，執行，一路安裝精靈到結束，沒難度。</p>\n<h2 id=\"configure-codelite\"><a class=\"direct-link\" href=\"#configure-codelite\">#</a> Configure CodeLite</h2>\n<p>首次執行 CodeLite 時，先用 Setup Wizard 設定環境，開發的環境先用 C/C++</p>\n<p><img src=\"/img/posts/2019/use-codelite-to-program-c/codelite-6.png\" alt=\"\"></p>\n<p>如果前面有成功安裝 MinGW 跟 g++，這邊選擇 Compiler 時就會看到</p>\n<p><img src=\"/img/posts/2019/use-codelite-to-program-c/codelite-7.png\" alt=\"\"></p>\n<h2 id=\"test-example\"><a class=\"direct-link\" href=\"#test-example\">#</a> Test Example</h2>\n<p>設定完後，用 CodeLite 來寫一支簡單的 C++，確認功能正常。先建立工作空間，在工作空間點右鍵，加入新專案</p>\n<p><img src=\"/img/posts/2019/use-codelite-to-program-c/codelite-8.png\" alt=\"\"></p>\n<p>選擇用 g++ 的 Console Template</p>\n<p><img src=\"/img/posts/2019/use-codelite-to-program-c/codelite-9.png\" alt=\"\"></p>\n<p>CodeLite 會套用範本長出基本檔案</p>\n<pre><code>CPPWorkspace\n├-- Test1\n    ├-- src\n        ├-- main.cpp\n</code></pre>\n<p>打開 main.cpp，查看內容</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>由於這是 C，將它改成 C++</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello testing...\"</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>來建置並執行程式，先在導覽列選擇 Build &gt; Clean Project ，把舊的檔案（如果有的話）清空，選擇 Run 來建置執行</p>\n<p><img src=\"/img/posts/2019/use-codelite-to-program-c/codelite-10.png\" alt=\"\"></p>\n<p>程式執行完成，開發環境建好啦！</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>整個執行下來，最麻煩的不是軟體操作，而是一開始要選用哪個 IDE。原本想依照平常的開發環境，選用 VSCode，但因為需要 Compiler，又不想用 cygwin，只好研究 VSCode 跟 WSL 的串法，真的串起來後又發現自己不想寫 Makefile，只好回去選別的 IDE。</p>\n<p>也想說是不是直接用 cl 來編譯，但查詢 VSCode 的<a href=\"https://code.visualstudio.com/docs/cpp/config-msvc\">文件</a>後，發現</p>\n<blockquote>\n<p>Start VS Code from the Developer Command Prompt</p>\n<p>To use MSVC in VS Code, you must start VS Code from a Developer Command Prompt for Visual Studio. An ordinary Windows command prompt, or a Bash prompt, does not have the necessary environment variables set.</p>\n</blockquote>\n<p>如果有 Visual Studio，直接用 Visual Studio 就好啦，為了要寫個小程式還要特定安裝大型 IDE，好像有點誇張。而且 Visual Studio 不是跨平台，跟我的訴求不合。找了一陣子後，決定採用 CodeLite。</p>\n<p>反倒後面安裝執行沒問題。人生就是這樣，做決定最困難。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"http://mingw.org/\">MinGW</a></li>\n<li><a href=\"https://codelite.org/\">CodeLite</a></li>\n</ul>\n",
      "date_published": "2019-12-30T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2019/use-feedly-to-subscribe-facebooks-group/",
      "url": "https://blog.kenwsc.com/posts/2019/use-feedly-to-subscribe-facebooks-group/",
      "title": "訂閱 Facebook Group 的訊息：自建 RSS 伺服器",
      "content_html": "<p>feedly 是一款 Web RSS 訂閱服務，自從 Google Reader 2013 年停止服務後，我就一直使用它，但隨著社群媒體像 Facebook 或 Twitter 流行，訊息的樣貌也改變很多，最痛苦的就是在 Facebook 跟人互動，結果這些訊息都要透過 Facebook 動態來 Follow，等同於變相洗版，何況 Facebook 有自己的演算法，會篩掉它認為你沒興趣的訊息。</p>\n<p>這幾天被 Facebook 洗版洗到受不了，外加漏掉一則重要訊息，終於忍無可忍決定找一個新的訂閱方式，但偏偏 Facebook 本身不提供 RSS 訂閱服務，只好土法煉鋼，自己想辦法。</p>\n<p>本文會用 tweeper + GCP + feedly 來完成對 Facebook 公開頁面的訂閱。讓這些消息能更好地被管理。</p>\n<h2 id=\"fetch-rss\"><a class=\"direct-link\" href=\"#fetch-rss\">#</a> Fetch RSS</h2>\n<p>要訂閱消息，就要有消息來源，我們用 tweeper 來抓取 Facebook 並轉換成 RSS，這是一款 Linux 工具，首先安裝</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> tweeper</code></pre>\n<p>使用方式非常簡單，在後面跟著 Facebook 的公開頁面</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">tweeper https://www.facebook.com/groups/cloudnative.tw/</code></pre>\n<p>然後在 stdout 中，就能看到抓取的資料</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rss</span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xml:</span>base</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://facebook.com<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>channel</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>generator</span><span class=\"token punctuation\">></span></span>Tweeper<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>generator</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Biz<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span><br>...</code></pre>\n<p>RSS 使用 XML 格式來發佈消息，這個消息文件稱為 RSS feed。RSS Reader 就是抓取這些 feeds 的 URL 來訂閱。</p>\n<h2 id=\"install-apache\"><a class=\"direct-link\" href=\"#install-apache\">#</a> Install Apache</h2>\n<p>抓取下來的 feed 要給外網存取，因此需要有個網頁伺服器，我們使用最常見的 apache</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> apache2</code></pre>\n<p>安裝好後，apache 會用 80 port 提供 HTTP 服務，相關的文檔放在</p>\n<pre><code>/var/www/\n</code></pre>\n<p>在瀏覽器中輸入對應 IP，可以看到 apache 的畫面</p>\n<p><img src=\"/img/posts/2019/use-feedly-to-subscribe-facebooks-group/feedly-1.png\" alt=\"\"></p>\n<p>當現在有一份文件需要對外提供時，可以放到 /var/www 中，外部就能得到這份文件。</p>\n<h2 id=\"register-a-domain-name\"><a class=\"direct-link\" href=\"#register-a-domain-name\">#</a> Register a Domain Name</h2>\n<p>因為資安考量，我們不希望將內網曝露到外網中，想在外部架設新的 Server 來提供服務，為了方便 RSS Reader 能找到 Server Address，還需要有個 Domain Name，也就是平常說的網址，這個網址能對應到自行架設的 Server Address。Domain Name 可以向供應商購買，像 Google Domains 就有提供這個服務，價格是 20$/Year</p>\n<p><img src=\"/img/posts/2019/use-feedly-to-subscribe-facebooks-group/feedly-2.png\" alt=\"\"></p>\n<p>但我們先用免費的 Domain 來測試，交大有無償提供這項服務</p>\n<p><img src=\"/img/posts/2019/use-feedly-to-subscribe-facebooks-group/feedly-3.png\" alt=\"\"></p>\n<p>註冊並登入後，在網域管理的標籤下，可以新增子網域，輸入自定義的網域名稱</p>\n<p><img src=\"/img/posts/2019/use-feedly-to-subscribe-facebooks-group/feedly-4.png\" alt=\"\"></p>\n<p>並在 DNS 管理中新增紀錄，輸入名稱與 IP，即可完成申請。如果已經有 GCP 的，可以在 IP 填入 GCP 的 External Address，如果還沒有，先進行下一步，取得 GCP 的 IP。</p>\n<h2 id=\"set-gcp\"><a class=\"direct-link\" href=\"#set-gcp\">#</a> Set GCP</h2>\n<p>申請好網域後，就是要架 Server 了。外部 Server 可以用 GCP 架設，具體流程是進入 GCP，開好 VM，安裝需要的軟體，如果不知道怎麼使用 GCP，可以參考<a href=\"https://blog.kenwsc.com/posts/2019/coding-by-your-smartphone/\">前面的文章</a>，GCP 也有提供 apache 的<a href=\"https://cloud.google.com/compute/docs/tutorials/basic-webserver-apache?hl=zh-tw\">安裝說明</a></p>\n<p><img src=\"/img/posts/2019/use-feedly-to-subscribe-facebooks-group/feedly-5.png\" alt=\"\"></p>\n<p>開通 VM 時，要記得將 Firewalls 的 Allow HTTP traffic、Allow HTTPS traffic 兩項打勾，GCP 才能提供 HTTP 跟 HTTPS 的服務。</p>\n<p>VM 設完來建立工作目錄。在家目錄底下建一個 rssfeed 資料夾，將輸出的 RSS feed 放到這個資料夾中。接著到 /var/www/html 下創建一個連結到 rssfeed，這樣一來，即使沒有管理者權限，也能在家目錄下管理檔案</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> rssfeed <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> rssfeed<br>tweeper https://www.facebook.com/groups/cloudnative.tw <span class=\"token operator\">></span> cloudnative.tw.xml<br><span class=\"token builtin class-name\">cd</span> /var/www/html<br><span class=\"token function\">sudo</span> <span class=\"token function\">ln</span> -s ~/rssfeed ./rssfeed</code></pre>\n<p>完成後還要修改網路設定，到網路服務點選 Cloud DNS</p>\n<p><img src=\"/img/posts/2019/use-feedly-to-subscribe-facebooks-group/feedly-6.png\" alt=\"\"></p>\n<p>建立區域，將 DNS 名稱，就是前面步驟申請的網域名填入</p>\n<p><img src=\"/img/posts/2019/use-feedly-to-subscribe-facebooks-group/feedly-7.png\" alt=\"\"></p>\n<p>外部就可以用 URL 來使用 GCP 的服務了。</p>\n<h2 id=\"subscribe-rss\"><a class=\"direct-link\" href=\"#subscribe-rss\">#</a> Subscribe RSS</h2>\n<p>現在用 feedly 訂閱剛剛製作完成的 RSS feed，打開 feedly，點選側欄的「+」號，進入探索頁面</p>\n<p><img src=\"/img/posts/2019/use-feedly-to-subscribe-facebooks-group/feedly-8.png\" alt=\"\"></p>\n<p>在搜尋欄中填入 RSS 的網路位置，例如</p>\n<pre><code>http://example.nctu.me/rssfeed/cloudnative.tw.xml\n</code></pre>\n<p>就能在 FEEDS 的訂閱項目中看到訊息啦</p>\n<p><img src=\"/img/posts/2019/use-feedly-to-subscribe-facebooks-group/feedly-9.png\" alt=\"\"></p>\n<p>是不是很有成就感！</p>\n<h2 id=\"update-rss-periodically\"><a class=\"direct-link\" href=\"#update-rss-periodically\">#</a> Update RSS Periodically</h2>\n<p>雖然能用 feedly 訂閱 RSS 了，但 RSS 需要定期更新，feedly 才有最新的資料能抓。我們這邊利用 Linux 的自動執行程序 cron 來做這件事。</p>\n<p>先將執行的指令寫成腳本，打開 GCP 的 VM，輸入</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> cronscript <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> cronscript<br><span class=\"token function\">vi</span> update_fb_group.sh</code></pre>\n<p>內容是</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">tweeper https://www.facebook.com/groups/cloudnative.tw <span class=\"token operator\">></span> ~/rssfeed/cloudnative.tw.xml</code></pre>\n<p>然後要讓 VM 能依照排程，自動執行這支腳本，因此需要使用 cron</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">crontab</span> -e</code></pre>\n<p>打開 crontab 後有範例，依照設定定期執行的時間後，就會定期執行預設的腳本</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># m h  dom mon dow   command</span><br><span class=\"token number\">0</span> */1 * * * /home/ken/cronscript/update_fb_group.sh</code></pre>\n<p>第一行的 0 表示 0 分時執行，第二行的 */1 表示每小時執行，最後的 command 表示需要執行的指令。</p>\n<p>如此一來，服務架設完成，我們有正式的 RSS feeds 了。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>讓我們來看看 feedly 抓資料的速度</p>\n<p><img src=\"/img/posts/2019/use-feedly-to-subscribe-facebooks-group/feedly-10.png\" alt=\"\"></p>\n<p>該筆資料在 2019/12/07 14:58:24 發表，到 2019/12/08 11:17:51 時抓進 feedly，需要快一天，呃，好慢。因為我們的 cron 是每小時更新，速度慢純粹是 feedly 的問題了，依照 feedly 官方的說法，fetcher 是一小時左右抓取一次，可能它有自己的演算法，會再根據每個 feed 的活躍度修改抓取頻率？</p>\n<p>且不管速度，至少這樣一來，我們能方便管理訊息了。我統計過，自己一天在 FB 的訊息量大約是 20+，有 feedly 能協助管理訊息後，Facebook 終於可以回歸到乾淨的版面了。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://cloud.google.com/compute/docs/tutorials/basic-webserver-apache?hl=zh-tw\">Google Cloud 執行基本 Apache 網路伺服器</a></li>\n<li><a href=\"https://medium.com/@ken00535/coding-by-your-smartphone-4dee8438462f\">Coding by Your Smartphone</a></li>\n<li><a href=\"https://nctu.me/\">NCTU.me Domain Hosting</a></li>\n<li><a href=\"http://manpages.ubuntu.com/manpages/bionic/man1/tweeper.1.html\">Tweeper</a></li>\n<li><a href=\"https://feedly.com/\">feedly</a></li>\n</ul>\n",
      "date_published": "2019-12-08T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2019/send-gmail-with-python/",
      "url": "https://blog.kenwsc.com/posts/2019/send-gmail-with-python/",
      "title": "從零開始的 SMTP：以 Python 為例",
      "content_html": "<p>這陣子在重溫 SMTP，想說拿 Gmail 來測試，看看能不能從底層刻出一個簡單的 SMTP Client。沒有其他目的，本文會使用 Python 當範例，一步步實現 SMTP 協議。</p>\n<h2 id=\"set-gmail\"><a class=\"direct-link\" href=\"#set-gmail\">#</a> Set Gmail</h2>\n<p>既然是用 Gmail，就要先把 Gmail 設定好。因為安全性的因素，Gmail 會管控部分應用程式，不讓它們登入，很不幸的，我們自己寫的 Python Script 就是所謂的低安全性應用程式。因此在測試前請先到 Google <a href=\"https://myaccount.google.com/lesssecureapps\">設定頁面</a>中開啟「允許低安全性應用程式」，測試完後再改回去。</p>\n<p><img src=\"/img/posts/2019/send-gmail-with-python/gmail-1.png\" alt=\"\"></p>\n<h2 id=\"create-a-ssl-socket\"><a class=\"direct-link\" href=\"#create-a-ssl-socket\">#</a> Create a SSL Socket</h2>\n<p>在寫 Code 前，要先知道 Server 的位置跟 Port，參考 Gmail 頁面的說明</p>\n<p><img src=\"/img/posts/2019/send-gmail-with-python/gmail-2.png\" alt=\"\"></p>\n<p>知道 SMTP 的 Server 是 <a href=\"http://smtp.gmail.com\">smtp.gmail.com</a>，SSL port 是 465。</p>\n<p>創建一個 Socket，用來發送 SMTP</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> socket <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span><br><span class=\"token keyword\">import</span> ssl<br><span class=\"token keyword\">import</span> smtplib<br><span class=\"token keyword\">import</span> base64<br><br>mailserver <span class=\"token operator\">=</span> <span class=\"token string\">\"smtp.gmail.com\"</span><br>mailport <span class=\"token operator\">=</span> <span class=\"token number\">465</span><br><br>context <span class=\"token operator\">=</span> ssl<span class=\"token punctuation\">.</span>create_default_context<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>clientSocket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">)</span><br>clientSocket<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>mailserver<span class=\"token punctuation\">,</span> mailport<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>clientSocket <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>wrap_socket<span class=\"token punctuation\">(</span>clientSocket<span class=\"token punctuation\">,</span> server_hostname<span class=\"token operator\">=</span>mailserver<span class=\"token punctuation\">)</span></code></pre>\n<p>ssl 是用來加密，如果沒有加密，等於將自己的機密資訊暴露在網路上，現在比較正式的應用都會要求加密。如果沒有用 ssl 就要使用 tls，否則無法連線。</p>\n<p>執行 connect 後，host 會跟 server 握手，雙方的連線就完成了。</p>\n<h2 id=\"hello-and-login\"><a class=\"direct-link\" href=\"#hello-and-login\">#</a> Hello and Login</h2>\n<p>SMTP 的 Command 可以參照 <a href=\"https://tools.ietf.org/html/rfc821\">RFC 821</a>，連線相關的指令是 HELO 跟 AUTH LOGIN，前者用來通知身分，後者用來登入，記得要用 \\r\\n 結尾</p>\n<pre class=\"language-py\"><code class=\"language-py\">recv <span class=\"token operator\">=</span> clientSocket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>recv<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> recv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'220'</span><span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"220 reply not received from server.\"</span><span class=\"token punctuation\">)</span><br><br>heloCommand <span class=\"token operator\">=</span> <span class=\"token string\">'HELO Ken\\r\\n'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>clientSocket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>heloCommand<span class=\"token punctuation\">)</span><br>recv1 <span class=\"token operator\">=</span> clientSocket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>recv1<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> recv1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'250'</span><span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'250 reply not received from server.'</span><span class=\"token punctuation\">)</span><br><br>heloCommand <span class=\"token operator\">=</span> <span class=\"token string\">'AUTH LOGIN\\r\\n'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>clientSocket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>heloCommand<span class=\"token punctuation\">)</span><br>recv1 <span class=\"token operator\">=</span> clientSocket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>recv1<span class=\"token punctuation\">)</span></code></pre>\n<p>如果前面的操作都順利，應該會收到 server 的回覆</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">220</span> smtp.gmail.com ESMTP d6sm6677367pju.8 - gsmtp<br><span class=\"token number\">250</span> smtp.gmail.com at your <span class=\"token function\">service</span><br><span class=\"token number\">334</span> VXNlcm5hbWU6</code></pre>\n<p>後面 334 是等待客戶端輸入，VXNlcm5hbWU6 是經過 base64 編碼後的 username:，簡單講，Gmail 在等登入資訊。</p>\n<p>同樣將登入的帳號密碼編碼後傳送給 Gmail</p>\n<pre class=\"language-py\"><code class=\"language-py\">clientSocket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"account\"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>clientSocket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>recv1 <span class=\"token operator\">=</span> clientSocket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>recv1<span class=\"token punctuation\">)</span><br>clientSocket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>clientSocket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>recv1 <span class=\"token operator\">=</span> clientSocket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>recv1<span class=\"token punctuation\">)</span></code></pre>\n<p>得到回應</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">334</span> UGFzc3dvcmQ6<br><span class=\"token number\">235</span> <span class=\"token number\">2.7</span>.0 Accepted</code></pre>\n<p>看到 Accepted 代表登入成功。</p>\n<h2 id=\"send-mail\"><a class=\"direct-link\" href=\"#send-mail\">#</a> Send Mail</h2>\n<p>到這裡就可以開始寫信了，使用 MAIL FROM: 標明寄件人，使用 RCPT TO: 標明收件人</p>\n<pre class=\"language-py\"><code class=\"language-py\">mailCommand <span class=\"token operator\">=</span> <span class=\"token string\">\"MAIL FROM: &lt;sender[@gmail.com](mailto:ken00535@gmail.com)>\\r\\n\"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>clientSocket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>mailCommand<span class=\"token punctuation\">)</span><br>recv1 <span class=\"token operator\">=</span> clientSocket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>recv1<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> recv1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'250'</span><span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'250 reply not received from server.'</span><span class=\"token punctuation\">)</span><br><br>mailCommand <span class=\"token operator\">=</span> <span class=\"token string\">\"RCPT TO: &lt;[receiver@gmail.com](mailto:ken00535@gmail.com)>\\r\\n\"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>clientSocket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>mailCommand<span class=\"token punctuation\">)</span><br>recv1 <span class=\"token operator\">=</span> clientSocket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>recv1<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> recv1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'250'</span><span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'250 reply not received from server.'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>寄件人跟收件人填自己的帳號。</p>\n<p>接著用 DATA 表示信件內容</p>\n<pre class=\"language-py\"><code class=\"language-py\">dataCommand <span class=\"token operator\">=</span> <span class=\"token string\">'DATA\\r\\n'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dataCommand<span class=\"token punctuation\">)</span><br>clientSocket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>dataCommand<span class=\"token punctuation\">)</span><br>recv1 <span class=\"token operator\">=</span> clientSocket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>recv1<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> recv1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'354'</span><span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data 354 reply not received from server.'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>收到</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">354</span>  Go ahead d6sm6677367pju.8 - gsmtp</code></pre>\n<p>表示 Server 等著接收信件內容，這時可以填入正文。正文結尾要用 .\\r\\n</p>\n<pre class=\"language-py\"><code class=\"language-py\">message <span class=\"token operator\">=</span> <span class=\"token string\">'Hello, world\\r\\n.\\r\\n'</span><br>clientSocket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>recv1 <span class=\"token operator\">=</span> clientSocket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>recv1<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> recv1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'250'</span><span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end msg 250 reply not received from server.'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Gmail Server 就會幫忙寄出這封 SMTP 報文。</p>\n<h2 id=\"quit\"><a class=\"direct-link\" href=\"#quit\">#</a> Quit</h2>\n<p>完成後，不要忘記結束跟 Server 的連線，使用 QUIT</p>\n<pre class=\"language-py\"><code class=\"language-py\">quitCommand <span class=\"token operator\">=</span> <span class=\"token string\">'QUIT\\r\\n'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>clientSocket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>quitCommand<span class=\"token punctuation\">)</span><br>recv1 <span class=\"token operator\">=</span> clientSocket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>recv1<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> recv1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'221'</span><span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'quit 221 reply not received from server.'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>打開 Gmail，看看成果</p>\n<p><img src=\"/img/posts/2019/send-gmail-with-python/gmail-3.png\" alt=\"\"></p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>簡單用 Python 跑一次 SMTP 的流程，其實就是不斷寫進各種指令，看看會吐什麼出來，好像有點造輪子的感覺？這類基礎打磨好，對熟悉網路通訊協議很有幫助。如果只是要寫應用，Python 有提供 smtplib，可以 call method 直接搞定。或者不一定要用 Python，直接用 telnet 跟 Server 連線也是個方式。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"http://yhhuang1966.blogspot.com/2018/10/python-gmail.html\">Python 學習筆記 : 以 Gmail 寄送郵件的方法 (一)</a></li>\n<li><a href=\"https://support.google.com/mail/answer/7126229?hl=zh-Hant\">Gmail 說明</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc821\">RFC 821</a></li>\n</ul>\n",
      "date_published": "2019-12-06T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2019/use-grafana-to-show-prometheus-data/",
      "url": "https://blog.kenwsc.com/posts/2019/use-grafana-to-show-prometheus-data/",
      "title": "監控節點的度量指標：Grafana 串接 Prometheus",
      "content_html": "<p>在<a href=\"https://blog.kenwsc.com/posts/2019/use-prometheus-to-monitor-end-devices/\">前面的討論</a>中，我們可以用 Prometheus 去監控 End Devices，但 Prometheus 內建的 Dashboard 只是為了開發用，缺乏許多進階功能，在真正需要資料視覺化時並不方便。因此 Prometheus 通常會跟 Grafana 搭配使用。</p>\n<p>Grafana 是一套開源的 Dashboard 平台，之前開發產品時，有用過 Grafana 來呈現 Database 中的資料。其實用起來還是偏 Monitor Host，並不適合用在 Domain Data Visualization，但在開發初期，我們可以先借用 Grafana 的呈現能力來確認方向（反正開發初期規格會一直修改，重要的是工具能否快速調整，實不實用倒是其次）。</p>\n<h2 id=\"install-grafana\"><a class=\"direct-link\" href=\"#install-grafana\">#</a> Install Grafana</h2>\n<p>跟 Prometheus 一樣，用 docker 來安裝</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">docker run -p <span class=\"token number\">3000</span>:3000 --user root --name grafana -v <span class=\"token string\">\"<span class=\"token environment constant\">$PWD</span>\"</span>/docker/grafana:/var/lib/grafana grafana/grafana <span class=\"token operator\">&amp;</span></code></pre>\n<p>用 -p 將 port forward 到 3000；用 -v 將 grafana 內的資料 bind 到家目錄的資料夾。</p>\n<p>安裝完成後，在瀏覽器輸入 URL，應該能看到登入畫面</p>\n<p><img src=\"/img/posts/2019/use-grafana-to-show-prometheus-data/grafana-1.png\" alt=\"\"></p>\n<h2 id=\"setup-data-source\"><a class=\"direct-link\" href=\"#setup-data-source\">#</a> Setup Data Source</h2>\n<p>輸入預設的帳號密碼 admin:admin 後登入</p>\n<p><img src=\"/img/posts/2019/use-grafana-to-show-prometheus-data/grafana-2.png\" alt=\"\"></p>\n<p>需要在 Grafana 中加入 Data source，Grafana 才知道要去哪裡抓資料，點選 Add data source 的圖示</p>\n<p><img src=\"/img/posts/2019/use-grafana-to-show-prometheus-data/grafana-3.png\" alt=\"\"></p>\n<p>第一個就是 Prometheus，不用猶豫，點下去</p>\n<p><img src=\"/img/posts/2019/use-grafana-to-show-prometheus-data/grafana-4.png\" alt=\"\"></p>\n<p>在 URL 中輸入 Promethues 的 URL，port 沒改的話就是 9090。儲存並測試。</p>\n<h2 id=\"create-dashboard\"><a class=\"direct-link\" href=\"#create-dashboard\">#</a> Create Dashboard</h2>\n<p>有了資料來源後，要緊接著加入 Dashboard，Grafana 有提供 Prometheus 的範例 Dashboard，我們來看看</p>\n<p><img src=\"/img/posts/2019/use-grafana-to-show-prometheus-data/grafana-5.png\" alt=\"\"></p>\n<p>點選上方的 Dashboards 分頁，加入預設的 Dashboard</p>\n<p><img src=\"/img/posts/2019/use-grafana-to-show-prometheus-data/grafana-6.png\" alt=\"\"></p>\n<p>華麗的 Dashboard 就跑出來了！是不是很簡單！雖然這張表的數據不是我們要的，但光看就是很威啊。</p>\n<h2 id=\"add-panel\"><a class=\"direct-link\" href=\"#add-panel\">#</a> Add Panel</h2>\n<p>有了範例後，參照 Grafana 的說明慢慢手動調整各個 Panel，就能調出想要的效果啦。假設今天想 Monitor end devices 的 CPU usage，我們可以加入一個新的 Panel</p>\n<p><img src=\"/img/posts/2019/use-grafana-to-show-prometheus-data/grafana-7.png\" alt=\"\"></p>\n<p>用 Add Query 加入查詢式</p>\n<p><img src=\"/img/posts/2019/use-grafana-to-show-prometheus-data/grafana-8.png\" alt=\"\"></p>\n<p>查詢式用的是 Prometheus 的查詢語言 PromQL，照樣輸入</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token number\">100</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>avg <span class=\"token keyword\">by</span> <span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>irate<span class=\"token punctuation\">(</span>node_cpu_seconds_total{job<span class=\"token operator\">=</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">mode</span><span class=\"token operator\">=</span><span class=\"token string\">\"idle\"</span>}<span class=\"token punctuation\">[</span><span class=\"token number\">5</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></code></pre>\n<p><img src=\"/img/posts/2019/use-grafana-to-show-prometheus-data/grafana-9.png\" alt=\"\"></p>\n<p>查詢結果就自動變成圖表了。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>以 Dashboard 來講，Grafana 真的很強大，呈現的樣式多，查詢語言容易上手，但是 Grafana 不適合用來進行資料處理，如果需要呈現處理後的資料，而查詢語言本身又沒有相關的聚合指令的話，記得先處理完後再丟進 Database，或者在 Database 跟 Grafana 中間加入一個中間層，不要用 Grafana 硬幹。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://blog.techbridge.cc/2019/08/26/how-to-use-prometheus-grafana-in-flask-app/\">使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統</a></li>\n<li><a href=\"https://grafana.com/\">Grafana Labs</a></li>\n</ul>\n",
      "date_published": "2019-11-30T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2019/use-commitizen-to-write-graceful-git-comment/",
      "url": "https://blog.kenwsc.com/posts/2019/use-commitizen-to-write-graceful-git-comment/",
      "title": "輕鬆上手約定式提交：Commitizen 初體驗",
      "content_html": "<p>最近參加 <a href=\"https://www.facebook.com/DevOpsTaiwan/?__xts__%5B0%5D=68.ARDEgwToQAGuv9hG3_bq6XWyLfuKwC8UtMvzV5WLsG4UpdFV7OX5T7j3D5mDFIFc-g4fw6AmpuWS6Q2lXlGOX63ewQsP-Zr28ToevHy_ys6mbYIQw_XhaPLa9vdayvCkwV0GiPgJ0ex-m3cPNb0BEO4O-psJC4pcRo4QwsG10-DYNJW9TVMZp6fUQk7vJwiYvSYwwKUEfySzN7acg1qnTyTqq9gfhp6PH4T_wyR_qcA5sjwkmHklTSZs5tYXRJv_hS7p72UmGZc9AGktwZ3HKiuCxdmc3fVK2l9lRASxzyPAC4qWVPEYRF7eScGeOprzdFkfnkbmkoCKqappUDmFhHrXq5ONVNSXCXC_ltxFT-TWwPyFeLJk5o0Cqe0&amp;__xts__%5B1%5D=68.ARAcpv3SzZ6EJSKKfcow3owDtiyMig-u6PbVyaWDvjd8xNckpS8mKdrSgY8LjHquhuMgtjC9T36r5IdZkW79QMhDBVs-dFX-ejRugNm4slqIlj7Z0NFmlSotqiDtbmRivf8CPNkFGHvms-BdA1925rc4Qss3OXhWVaAF53i2MtAqTdC4NwOdN0RbjRT2loQHnkLFnSqk-QU-YDNG&amp;__tn__=K-R&amp;eid=ARAGF0O3M8GMJQ8AvevMsEgZ1JRpx_HAz-w9szWyv3wn99ZFociIgks68rbjUVVQoBUFPAtPcnDLvKR9&amp;fref=mentions\">DevOps Meetup</a> 的活動，Speaker 提到團隊使用 Commitizen 這套工具來統一提交訊息的風格，當場就有種醍醐灌頂的感覺。我們團隊前陣子才 Suffer 在 Commit Style 分歧，知識管理效率低落，有時只有 commit 本人能看懂，而使用共同模板又太浪費時間，跟 Git 鼓勵 commit 的精神背道而馳。聽完後，真的是相見恨晚，完全命中我的痛點。</p>\n<p>Commitizen 是由 AngularJS 的規範衍伸而來，各團隊可以依照需求自行調整，我們 Step by Step 來看看 Commitizen 的效果如何。</p>\n<h2 id=\"install-node.js\"><a class=\"direct-link\" href=\"#install-node.js\">#</a> Install Node.js</h2>\n<p>因為 Commitizen 是使用 Node.js 開發，不免俗的，要裝一下 Node.js，Ubuntu 的安裝方式是</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> nodejs<br><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">npm</span></code></pre>\n<p>確認是否有安裝完成</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@ken-Lenovo-ideapad-330-15ICH:~/git/git$ node -v<br>v8.10.0<br>ken@ken-Lenovo-ideapad-330-15ICH:~/git/git$ <span class=\"token function\">npm</span> -v<br><span class=\"token number\">3.5</span>.2</code></pre>\n<h2 id=\"install-commitizen\"><a class=\"direct-link\" href=\"#install-commitizen\">#</a> Install Commitizen</h2>\n<p>接著使用 Node.js 的 Package Management 工具 npm 來安裝 Commitizen</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g commitizen<br><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'{ \"path\": \"cz-conventional-changelog\" }'</span> <span class=\"token operator\">></span> ~/.czrc</code></pre>\n<p>-g 是全域安裝的意思，如果沒有需要針對 Project 制定 Style，用全域安裝即可，.czrc 則是用來設定 template 的路徑。</p>\n<h2 id=\"git-format\"><a class=\"direct-link\" href=\"#git-format\">#</a> Git Format</h2>\n<p>在預設的 format 中，commit comment 由三個部分組成</p>\n<pre><code>&lt;head&gt;\n&lt;body&gt;\n&lt;footer&gt;\n</code></pre>\n<p>讓我們看一個簡單的例子</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">commit 4030e040b6044de68b2750702a5b6065c887960c<br>Author: kenwschen <span class=\"token operator\">&lt;</span>ken*****@<span class=\"token punctuation\">[</span>gmail.com<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>mailto:ken00535@gmail.com<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><br>Date:   Thu Nov <span class=\"token number\">28</span> <span class=\"token number\">22</span>:51:44 <span class=\"token number\">2019</span> +0800<br><br>feat<span class=\"token punctuation\">(</span>libhello<span class=\"token punctuation\">)</span>: <span class=\"token function\">add</span> hello <span class=\"token function\">file</span><br><br>hello, this is a longer description<br><br>fix <span class=\"token comment\">#100</span></code></pre>\n<p>第一行是 head，也就是 title，通常會由</p>\n<pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n</code></pre>\n<p>在本例中可以看成這個 commit 為新增功能(feature)，更改的 module 是 libhello，簡單描述是 add hello file。</p>\n<p>中間行是 body，代表詳細的描述，通常會說明要解決的問題是什麼，具體做法是什麼等等。</p>\n<p>最後一行是 footer，通常會標明相關的 issue，如果沒有將 issue 跟 git 結合在一起的話，footer 可以不標。</p>\n<h2 id=\"git-cz\"><a class=\"direct-link\" href=\"#git-cz\">#</a> Git cz</h2>\n<p>實際執行 Commitizen，使用 git cz 來取代 git commit</p>\n<p><img src=\"/img/posts/2019/use-commitizen-to-write-graceful-git-comment/commitizen-1.png\" alt=\"\"></p>\n<p>可以看到，Commitizen 會很貼心顯示選單讓 user 選擇，只要照著問題跟選單將答案填入就好，就是這麼簡單。</p>\n<p>來看一下提交的結果</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@ken-Lenovo-ideapad-330-15ICH:~/git$ <span class=\"token builtin class-name\">echo</span> hello <span class=\"token operator\">></span> hello     <br>ken@ken-Lenovo-ideapad-330-15ICH:~/git$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>              <br>ken@ken-Lenovo-ideapad-330-15ICH:~/git$ <span class=\"token function\">git</span> cz                 <br>cz-cli@4.0.3, cz-conventional-changelog@3.0.1                  <br>                                                                <br>? Select the <span class=\"token builtin class-name\">type</span> of change that you're committing: feat:        A new feature                                                     <br>? What is the scope of this change <span class=\"token punctuation\">(</span>e.g. component or <span class=\"token function\">file</span> name<span class=\"token punctuation\">)</span>: <span class=\"token punctuation\">(</span>press enter to skip<span class=\"token punctuation\">)</span> libhello                                   <br>? Write a short, imperative tense description of the change <span class=\"token punctuation\">(</span>max <span class=\"token number\">84</span> chars<span class=\"token punctuation\">)</span>:                                                        <br>    <span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span> <span class=\"token function\">add</span> hello <span class=\"token function\">file</span>                                               <br>? Provide a longer description of the change: <span class=\"token punctuation\">(</span>press enter to skip<span class=\"token punctuation\">)</span><br>    hello, this is a longer description<br>? Are there any breaking changes? No<br>? Does this change affect any <span class=\"token function\">open</span> issues? No<br><span class=\"token punctuation\">[</span>master 2e1ea38<span class=\"token punctuation\">]</span> feat<span class=\"token punctuation\">(</span>libhello<span class=\"token punctuation\">)</span>: <span class=\"token function\">add</span> hello <span class=\"token function\">file</span><br>    <span class=\"token number\">1</span> <span class=\"token function\">file</span> changed, <span class=\"token number\">1</span> insertion<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span><br>    create mode <span class=\"token number\">100644</span> hello<br><br>ken@ken-Lenovo-ideapad-330-15ICH:~/git$ <span class=\"token function\">git</span> log<br>commit 2e1ea3868dcf972c2499378ee9d5b3ac7ab654b6 <span class=\"token punctuation\">(</span>HEAD -<span class=\"token operator\">></span> master<span class=\"token punctuation\">)</span><br>Author: kenwschen <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span>ken*****@gmail.com<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>mailto:ken00535@gmail.com<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><br>Date:   Fri Nov <span class=\"token number\">29</span> 00:40:31 <span class=\"token number\">2019</span> +0800<br><br>feat<span class=\"token punctuation\">(</span>libhello<span class=\"token punctuation\">)</span>: <span class=\"token function\">add</span> hello <span class=\"token function\">file</span><br><br>hello, this is a longer description</code></pre>\n<p>是不是太美了！</p>\n<h2 id=\"customize-format\"><a class=\"direct-link\" href=\"#customize-format\">#</a> Customize Format</h2>\n<p>如果專案有自訂格式，例如需要標註修改方式、修改目的等等，可以怎麼做？Commitizen 支援許多模板，其中 cz-customizable 有讓 user 自訂選項的彈性，先安裝起來</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g cz-customizable<br><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'{ \"path\": \"cz-customizable\" }'</span> <span class=\"token operator\">></span> ~/.czrc</code></pre>\n<p>將配置項的範例複製到家目錄</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> /usr/local/lib/node_modules/cz-customizable/cz-config-EXAMPLE.js ~/.cz-config.js</code></pre>\n<p>打開配置文件，可以看到其中有許多配置設定，假設現在需要新增一個互動問答，讓 user 輸入 commit 的 purpose，可以在其中加入</p>\n<pre class=\"language-js\"><code class=\"language-js\">    messages<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>        type<span class=\"token operator\">:</span> <span class=\"token string\">\"Select the type of change that you're committing:\"</span><span class=\"token punctuation\">,</span><br>        scope<span class=\"token operator\">:</span> <span class=\"token string\">'\\nDenote the SCOPE of this change (optional):'</span><span class=\"token punctuation\">,</span><br>        customScope<span class=\"token operator\">:</span> <span class=\"token string\">'Denote the SCOPE of this change:'</span><span class=\"token punctuation\">,</span><br>        subject<span class=\"token operator\">:</span> <span class=\"token string\">'Write a SHORT, IMPERATIVE tense description of the change:\\n'</span><span class=\"token punctuation\">,</span><br>        body<span class=\"token operator\">:</span> <span class=\"token string\">'Provide a LONGER description of the change (optional). Use \"|\" to break new line:\\n'</span><span class=\"token punctuation\">,</span><br>        <span class=\"token operator\">**</span>bodyPurpose<span class=\"token operator\">:</span> <span class=\"token string\">'The purpose of the change:\\n'</span><span class=\"token punctuation\">,</span><span class=\"token operator\">**</span><br>        breaking<span class=\"token operator\">:</span> <span class=\"token string\">'List any BREAKING CHANGES (optional):\\n'</span><span class=\"token punctuation\">,</span><br>        footer<span class=\"token operator\">:</span> <span class=\"token string\">'List any ISSUES CLOSED by this change (optional). E.g.: #31, #34:\\n'</span><span class=\"token punctuation\">,</span><br>        confirmCommit<span class=\"token operator\">:</span> <span class=\"token string\">'Are you sure you want to proceed with the commit above?'</span><span class=\"token punctuation\">,</span><br>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre>\n<p>其中 bodyPurpose 這行是新加入的選項。</p>\n<p>接著修改問句文件</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> /usr/local/lib/node_modules/cz-customizable/questions.js</code></pre>\n<p>在其中加入 bodyPurpose</p>\n<pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token operator\">...</span><br>    messages<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span><br>          messages<span class=\"token punctuation\">.</span>body <span class=\"token operator\">||</span> <span class=\"token string\">'Provide a LONGER description of the change (optional). Use \"|\" to break new line:\\n'</span><span class=\"token punctuation\">;</span><br>        <span class=\"token operator\">**</span>messages<span class=\"token punctuation\">.</span>bodyPurpose <span class=\"token operator\">=</span> messages<span class=\"token punctuation\">.</span>bodyPurpose <span class=\"token operator\">||</span> <span class=\"token string\">'The purpose of the change:\\n'</span><span class=\"token punctuation\">;</span><span class=\"token operator\">**</span><br>        messages<span class=\"token punctuation\">.</span>breaking <span class=\"token operator\">=</span> messages<span class=\"token punctuation\">.</span>breaking <span class=\"token operator\">||</span> <span class=\"token string\">'List any BREAKING CHANGES (optional):\\n'</span><span class=\"token punctuation\">;</span><br>    <span class=\"token operator\">...</span><br><br>    <span class=\"token operator\">...</span><br>          <span class=\"token punctuation\">{</span><br>            type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span><br>            name<span class=\"token operator\">:</span> <span class=\"token string\">'body'</span><span class=\"token punctuation\">,</span><br>            message<span class=\"token operator\">:</span> messages<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span><br>          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>          <span class=\"token operator\">**</span><span class=\"token punctuation\">{</span><br>            type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span><br>            name<span class=\"token operator\">:</span> <span class=\"token string\">'bodyPurpose'</span><span class=\"token punctuation\">,</span><br>            message<span class=\"token operator\">:</span> messages<span class=\"token punctuation\">.</span>bodyPurpose<span class=\"token punctuation\">,</span><br>          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token operator\">**</span><br>    <span class=\"token operator\">...</span></code></pre>\n<p>然後修改 commit 生成文件，將 bodyPurpose 加入</p>\n<pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>answers<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> wrapOptions<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span><br>    <span class=\"token operator\">**</span>body <span class=\"token operator\">=</span> body <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>answers<span class=\"token punctuation\">.</span>bodyPurpose<span class=\"token punctuation\">,</span> wrapOptions<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">**</span><br>    body <span class=\"token operator\">=</span> <span class=\"token function\">addBreaklinesIfNeeded</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>breaklineChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>現在來看一下修改的成果</p>\n<p><img src=\"/img/posts/2019/use-commitizen-to-write-graceful-git-comment/commitizen-2.png\" alt=\"\"></p>\n<p>而實際的 log 是</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">commit 3cc8c9aa4a9084fb4b8faa651d98b5376f24e4d6 <span class=\"token punctuation\">(</span>HEAD -<span class=\"token operator\">></span> master<span class=\"token punctuation\">)</span><br>Author: kenwschen <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span>kenxxxxx@gmail.com<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>mailto:ken00535@gmail.com<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><br>Date:   Fri Nov <span class=\"token number\">29</span> <span class=\"token number\">19</span>:56:58 <span class=\"token number\">2019</span> +0800<br><br>feat<span class=\"token punctuation\">(</span>libhello<span class=\"token punctuation\">)</span>: <span class=\"token function\">add</span> hello <span class=\"token function\">file</span><br><br><span class=\"token function\">add</span> a new <span class=\"token function\">file</span> to <span class=\"token builtin class-name\">test</span> commitizen tool. hello is a lib that can say <span class=\"token string\">\"hello\"</span></code></pre>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>有時候程式寫一寫，會忘記升級自己的工具，很多時候團隊遇到的問題不是人的問題，而是工具的問題，我們應該要盡量 align 目標，用工具時時提醒出發點在哪。commit comment 原本是為了溝通而存在，而 Commitizen 可以幫我們更好地去做這件事。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://github.com/commitizen/cz-cli\">Commitizen GitHub</a></li>\n<li><a href=\"https://github.com/leonardoanalista/cz-customizable\">cz-customizable GitHub</a></li>\n</ul>\n",
      "date_published": "2019-11-29T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2019/use-prometheus-to-monitor-end-devices/",
      "url": "https://blog.kenwsc.com/posts/2019/use-prometheus-to-monitor-end-devices/",
      "title": "監控節點的度量指標：Prometheus 入門",
      "content_html": "<p>Prometheus 是一套開源的監控系統，常常搭配雲端，監控服務運行狀態。今年 COSCUP 有一位 Speaker 將它用於 End-Devices 的監控，看起來非常有意思。透過這套系統，我們能將各處節點的資訊整合於統一的平台，讓 Operation 監控服務，避免服務中斷導致價值鍊中斷，同時這些數據也能提供給 Developer，作為後續改善的依據。</p>\n<p>Prometheus 的基本原理是用 HTTP 定期抓取監控端（target）的資料，target 上會有 exporter，將符合 Prometheus 定義的資訊輸出到 HTTP API，Prometheus 拉取後就能將它顯示於 Dashboard。</p>\n<h2 id=\"install-prometheus\"><a class=\"direct-link\" href=\"#install-prometheus\">#</a> Install Prometheus</h2>\n<p>安裝有兩個方式，可以用 binary 安裝或是用 docker 安裝，為隔離與管理方便，這邊選擇使用 docker 安裝</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">docker run --name prometheus -d -p <span class=\"token number\">9090</span>:9090 quay.io/prometheus/prometheus </code></pre>\n<p>記得將 container port forward 到 host 的 port，讓外面可以使用。</p>\n<p>安裝好後，在瀏覽器輸入 Prometheus server 的 IP，應該可以看到 Prometheus 自帶的 GUI，如下</p>\n<p><img src=\"/img/posts/2019/use-prometheus-to-monitor-end-devices/prom-1.png\" alt=\"\"></p>\n<p>Expression 可以輸入 Prometheus 的查詢 PromQL，Graph 會依照 PromQL 顯示對應的採集資料，這些採集資料稱為 Metric，up 這個 Metric 表示對應的採集實例(instance)狀態，當 up 值為 1，表示 exporter instance 正常運作。</p>\n<h2 id=\"install-node-exporter\"><a class=\"direct-link\" href=\"#install-node-exporter\">#</a> Install Node Exporter</h2>\n<p>當要抓取不同 target 或更詳細的資料時，會需要一套 exporter 將資料收集起來，方便 Prometheus server 拉取。Node Exporter 這個 Project 就是要做這件事。它是用 Go 語言寫成，沒有相依性問題，直接下載後就能執行</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -OL <span class=\"token punctuation\">[</span>https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz<span class=\"token punctuation\">)</span><br><span class=\"token function\">tar</span> -xzf node_exporter-0.18.1.linux-amd64.tar.gz<br><span class=\"token function\">cp</span> node_exporter-0.18.1.linux-amd64/node_exporter /usr/local/bin/<br>node_exporter</code></pre>\n<p>下載時請依照自己的作業系統下載對應版本，我們下載 Linux 版後放到安裝目錄，執行</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@ken-Lenovo-ideapad-330-15ICH:~/git/promethus$ node_exporter<br><br>INFO<span class=\"token punctuation\">[</span>0000<span class=\"token punctuation\">]</span> Starting node_exporter <span class=\"token punctuation\">(</span>version<span class=\"token operator\">=</span><span class=\"token number\">0.18</span>.1, <span class=\"token assign-left variable\">branch</span><span class=\"token operator\">=</span>HEAD, <span class=\"token assign-left variable\">revision</span><span class=\"token operator\">=</span>3db77732e925c08f675d7404a8c46466b2ece83e<span class=\"token punctuation\">)</span>  <span class=\"token assign-left variable\">source</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter.go:156\"</span>                                  <br>INFO<span class=\"token punctuation\">[</span>0000<span class=\"token punctuation\">]</span> Build context <span class=\"token punctuation\">(</span>go<span class=\"token operator\">=</span>go1.12.5, <span class=\"token assign-left variable\">user</span><span class=\"token operator\">=</span>root@b50852a1acba, <span class=\"token assign-left variable\">date</span><span class=\"token operator\">=</span><span class=\"token number\">20190604</span>-16:41:18<span class=\"token punctuation\">)</span>  <span class=\"token assign-left variable\">source</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter.go:157\"</span>              <br>INFO<span class=\"token punctuation\">[</span>0000<span class=\"token punctuation\">]</span> Enabled collectors:                           <span class=\"token assign-left variable\">source</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter.go:97\"</span>                         <br>INFO<span class=\"token punctuation\">[</span>0000<span class=\"token punctuation\">]</span>  - arp                                        <span class=\"token assign-left variable\">source</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter.go:104\"</span>                        <br>INFO<span class=\"token punctuation\">[</span>0000<span class=\"token punctuation\">]</span>  - bcache                                     <span class=\"token assign-left variable\">source</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter.go:104\"</span>                        <br>INFO<span class=\"token punctuation\">[</span>0000<span class=\"token punctuation\">]</span>  - bonding                                    <span class=\"token assign-left variable\">source</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter.go:104\"</span><br><span class=\"token punctuation\">..</span>.</code></pre>\n<p>Node Exporter 預設的 port 是 9100，在瀏覽器上輸入後，可以看到</p>\n<p><img src=\"/img/posts/2019/use-prometheus-to-monitor-end-devices/prom-2.png\" alt=\"\"></p>\n<p>底下的 Metrics 就是採集到的 Metrics，點開來會看到 Node Exporter 有採集的資訊</p>\n<pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token comment\"># HELP go_gc_duration_seconds A summary of the GC invocation durations.</span><br><span class=\"token comment\"># TYPE go_gc_duration_seconds summary</span><br><span class=\"token key attr-name\">go_gc_duration_seconds{quantile</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"0\"} 1.4124e-05</span><br><span class=\"token key attr-name\">go_gc_duration_seconds{quantile</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"0.25\"} 3.1017e-05</span><br><span class=\"token key attr-name\">go_gc_duration_seconds{quantile</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"0.5\"} 0.000118785</span><br><span class=\"token key attr-name\">go_gc_duration_seconds{quantile</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"0.75\"} 0.000144924</span><br><span class=\"token key attr-name\">go_gc_duration_seconds{quantile</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"1\"} 0.000173711</span><br>go_gc_duration_seconds_sum 0.000581784<br>go_gc_duration_seconds_count 6<br><span class=\"token comment\"># HELP go_goroutines Number of goroutines that currently exist.</span><br><span class=\"token comment\"># TYPE go_goroutines gauge</span><br>go_goroutines 7<br><span class=\"token comment\"># HELP go_info Information about the Go environment.</span><br><span class=\"token comment\"># TYPE go_info gauge</span><br><span class=\"token key attr-name\">go_info{version</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"go1.12.5\"} 1</span><br><span class=\"token comment\"># HELP go_memstats_alloc_bytes Number of bytes allocated and still in use.</span><br><span class=\"token comment\"># TYPE go_memstats_alloc_bytes gauge</span><br>go_memstats_alloc_bytes 1.942816e+06<br>...</code></pre>\n<h2 id=\"install-node-exporter-2\"><a class=\"direct-link\" href=\"#install-node-exporter-2\">#</a> Install Node Exporter</h2>\n<p>要將新增的 instance 告知 Prometheus server，讓 server 去拉取，就要去修改 server 的 config 檔，因為我們前面是用 docker 來執行，因此要先進到 container 內。其實更好的辦法應該是讓 container 跟外部的 config 檔同步，但我們先關注在 Prometheus 的操作上</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">docker <span class=\"token builtin class-name\">exec</span> -it prometheus <span class=\"token function\">sh</span></code></pre>\n<p>打開 config file</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /etc/prometheus/<br><span class=\"token function\">vi</span> prometheus.yml</code></pre>\n<p>在最下面加入新的 Job</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class=\"token comment\"># Here it's Prometheus itself.    </span><br><span class=\"token key atrule\">scrape_configs</span><span class=\"token punctuation\">:</span>     <br>    <span class=\"token comment\"># The job name is added as a label `job=&lt;job_name>` to any timeseries scraped from this config.       </span><br>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">job_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'prometheus'</span>          <br>      <span class=\"token comment\"># metrics_path defaults to '/metrics'  </span><br>      <span class=\"token comment\"># scheme defaults to 'http'.                          </span><br>      <span class=\"token key atrule\">static_configs</span><span class=\"token punctuation\">:</span>             <br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">targets</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'localhost:9090'</span><span class=\"token punctuation\">]</span><br>                    <br>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">job_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'node'</span><br>      <span class=\"token key atrule\">static_configs</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">targets</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'172.17.0.1:9100'</span><span class=\"token punctuation\">]</span></code></pre>\n<p>在 Prometheus 的術語中，Job 表示一組任務，任務中可能包括對好幾個 instance 的採集。上面新增一組 Job 稱為 node，對 172.17.0.1:9100 這個 instance 進行採集。</p>\n<p>設定完成後重啟 promethus</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">docker container restart prometheus</code></pre>\n<p>打開瀏覽器的 UI，可以看到出現新的 instance</p>\n<p><img src=\"/img/posts/2019/use-prometheus-to-monitor-end-devices/prom-3.png\" alt=\"\"></p>\n<h2 id=\"query-cpu-usage\"><a class=\"direct-link\" href=\"#query-cpu-usage\">#</a> Query CPU Usage</h2>\n<p>假設我們要查詢 instance 的 CPU 使用率，可以怎麼做？我們可以由 Node Exporter 的說明中，看到 node_cpu_seconds_total 這項 metric 是 cpu 花費在特定模式的秒數。</p>\n<p>於是使用 PromQL 的內建函數 irate(v[time])，來取得數據的在時間區段的瞬間增長率，由於 CPU 在時間區段使用的時間秒數就是 CPU 的使用率，如此一來，就能取得使用率數值。</p>\n<p>最後，使用 PromQL 的聚合操作 avg，來將各 CPU 的數值合併，取其平均，聚合的規則是以各 instance 為聚合單位。</p>\n<p>結合所有查詢式如下</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token number\">100</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>avg <span class=\"token keyword\">by</span> <span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>irate<span class=\"token punctuation\">(</span>node_cpu_seconds_total{job<span class=\"token operator\">=</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">mode</span><span class=\"token operator\">=</span><span class=\"token string\">\"idle\"</span>}<span class=\"token punctuation\">[</span><span class=\"token number\">5</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></code></pre>\n<p>job 跟 mode 是 metric 的 label，扣掉 idle 所佔的使用率後，剩下的使用率就是 CPU 使用率了，按下執行後，Graph 就跑出來啦</p>\n<p><img src=\"/img/posts/2019/use-prometheus-to-monitor-end-devices/prom-4.png\" alt=\"\"></p>\n<h2 id=\"monitor-pri\"><a class=\"direct-link\" href=\"#monitor-pri\">#</a> Monitor PRi</h2>\n<p>確認主機的資訊能拉取後，如法炮製到 RPi 上，安裝 Node Exporter，Model B 的架構是 armv6</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">pi@raspberrypi:~/prometheus $ <span class=\"token function\">wget</span> <span class=\"token punctuation\">[</span>https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux<span class=\"token punctuation\">)</span><br>-armv6.tar.gz<br>pi@raspberrypi:~/prometheus $ <span class=\"token function\">tar</span> -zxvf node_exporter-0.18.1.linux-armv6.tar.gz<br>pi@raspberrypi:~/prometheus $ <span class=\"token builtin class-name\">cd</span> node_exporter-0.18.1.linux-armv6/<br>pi@raspberrypi:~/prometheus/node_exporter-0.18.1.linux-armv6 $ ./node_exporter</code></pre>\n<p>修改 prometheus.yml，加入新的 instance</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class=\"token comment\"># Here it's Prometheus itself.</span><br><span class=\"token key atrule\">scrape_configs</span><span class=\"token punctuation\">:</span><br>  <span class=\"token comment\"># The job name is added as a label `job=&lt;job_name>` to any timeseries scraped from this config.</span><br>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">job_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'prometheus'</span><br>    <span class=\"token comment\"># metrics_path defaults to '/metrics'</span><br>    <span class=\"token comment\"># scheme defaults to 'http'.</span><br>    <span class=\"token key atrule\">static_configs</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">targets</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'localhost:9090'</span><span class=\"token punctuation\">]</span><br>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">job_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'node'</span><br>    <span class=\"token key atrule\">static_configs</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">targets</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'172.17.0.1:9100'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'192.168.5.10:9100'</span><span class=\"token punctuation\">]</span></code></pre>\n<p>刷新頁面，觀察結果</p>\n<p><img src=\"/img/posts/2019/use-prometheus-to-monitor-end-devices/prom-5.png\" alt=\"\"></p>\n<p>RPi 的 CPU 使用率快樂抖動中。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>上張 Prometheus 的架構圖</p>\n<p><img src=\"/img/posts/2019/use-prometheus-to-monitor-end-devices/prom-6.jpg\" alt=\"\"></p>\n<p>Prometheus 整個生態系有許多組件，在這個 Demo 中，用到的是 Prometheus Server、WebUI、Exporter 等架構圖下半部分，其他不同組件也有各自的用途。使用 Prometheus，我們能夠 Monitor 服務運行的狀況，也可以用它來通知異常（在今年的 COSCUP 中，Line 的 Speaker 就用它來觀察會議室中的活動人數，免得有人借了會議室卻不使用）。</p>\n<p>如果你還在尋找維運工具，不妨試試看。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/91215371\">為什麼說 Prometheus 是足以取代 Zabbix 的監控神器？</a></li>\n<li><a href=\"https://songjiayang.gitbooks.io/prometheus/content/\">Prometheus 实战</a></li>\n<li><a href=\"https://www.inwinstack.com/2018/11/14/prometheus-introduction-1/\">Prometheus 介紹與基礎入門 (上)</a></li>\n<li><a href=\"https://yunlzheng.gitbook.io/prometheus-book/\">Prometheus-book</a></li>\n</ul>\n",
      "date_published": "2019-11-28T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2019/use-ansible-to-update-end-devices/",
      "url": "https://blog.kenwsc.com/posts/2019/use-ansible-to-update-end-devices/",
      "title": "配置即代碼：Ansible 入門",
      "content_html": "<p>之前負責產品研發時，常常需要因應客戶需求，更新終端裝置上的應用程式。因為終端裝置在廠區可能一次就是幾十幾百台，如果用手動更新大概當天就不用做事了。Ansible 這類組態管理(Configuration Management)軟體就是為此而生。相對於同類軟體，Ansible 的系統需求單純，只要 Client 端有安裝 Python 即可，很適合資源受限的嵌入式系統。</p>\n<p>這篇會用 Ansible 來模擬簡單的 Python 應用程式更新，看看它如何處理 Deployment 的問題。</p>\n<h2 id=\"install-ansible-and-setup-environment\"><a class=\"direct-link\" href=\"#install-ansible-and-setup-environment\">#</a> Install Ansible and Setup Environment</h2>\n<p>首先在 Server 端安裝 Ansible，如果你使用的是 Ubuntu 的話，只需要執行</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> ansible</code></pre>\n<p>同時，使用一台 Raspberry Pi Model B 來當成終端裝置，沒有 RPi 也可以用 VirtualBox + Vagrant 搭建虛擬機來使用。</p>\n<p><img src=\"/img/posts/2019/use-ansible-to-update-end-devices/rpi3-1.webp\" alt=\"\"></p>\n<p>因為 Ansible 是使用 SSH 進行遠端操作，記得要打開 RPi 上的 SSH</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> raspi-config</code></pre>\n<p><img src=\"/img/posts/2019/use-ansible-to-update-end-devices/rpi3-2.webp\" alt=\"\"></p>\n<p>選擇 Interfacing Options 後，打開 P2 SSH。</p>\n<p>最後要記得確認 RPi 上有 Python</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">python3 --version</code></pre>\n<h2 id=\"setup-host-information\"><a class=\"direct-link\" href=\"#setup-host-information\">#</a> Setup Host Information</h2>\n<p>我們必須告訴 Ansible 要連接的主機是哪些，相關資訊是什麼，這些 Client 端的裝置，在 Ansible 術語中稱為 Inventory。先假設工作目錄為 playbook，則先在該目錄下新增一個 hosts，來描述終端裝置</p>\n<pre><code>playbook/\n    hosts               *# inventory file for production servers*\n</code></pre>\n<p>該檔案內容為</p>\n<pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">pi ansible_host</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">192.168.5.10 ansible_user=pi</span></code></pre>\n<p>由內容可以知道，該裝置名稱是 pi，IP 是 192.168.5.10，而用來登入的使用者名稱為 pi。</p>\n<p>接著可以執行 Ansible 的測試命令 ping，當裝置收到後，會回應 pong，表示兩者間通訊正常</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># -i is inventory</span><br><span class=\"token comment\"># -m is command module</span><br><br>ken@ken-Lenovo-ideapad-330-15ICH:~/git/ansible/raspberry/playbooks$ ansible pi -i hosts -m <span class=\"token function\">ping</span><br>pi <span class=\"token operator\">|</span> SUCCESS <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token string\">\"changed\"</span><span class=\"token builtin class-name\">:</span> false, <br>    <span class=\"token string\">\"ping\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"pong\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"setup-ansible-config-file\"><a class=\"direct-link\" href=\"#setup-ansible-config-file\">#</a> Setup Ansible Config File</h2>\n<p>因為每台裝置需要寫 hosts 來對應會很麻煩，如果裝置有共通欄位，例如 RPi 的 remote_user 都是 pi，能不能使用共同文件來設定？Ansible 的 config 檔就是為了滿足這個需求。我們在工作目錄下加入 config</p>\n<pre><code>playbook/\n    hosts               *# inventory file for production servers\n    ansible.cfg         *# ansible config file*\n</code></pre>\n<p>檔案內容如下</p>\n<pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token header\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">defaults</span><span class=\"token punctuation\">]</span></span><br><span class=\"token key attr-name\">inventory</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">hosts</span><br><span class=\"token key attr-name\">remote_user</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">pi</span><br><span class=\"token key attr-name\">host_key_checking</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">False</span></code></pre>\n<p>將預設的 inventory 指向 hosts，預設的 user 設為 pi，如此一來，inventory file 中就無需描述多餘資訊，hosts 可以改成</p>\n<pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">pi ansible_host</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">192.168.5.10</span></code></pre>\n<p>因為 config 檔中已經指定 inventory 為 hosts，之後執行 Ansible 時就不用指定 -i 了。這次使用另外一個 Ansible 的命令來看 uptime 的時間</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@ken-Lenovo-ideapad-330-15ICH:~/git/ansible/raspberry/playbooks$ ansible pi -m <span class=\"token builtin class-name\">command</span> -a <span class=\"token function\">uptime</span><br>pi <span class=\"token operator\">|</span> SUCCESS <span class=\"token operator\">|</span> <span class=\"token assign-left variable\">rc</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token operator\">>></span><br>    <span class=\"token number\">16</span>:28:46 up  <span class=\"token number\">2</span>:48,  <span class=\"token number\">4</span> users,  load average: <span class=\"token number\">0.08</span>, <span class=\"token number\">0.05</span>, <span class=\"token number\">0.01</span></code></pre>\n<p>如上，可以看到 RPi 從啟動到下指令，中間經過 2:48。</p>\n<h2 id=\"write-a-playbook\"><a class=\"direct-link\" href=\"#write-a-playbook\">#</a> Write a Playbook</h2>\n<p>在前面的步驟中，我們透過 Ansible 對遠端裝置進行單次指令，但如果組態設定或部署需要一次進行多次指令的話，我們可以怎麼做？Ansible 有個工具稱為 playbook，類似劇本，只要 user 依照 yaml 格式編寫好，Ansible 就會根據 playbook 來執行指令。</p>\n<p>為了使用 playbook，在工作目錄中加入 playbook 的檔案</p>\n<pre><code>playbook/\n    hosts               *# inventory file for production servers\n    ansible.cfg         *# ansible config file\n    pi-update.yml       *# ansible playbook*\n</code></pre>\n<p>內容如下</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Update python script<br>  <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span> end<span class=\"token punctuation\">-</span>devices<br>  <span class=\"token key atrule\">become</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">True</span><br>  <span class=\"token key atrule\">tasks</span><span class=\"token punctuation\">:</span><br>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> copy python file<br>    <span class=\"token key atrule\">copy</span><span class=\"token punctuation\">:</span> src=files/hello.py dest=/home/pi/ansible/hello.py mode=0644<br>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> run python file<br>    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> python3 /home/pi/ansible/hello.py</code></pre>\n<p>在這個 playbook 中，執行對象是 end-devices 這個 inventory 群組。這個 playbook 存在兩個 task，第一個用來將 <a href=\"http://hello.py\">hello.py</a> 這支 python 的 copy 到終端裝置；第二個用來執行終端裝置上的 python 程式。</p>\n<p>可以看到，inventory 由原先的 hosts 改為 end-devices，這是因為 inventory 可能是由多台機器組成的群組，因此我們改寫原先的 inventory file，將它變成</p>\n<pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token header\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">end-devices</span><span class=\"token punctuation\">]</span></span><br><span class=\"token key attr-name\">pi ansible_host</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">192.168.5.10</span></code></pre>\n<p>在開頭加入群組名稱。</p>\n<p>接著，在工作目錄創建要複製過去的檔案</p>\n<pre><code>playbook/\n    hosts               *# inventory file for production servers\n    ansible.cfg         *# ansible config file\n    pi-update.yml       *# ansible playbook\n    files/              *# files\n      hello.py\n</code></pre>\n<p><code>hello.py</code> 是個 python 的程式碼，用來印出 “Hello, world”</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>相關準備完成了，來看看執行的結果。執行 playbook 需要使用 ansible-playbook 這個命令</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@ken-Lenovo-ideapad-330-15ICH:~/git/ansible/raspberry/playbooks$ ansible-playbook pi-update.yml<br><br>PLAY <span class=\"token punctuation\">[</span>Update python script<span class=\"token punctuation\">]</span> ********************************************************************<br><br>TASK <span class=\"token punctuation\">[</span>Gathering Facts<span class=\"token punctuation\">]</span> ********************************************************************<br>ok: <span class=\"token punctuation\">[</span>pi<span class=\"token punctuation\">]</span><br><br>TASK <span class=\"token punctuation\">[</span>copy python file<span class=\"token punctuation\">]</span> ********************************************************************<br>changed: <span class=\"token punctuation\">[</span>pi<span class=\"token punctuation\">]</span><br><br>TASK <span class=\"token punctuation\">[</span>run python file<span class=\"token punctuation\">]</span> ********************************************************************<br>changed: <span class=\"token punctuation\">[</span>pi<span class=\"token punctuation\">]</span><br><br>PLAY RECAP ********************************************************************<br>pi                  <span class=\"token builtin class-name\">:</span> <span class=\"token assign-left variable\">ok</span><span class=\"token operator\">=</span><span class=\"token number\">3</span>    <span class=\"token assign-left variable\">changed</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>    <span class=\"token assign-left variable\">unreachable</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>    <span class=\"token assign-left variable\">failed</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></code></pre>\n<p>Ansible 會先收集裝置上的資訊，然後依照 playbook 來執行 task，changed 表示裝置被實際變動，由結果可看到 Ansible 將 <code>hello.py</code> 複製到 RPi 上，並且執行 python script。</p>\n<h2 id=\"add-debug-information\"><a class=\"direct-link\" href=\"#add-debug-information\">#</a> Add Debug Information</h2>\n<p>但是 <code>hello.py</code> 有印出 “Hello, world”，為什麼在執行結果沒看到呢？這是因為印出的資訊是在 RPi 上，如果要將輸出結果顯示到 Ansible 的結果中，可以修改 playbook 如下</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Update python script<br>  <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span> end<span class=\"token punctuation\">-</span>devices<br>  <span class=\"token key atrule\">become</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">True</span><br>  <span class=\"token key atrule\">tasks</span><span class=\"token punctuation\">:</span><br>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> copy python file<br>    <span class=\"token key atrule\">copy</span><span class=\"token punctuation\">:</span> src=files/hello.py dest=/home/pi/ansible/hello.py mode=0644<br>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> run python file<br>    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> python3 /home/pi/ansible/hello.py<br>    <span class=\"token key atrule\">register</span><span class=\"token punctuation\">:</span> hello<br>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">debug</span><span class=\"token punctuation\">:</span> var=hello</code></pre>\n<p>將 task 的結果用 register 註冊為 variable，再使用 debug 印出，方便除錯。</p>\n<p>好的，再執行一次 ansible-playbook</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@ken-Lenovo-ideapad-330-15ICH:~/git/ansible/raspberry/playbooks$ ansible-playbook pi-update.yml<br><br>PLAY <span class=\"token punctuation\">[</span>Update python script<span class=\"token punctuation\">]</span> ********************************************************************<br><br>TASK <span class=\"token punctuation\">[</span>Gathering Facts<span class=\"token punctuation\">]</span> ********************************************************************<br>ok: <span class=\"token punctuation\">[</span>pi<span class=\"token punctuation\">]</span><br><br>TASK <span class=\"token punctuation\">[</span>copy python file<span class=\"token punctuation\">]</span> ********************************************************************<br>ok: <span class=\"token punctuation\">[</span>pi<span class=\"token punctuation\">]</span><br><br>TASK <span class=\"token punctuation\">[</span>run python file<span class=\"token punctuation\">]</span> ********************************************************************<br>changed: <span class=\"token punctuation\">[</span>pi<span class=\"token punctuation\">]</span><br><br>TASK <span class=\"token punctuation\">[</span>debug<span class=\"token punctuation\">]</span> ********************************************************************<br>ok: <span class=\"token punctuation\">[</span>pi<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token string\">\"hello\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token string\">\"changed\"</span><span class=\"token builtin class-name\">:</span> true, <br>        <span class=\"token string\">\"cmd\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><br>            <span class=\"token string\">\"python3\"</span>, <br>            <span class=\"token string\">\"/home/pi/ansible/hello.py\"</span><br>        <span class=\"token punctuation\">]</span>, <br>        <span class=\"token string\">\"delta\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"0:00:00.779588\"</span>, <br>        <span class=\"token string\">\"end\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2019-11-25 20:06:11.911999\"</span>, <br>        <span class=\"token string\">\"failed\"</span><span class=\"token builtin class-name\">:</span> false, <br>        <span class=\"token string\">\"rc\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>, <br>        <span class=\"token string\">\"start\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2019-11-25 20:06:11.132411\"</span>, <br>        <span class=\"token string\">\"stderr\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>, <br>        <span class=\"token string\">\"stderr_lines\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>, <br>        <span class=\"token string\">\"stdout\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Hello, world\"</span>, <br>        <span class=\"token string\">\"stdout_lines\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><br>            <span class=\"token string\">\"Hello, world\"</span><br>        <span class=\"token punctuation\">]</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br>PLAY RECAP ********************************************************************<br>pi                 <span class=\"token builtin class-name\">:</span> <span class=\"token assign-left variable\">ok</span><span class=\"token operator\">=</span><span class=\"token number\">4</span>    <span class=\"token assign-left variable\">changed</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>    <span class=\"token assign-left variable\">unreachable</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>    <span class=\"token assign-left variable\">failed</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></code></pre>\n<p>這次就可以看到 stdout 結果是 “Hello, world”，同時因為 <code>hello.py</code> 已經複製過了，第一個 task 狀態改為 ok，而非 changed。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>初次上路，好在沒有翻車。Ansible 相對 expect 這類響應式腳本複雜不少，但需要的 cost 真的很低，只需要 python 就可以運行。優點是 framework 架構完整，修改性跟移植性高，當專案成長到一定規模，expect 維護起來很麻煩時，就可以考慮用 Ansible 來補充。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://www.tenlong.com.tw/products/9789864768264\">《Ansible：建置與執行》</a></li>\n<li><a href=\"https://docs.ansible.com/\">Ansible Documentation</a></li>\n<li><a href=\"https://medium.com/laraveldojo/%E8%AE%93%E6%82%A8%E5%AE%89%E5%BF%83%E5%9F%B7%E8%A1%8C-ansible-playbook-%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7-2-856a60b19898?source=---------14------------------\">讓您安心執行 Ansible playbook 的小技巧（2）</a></li>\n</ul>\n",
      "date_published": "2019-11-26T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2019/use-vscode-to-remote-coding/",
      "url": "https://blog.kenwsc.com/posts/2019/use-vscode-to-remote-coding/",
      "title": "遠端開發環境架設：Web 版 VSCode",
      "content_html": "<p>手邊一些開發有使用 Flask，因為 Flask 是架在遠端 Server 上，如果本地開發後還要部署到遠端，等於中間多了一個步驟，切來切去很麻煩，所以在想，有沒有機會直接在遠端進行開發？Google 後發現有個 code-server，能用 VSCode 進行 Remote Coding，所以還等什麼呢，來試試看吧。</p>\n<h2 id=\"use-docker-to-deploy-code-server\"><a class=\"direct-link\" href=\"#use-docker-to-deploy-code-server\">#</a> Use Docker to Deploy code-server</h2>\n<p>依照 code-server 的 Github，我們可以使用 docker 來架設</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># -v bind docker folder to host's folder</span><br><span class=\"token comment\"># codercom/code-server:v2 is docker image</span><br><br>docker run -it -p <span class=\"token number\">127.0</span>.0.1:8080:8080 -v <span class=\"token string\">\"<span class=\"token variable\">${<span class=\"token environment constant\">HOME</span>}</span>/.local/share/code-server:/home/coder/.local/share/code-server\"</span> -v <span class=\"token string\">\"<span class=\"token environment constant\">$PWD</span>:/home/coder/project\"</span> codercom/code-server:v2</code></pre>\n<p>docker 會自動去 Docker Hub 將 image 抓下來設置，完成。</p>\n<p>好像有點簡單，用瀏覽器來看一下成果</p>\n<p><img src=\"/img/posts/2019/use-vscode-to-remote-coding/vscode-1.webp\" alt=\"\"></p>\n<p>看起來跟本機端的 VSCode 幾乎完全一樣啊！</p>\n<h2 id=\"use-binary\"><a class=\"direct-link\" href=\"#use-binary\">#</a> Use Binary</h2>\n<p>因為用 docker 真的太簡單了，沒有挑戰性，為了充篇幅，接著來看如果不使用 docker，要使用 binary 來執行的話，可以怎麼做。</p>\n<p>GitHub 同樣有 QuickStart Guide</p>\n<blockquote>\n<ol>\n<li>Visit the releases page and download the latest binary for your operating system.</li>\n<li>Unpack the downloaded file then run the binary.</li>\n<li>In your browser navigate to localhost:8080.</li>\n</ol>\n</blockquote>\n<p>我的電腦是 Linux，首先依照步驟，先去下載 binary</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> <span class=\"token punctuation\">[</span>https://github.com/cdr/code-server/releases/download/2.1692-vsc1.39.2/code-server2.1692-vsc1.39.2-linux-x86_64.tar.gz<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https://github.com/cdr/code-server/releases/download/2.1692-vsc1.39.2/code-server2.1692-vsc1.39.2-linux-x86_64.tar.gz<span class=\"token punctuation\">)</span></code></pre>\n<p>解壓縮並安裝到 /bin</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> zxvf code-server2.1665-vsc1.39.2-linux-x86_64.tar.gz<br><span class=\"token builtin class-name\">cd</span> code-server2.1665-vsc1.39.2-linux-x86_64/<br><span class=\"token function\">mv</span> code-server ~/bin/<br><span class=\"token builtin class-name\">cd</span><br><span class=\"token builtin class-name\">source</span> .bashrc </code></pre>\n<p>接著執行</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@ken-Lenovo-ideapad-330-15ICH:~$ code-server<br>info  Server listening on <span class=\"token punctuation\">[</span>http://localhost:8080<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>http://localhost:8080<span class=\"token punctuation\">)</span><br>info    - Password is 803570ed676b5d026417da00<br>info      - To use your own password, <span class=\"token builtin class-name\">set</span> the PASSWORD environment variable<br>info      - To disable use <span class=\"token variable\"><span class=\"token variable\">`</span>--auth none<span class=\"token variable\">`</span></span><br>info    - Not serving HTTPS</code></pre>\n<p><img src=\"/img/posts/2019/use-vscode-to-remote-coding/vscode-2.webp\" alt=\"\"></p>\n<p>由瀏覽器可以看到登入頁面，輸入隨機產生的密碼後登入</p>\n<h2 id=\"set-password\"><a class=\"direct-link\" href=\"#set-password\">#</a> Set Password</h2>\n<p>由 Step 2 執行後的結果可以看到，在 code-server 預設上，每次執行會隨機產生一組密碼，要登入就需要輸入。這麼做雖然保障安全性，但是非常麻煩。所幸 code-server 會自行讀取環境變數來設置密碼，因此只需要將使用的密碼設定在環境變數，就能固定用這組密碼登入</p>\n<pre><code>export PASSWORD=&quot;******&quot;\ncode-server\n</code></pre>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>code-server 還有其他選項可以設定，就不一一細講了，有興趣可以自己翻GitHub。Remote coding 的優點在 GitHub 上也講得很清楚：</p>\n<blockquote>\n<ul>\n<li>Consistent environment: Code on your Chromebook, tablet, and laptop with a consistent dev environment. develop more easily for Linux if you have a Windows or Mac, and pick up where you left off when switching workstations.</li>\n<li>Server-powered: Take advantage of large cloud servers to speed up tests, compilations, downloads, and more. Preserve battery life when you're on the go since all intensive computation runs on your server.</li>\n</ul>\n</blockquote>\n<p>你可以在任何地點、任何裝置上，從上次暫停的部分繼續 coding；你可以使用雲端裝置的運算能力，協助你進行編譯、測試，而且省下裝置的電量。這意味著你可以移動－－只要有網路的話，所在的地方就是辦公室，不用限定在一格一格死氣沉沉的辦公間或是某張特定的桌子上。</p>\n<p>這很讓人振奮不是嗎？要說技術如何改變生活，我想這就是個例子。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://github.com/cdr/code-server\">GitHub: code-server</a></li>\n</ul>\n",
      "date_published": "2019-11-17T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2019/coding-by-your-smartphone/",
      "url": "https://blog.kenwsc.com/posts/2019/coding-by-your-smartphone/",
      "title": "全世界都是你的工作室：GCP 的雲端開發環境",
      "content_html": "<p>最近看到 Heron 的 Medium 在討論使用 iPad 來開發程式，深深被 Thin Client 給感動了。如果能從硬體裝置中解放，不用開發程式前還需要花費大把時間精力來架設環境，那我們就能更快驗證，更快學習，更快迭代，把時間花在重要而有價值的事上。</p>\n<p>Thin Client 的概念說來單純，我們可以將所有能連上網路的介面都可以當成終端，在傳統開發環境中，終端跟運算是放在同一台機器上，輸入完成後，使用機器的資源來進行運算，像是編譯程式、執行與提供服務；但自從有了雲端後，可以將這類運算都交由雲端處理，只要有個合用的終端介面能輸入與呈現資訊，就能得到運算結果。</p>\n<h2 id=\"apply-gcp-free-plan\"><a class=\"direct-link\" href=\"#apply-gcp-free-plan\">#</a> Apply GCP free plan</h2>\n<p>既然運算資源放在雲端，首先要申請一個雲端帳戶，這邊以 GCP 的免費方案為例，首先點選 GCP 的免費試用</p>\n<p><img src=\"/img/posts/2019/coding-by-your-smartphone/gcp-1.webp\" alt=\"\"></p>\n<p>GCP 的免費方案提供 $300 刀的額度，還有 12 個月的使用時間，可以使用 GCP 上所有服務，如果是小型或低成本的運算，甚至不用動到 $300 的費用。</p>\n<p>選擇國家/地區後，按[繼續]進入第二頁</p>\n<p><img src=\"/img/posts/2019/coding-by-your-smartphone/gcp-2.webp\" alt=\"\"></p>\n<p>第二頁要填入個人資訊，還需要一張信用卡卡號。依照 Google 的說法，信用卡是為了驗證身分。要注意 GCP 不支援 JCB，請用 Visa/Master Card 來申請。</p>\n<h2 id=\"create-project\"><a class=\"direct-link\" href=\"#create-project\">#</a> Create Project</h2>\n<p>進入 GCP 首頁後，可以先創建一個新的 Project，來放置要測試的東西，點選 Google Cloud Platform 旁的 Project 名稱，再點選跳出視窗右上角的 New Project</p>\n<p><img src=\"/img/posts/2019/coding-by-your-smartphone/gcp-3.webp\" alt=\"\"></p>\n<p>填入 Project name 跟要放置的 Folder，例如 Linux VM，完成 Project 的建置。</p>\n<p><img src=\"/img/posts/2019/coding-by-your-smartphone/gcp-4.webp\" alt=\"\"></p>\n<h2 id=\"create-vm-instance\"><a class=\"direct-link\" href=\"#create-vm-instance\">#</a> Create VM instance</h2>\n<p>有了 Project 後，可以在裡面創建需要的雲端服務，因為主要目的是驗證 Thin Client 是否可行，選擇創建一個 VM 實例來進行登入。要創建 VM 實例可以點選 Menu 中的 Compute Engine &gt; VM Instances，選擇 Create</p>\n<p><img src=\"/img/posts/2019/coding-by-your-smartphone/gcp-5.webp\" alt=\"\"></p>\n<p>Create 的選項有很多，參照 GCP 的免費方案說明，使用 Region 為 us-central1 (Iowa)，Machine Type 為 f1-micro</p>\n<p><img src=\"/img/posts/2019/coding-by-your-smartphone/gcp-6.webp\" alt=\"\"></p>\n<p>Boot Disk 看個人習慣，我平常用的環境是 Ubuntu 18.04 LTS，這邊選同樣的，如果有習慣 Debian 或其他 Distribution 的人，也可以自行選擇</p>\n<p><img src=\"/img/posts/2019/coding-by-your-smartphone/gcp-7.webp\" alt=\"\"></p>\n<p>點選[Create]，完成 VM 創建。</p>\n<h2 id=\"setup-ssh\"><a class=\"direct-link\" href=\"#setup-ssh\">#</a> Setup SSH</h2>\n<p>在終端安裝 SSH 的 Client，例如 Windows 常用的 putty，或者 Termius 這款 App。沒有 SSH Key 的人需要使用程式產生出 SSH Key，再將 Private Key 指定給 SSH Client，同時將 Public Key 放置到雲端。產生 Key 的步驟就不多說了，Windows 下的使用者可以用 PuTTYgen 來產生，Linux 使用者可以用 ssh-keygen。</p>\n<p>有 Public Key 後，要將它放到雲端，方便以後登入。選擇 Compute Engine 中的 Metadata，點選 SSH Keys，可以管理金鑰。點選 Add SSH keys 來加入自己的 Public Key</p>\n<p><img src=\"/img/posts/2019/coding-by-your-smartphone/gcp-8.webp\" alt=\"\"></p>\n<p>加入後回到 VM instances，查看對應的 External IP，使用 SSH Client 輸入 user@address，登入 VM instance，記得 user 是要 key 對應的 user，address 是要 External IP。驗證看看能否登入。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>自從雲端的商業模式建立起來後，許多做法都會跟著改變，這是一個思維上的轉換，以前需要的東西有可能被淘汰掉，而新的需求會被創造出來。如果可以用 GCP 處理掉伺服器，我沒必要再去購買伺服器的硬體來自行架設網站，不但比較便宜，也省掉 Maintain 的 Effort。同時，高效能對 Laptop 也不會再是議題，取而代之的，應該是穩定而快速的網路服務配上輕便的終端顯示器。</p>\n<p>最後放張完成圖，紀念一下。</p>\n<p><img src=\"/img/posts/2019/coding-by-your-smartphone/gcp-9.webp\" alt=\"\"></p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://blog.heron.me/coding-on-ipad-d264c5c6325e\">拿 iPad 取代筆電做程式開發</a></li>\n<li><a href=\"https://cloud.google.com/free/docs/gcp-free-tier?hl=zh-tw\">GCP 免費方案</a></li>\n</ul>\n",
      "date_published": "2019-10-11T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2019/visualize-your-redmine-data/",
      "url": "https://blog.kenwsc.com/posts/2019/visualize-your-redmine-data/",
      "title": "掌握 Redmine 的活動指標：繪製熱度圖",
      "content_html": "<p>我們平常使用 Redmine 來管理專案，當需要進行 Review 或討論如何改善時，常常需要基於 Redmine 的數據。由這些數據分析，也能得知團隊執行狀況是否順利。但是 Redmine 本身並沒有整合 Dashboard 的功能，因此需要透過 RESTful API 來取得專案資料，再使用第三方軟體繪製成圖表。</p>\n<h2 id=\"%E5%AE%89%E8%A3%9D-python-redmine\"><a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D-python-redmine\">#</a> 安裝 python-redmine</h2>\n<p>由於 Python 是我熟悉的腳本語言，選擇用 Python 來進行 Proof of Concept，首先安裝相關的 Python 套件</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">python -m pip <span class=\"token function\">install</span> python-redmine</code></pre>\n<p>如果電腦有支援 pip 指令，可以直接用</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">pip3 <span class=\"token function\">install</span> python-redmine</code></pre>\n<p>來安裝。</p>\n<p>Windows 的 pip 使用可能跟 Ubuntu 不同，至少我還沒找到用法，這邊選擇用 option-m 的模組執行方式，來執行 python 內的 pip module，效果跟 pip 相同，只是命令比較不直覺。</p>\n<h2 id=\"%E7%99%BB%E5%85%A5-redmine\"><a class=\"direct-link\" href=\"#%E7%99%BB%E5%85%A5-redmine\">#</a> 登入 redmine</h2>\n<p>python-redmine 已經將 redmine 的 API 指令封裝成 python 的語法，直接調用即可，我們先使用帳號密碼登入 redmine</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> redminelib <span class=\"token keyword\">import</span> Redmine<br>redmine <span class=\"token operator\">=</span> Redmine<span class=\"token punctuation\">(</span><span class=\"token string\">'http://demo.redmine.org'</span><span class=\"token punctuation\">,</span> username<span class=\"token operator\">=</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>第一個參數填入 redmine 所在的 url，後面帶自己的帳號與密碼，如果無法登入，可以參考官網說明，請管理員將 REST API 打開。</p>\n<h2 id=\"%E5%8F%96%E5%BE%97-issue-%E5%88%97%E8%A1%A8\"><a class=\"direct-link\" href=\"#%E5%8F%96%E5%BE%97-issue-%E5%88%97%E8%A1%A8\">#</a> 取得 issue 列表</h2>\n<p>我的目標是取得 redmine 上的所有 issue。其中包含 assign 給我的 issue 量、我已經處理完成的 issue 量，藉此來觀察專案的成果。</p>\n<p>首先是 assign 給我的數量</p>\n<pre class=\"language-py\"><code class=\"language-py\">issues <span class=\"token operator\">=</span> redmine<span class=\"token punctuation\">.</span>issue<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><br>    project_id<span class=\"token operator\">=</span><span class=\"token string\">'demo'</span><span class=\"token punctuation\">,</span><br>    status_id<span class=\"token operator\">=</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span><br>    assigned_to_id<span class=\"token operator\">=</span>me<br><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total opened count is: \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>issues<span class=\"token punctuation\">.</span>total_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>filter 可以設定要取回的 issues 條件；我要取回的是在 demo 專案下、任意狀態、assign 給我的 issues。</p>\n<p>同樣的，我們也可以取得我已經完成的 issue</p>\n<pre class=\"language-py\"><code class=\"language-py\">issues_closed <span class=\"token operator\">=</span> redmine<span class=\"token punctuation\">.</span>issue<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><br>    project_id<span class=\"token operator\">=</span><span class=\"token string\">'demo'</span><span class=\"token punctuation\">,</span><br>    status_id<span class=\"token operator\">=</span><span class=\"token string\">'closed'</span><span class=\"token punctuation\">,</span><br>    assigned_to_id<span class=\"token operator\">=</span><span class=\"token string\">'me'</span><br><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total closed count is: \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>issues_closed<span class=\"token punctuation\">.</span>total_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"%E7%95%AB%E5%87%BA-heatmap\"><a class=\"direct-link\" href=\"#%E7%95%AB%E5%87%BA-heatmap\">#</a> 畫出 Heatmap</h2>\n<p>接著，我希望可以將平常在 redmine 上的活動畫成 heatmap，畢竟對專案而言，活躍度是非常重要的指標，而活躍度的指標之一就是更新頻率。遍歷所有的 issue，查詢底下的 journal 是否是由我發出，如果是的話，在 heatmap data array 的對應欄位 +1，藉此統計活動狀況。</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> re<br><span class=\"token keyword\">import</span> datetime<br><span class=\"token keyword\">import</span> numpy<br>week_start <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">(</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%V\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>week_end <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">(</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%V\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>week_duration <span class=\"token operator\">=</span> week_end <span class=\"token operator\">-</span> week_start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><br>journal_ken <span class=\"token operator\">=</span> <span class=\"token number\">0</span><br>data_arr <span class=\"token operator\">=</span> numpy<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> week_duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>p <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(\\d{4})-(\\d{2})-(\\d{2})\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">for</span> issue <span class=\"token keyword\">in</span> issues<span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">for</span> resource <span class=\"token keyword\">in</span> issue<span class=\"token punctuation\">.</span>journals<span class=\"token punctuation\">.</span>_resources<span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> resource<span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Ken Chen\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">continue</span><br>        match <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">[</span><span class=\"token string\">'created_on'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2019</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">continue</span><br>        journal_ken <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><br>        week <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">(</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%V\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>        weekday <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">(</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>        data_arr<span class=\"token punctuation\">[</span>weekday<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>week <span class=\"token operator\">-</span> week_start<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total journal of Ken is: \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>journal_ken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>week_start 、 week_end 、 week_duration 用來限制時間範圍，使用正則表達式來判斷 journal 的時間是否落在指定的區段， journal_ken 用來統計總數。</p>\n<p>得到資料陣列後，就能使用 seaborn 畫成圖</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> seaborn <span class=\"token keyword\">as</span> sns<span class=\"token punctuation\">;</span> sns<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt<br>ax <span class=\"token operator\">=</span> sns<span class=\"token punctuation\">.</span>heatmap<span class=\"token punctuation\">(</span><br>    data_arr<br><span class=\"token punctuation\">)</span><br>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p><img src=\"/img/posts/2019/visualize-your-redmine-data/heatmap-1.webp\" alt=\"\"></p>\n<h2 id=\"%E4%BF%AE%E9%A3%BE-heatmap\"><a class=\"direct-link\" href=\"#%E4%BF%AE%E9%A3%BE-heatmap\">#</a> 修飾 Heatmap</h2>\n<p>預設圖片跟想要呈現的效果有段落差，如果直接拿出去，大概會立刻被打槍，這邊需要進行一些美化，使用 seaborn 的參數來調整</p>\n<pre class=\"language-py\"><code class=\"language-py\">data_masks <span class=\"token operator\">=</span> numpy<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> week_duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>week_duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">if</span> data_arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> data_masks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><br>ax <span class=\"token operator\">=</span> sns<span class=\"token punctuation\">.</span>heatmap<span class=\"token punctuation\">(</span><br>    data_arr<span class=\"token punctuation\">,</span> <br>    cmap <span class=\"token operator\">=</span> <span class=\"token string\">'Blues'</span><span class=\"token punctuation\">,</span> <br>    mask<span class=\"token operator\">=</span>data_masks<span class=\"token punctuation\">,</span> <br>    yticklabels <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Sun\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Mon\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Tue\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Wed\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Thu\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Fri\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Sat\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <br>    linewidths <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <br>    square <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span><br>    cbar <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><br><span class=\"token punctuation\">)</span><br>ax<span class=\"token punctuation\">.</span>set_ylim<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><br>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>修改顏色；加入遮罩遮掉值是 0 的區段；加入 y 軸標示；加粗格線；讓顯示的區塊為方形；拿掉色彩條。 ax.set_ylim 則是因為 matplotlib 本身的 Bug 會導致圖片只畫一半</p>\n<p><img src=\"/img/posts/2019/visualize-your-redmine-data/bug-1.webp\" alt=\"\"></p>\n<p>如果不想用開發中的版本，要不就等 3.1.2 版，要不就退回 3.1.0 版，要不就使用 ax.set_ylim 。我不太想動版本，只好乖乖使用指令來調整。</p>\n<p>當一切就緒後，我們就可以得到</p>\n<p><img src=\"/img/posts/2019/visualize-your-redmine-data/heatmap-2.webp\" alt=\"\"></p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>稍微用 python 開個小小的 side project，就能體會到用 python 來驗證概念的威力。由於有完整的生態系，python 適合快速開發，快速驗證，很快就能知道自己的想法是否行得通，不用花費一堆時間蓋完基礎建設後，才發現由於需要的 API 沒開出來，導致專案 Fail。</p>\n<p>資料視覺化真的是很有意思的題目，如果有機會的話，很想將整個團隊的資料即時視覺處理，跑專案時只要進到戰情室就能一目了然。</p>\n<p>最後，我對 python 不支援 var++ 的用法有點意見，對 C 語言的工程師來講不太友善。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"http://www.redmine.org/\">Redmine</a></li>\n<li><a href=\"https://python-redmine.com/\">Python-Redmine</a></li>\n<li><a href=\"https://seaborn.pydata.org/generated/seaborn.heatmap.html\">seaborn.heatmap</a></li>\n</ul>\n",
      "date_published": "2019-08-31T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2019/using-physical-disc-with-virtualbox/",
      "url": "https://blog.kenwsc.com/posts/2019/using-physical-disc-with-virtualbox/",
      "title": "用 VirtualBox 開啟實體硬碟中的 Windows",
      "content_html": "<p>如果用 Linux 當開發環境，常常會碰到一個問題：因為一般企業使用的管理系統沒有 Linux 版本，導致有些操作必須使用 Windows 來完成。對於大部分的應用來說，在 VirtualBox 內安裝 Windows 可能就能解決，問題是，通常 VirtualBox 的 Windows 都是由工程師自行安裝，不是正式授權；再來，在 VirtualBox 內安裝 Windows，意味加上原來預設的 Windows，硬碟內要有兩套 Windows，這真的讓人很難接受，一套已經很佔空間了，居然還要兩套？</p>\n<p>於是我有個想法，要是 VirtualBox 可以用實體空間來開機的話，就能直接在 VirtualBox 執行原本配置的系統，如此一來，可以用 IT 已經安裝好的授權軟體不說，也省掉了後續資料交換的麻煩。Google 後發現還真的有這種應用，當然馬上試試看。</p>\n<h2 id=\"%E5%88%97%E5%87%BA%E5%88%86%E5%8D%80\"><a class=\"direct-link\" href=\"#%E5%88%97%E5%87%BA%E5%88%86%E5%8D%80\">#</a> 列出分區</h2>\n<p>首先因為是使用硬碟的資料，我們需要確認 Windows 安裝在哪個 Partition，使用 fdisk -l 列出所有 Partition 的狀態</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken:~$ <span class=\"token function\">sudo</span> <span class=\"token function\">fdisk</span> -l /dev/nvme0n1<br>Disk /dev/nvme0n1: <span class=\"token number\">119.2</span> GiB, <span class=\"token number\">128035676160</span> bytes, <span class=\"token number\">250069680</span> sectors<br>Units: sectors of <span class=\"token number\">1</span> * <span class=\"token number\">512</span> <span class=\"token operator\">=</span> <span class=\"token number\">512</span> bytes<br>Sector size <span class=\"token punctuation\">(</span>logical/physical<span class=\"token punctuation\">)</span>: <span class=\"token number\">512</span> bytes / <span class=\"token number\">512</span> bytes<br>I/O size <span class=\"token punctuation\">(</span>minimum/optimal<span class=\"token punctuation\">)</span>: <span class=\"token number\">512</span> bytes / <span class=\"token number\">512</span> bytes<br>Disklabel type: gpt<br>Disk identifier: 664C31C9-8F24-4D89-B16A-426FDCDBB716<br>Device             Start       End   Sectors  Size Type<br>/dev/nvme0n1p1      <span class=\"token number\">2048</span>    <span class=\"token number\">534527</span>    <span class=\"token number\">532480</span>  260M EFI System<br>/dev/nvme0n1p2    <span class=\"token number\">534528</span>    <span class=\"token number\">567295</span>     <span class=\"token number\">32768</span>   16M Microsoft reserved<br>/dev/nvme0n1p3    <span class=\"token number\">567296</span> <span class=\"token number\">111706111</span> <span class=\"token number\">111138816</span>   53G Microsoft basic data<br>/dev/nvme0n1p4 <span class=\"token number\">248020992</span> <span class=\"token number\">250068991</span>   <span class=\"token number\">2048000</span> 1000M Windows recovery environment<br>/dev/nvme0n1p5 <span class=\"token number\">111706112</span> <span class=\"token number\">112504831</span>    <span class=\"token number\">798720</span>  390M Linux filesystem<br>/dev/nvme0n1p6 <span class=\"token number\">112504832</span> <span class=\"token number\">144502783</span>  <span class=\"token number\">31997952</span> <span class=\"token number\">15</span>.3G Linux swap<br>/dev/nvme0n1p7 <span class=\"token number\">144502784</span> <span class=\"token number\">248020991</span> <span class=\"token number\">103518208</span> <span class=\"token number\">49</span>.4G Linux filesystem</code></pre>\n<p>可以看到 Windows 的資料位於 dev/nvme0n1</p>\n<h2 id=\"%E5%89%B5%E5%BB%BA-vmdk-%E6%AA%94\"><a class=\"direct-link\" href=\"#%E5%89%B5%E5%BB%BA-vmdk-%E6%AA%94\">#</a> 創建 VMDK 檔</h2>\n<p>接著，為了讓 VirtualBox 可以從實體硬碟開機，我們需要建立 vmdk 檔來表示實體硬碟。使用 VirtualBox 指令</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken:~$ <span class=\"token function\">sudo</span> VBoxManage internalcommands createrawvmdk -filename ~/vmdk/windows_10.vmdk -rawdisk /dev/nvme0n1p1<br>RAW <span class=\"token function\">host</span> disk access VMDK <span class=\"token function\">file</span> /home/ken/vmdk/windows_10.vmdk created successfully.</code></pre>\n<h2 id=\"%E5%89%B5%E5%BB%BA%E8%99%9B%E6%93%AC%E6%A9%9F\"><a class=\"direct-link\" href=\"#%E5%89%B5%E5%BB%BA%E8%99%9B%E6%93%AC%E6%A9%9F\">#</a> 創建虛擬機</h2>\n<p>再來，開啟 VirtualBox，用剛剛建好的 vmdk 檔來開機</p>\n<p><img src=\"/img/posts/2019/using-physical-disc-with-virtualbox/virtualbox-1.webp\" alt=\"\"></p>\n<p>這邊要注意，雖然我們的系統安裝在 SSD，使用的是 NVMe，但 VirtualBox 的 NVMe 似乎有問題，因此這邊選擇用 SATA</p>\n<p><img src=\"/img/posts/2019/using-physical-disc-with-virtualbox/virtualbox-2.webp\" alt=\"\"></p>\n<p>前面看到 nvme0n1 開頭是 EFI，因此記得要 Enable EFI</p>\n<p><img src=\"/img/posts/2019/using-physical-disc-with-virtualbox/virtualbox-3.webp\" alt=\"\"></p>\n<h2 id=\"%E5%95%9F%E5%8B%95%E8%99%9B%E6%93%AC%E6%A9%9F\"><a class=\"direct-link\" href=\"#%E5%95%9F%E5%8B%95%E8%99%9B%E6%93%AC%E6%A9%9F\">#</a> 啟動虛擬機</h2>\n<p>設定都完成後，只要開啟 Virtual Machine，應該能看到 GRUB 的畫面，選擇 Windows Boot Manager，進入 Windows，完工。</p>\n<p><img src=\"/img/posts/2019/using-physical-disc-with-virtualbox/virtualbox-4.webp\" alt=\"\"></p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>使用 VirtualBox 開啟 Windows 後，就能省掉很多資料交換的麻煩，但畢竟是 Virtual Machine，使用上不比 Native，可能會有些狀況；另外，我電腦的 Windows 跟 Ubuntu 開機都安裝在 SSD，要用 EFI 從 dev/nvme0n1 開機，但如果可以的話，最好將兩個系統切開，免得不小心開到 Ubuntu，造成資料損壞。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://www.jamieweb.net/blog/booting-a-physical-windows-10-disk-using-virtualbox-on-linux/\">Booting a Physical Windows 10 Disk Using VirtualBox on Linux</a></li>\n<li><a href=\"https://www.serverwatch.com/server-tutorials/using-a-physical-hard-drive-with-a-virtualbox-vm.html\">Using a Physical Hard Drive with a VirtualBox VM</a></li>\n</ul>\n",
      "date_published": "2019-06-10T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/2019/setup-openwrt-on-virtualbox/",
      "url": "https://blog.kenwsc.com/posts/2019/setup-openwrt-on-virtualbox/",
      "title": "在 VirtualBox 上建置 Openwrt",
      "content_html": "<p>現在工作會用到 Openwrt 當開發平台，但用起來一直卡卡的，想找時間從頭操作一次，看能不能深入理解系統的運作，說起來工作的重點就是不斷追求 balance，既能符合商業需求，又能持續成長。趁著年假有空，來玩玩看 Openwrt 有什麼特色。</p>\n<p>首先是下載 Openwrt 並編譯，現在的 Openwrt 已經用 git 做版控，可以用 git clone 來放到自己的開發目錄</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://git.openwrt.org/openwrt/openwrt.git<br><span class=\"token builtin class-name\">cd</span> openwrt</code></pre>\n<p><img src=\"/img/posts/2019/setup-openwrt-on-virtualbox/console-1.webp\" alt=\"\"></p>\n<p>剛下載下來的 Source code 沒有包含相關的 package，例如 python、driver 等等，因為後續開發會需要用到，先使用 feeds來更新並安裝 package</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">./scripts/feeds update<br>./scripts/feeds <span class=\"token function\">install</span> -a</code></pre>\n<p>feeds是 Openwrt 內建的 script，如果想知道 command 的意思，可以用 help 。剛接觸 Linux 的人可能會不習慣看 help 來理解 command，可是用習慣之後，有問題能自己解，不用爬 Stack Overflow，對 Coding 幫助其實很大</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">./scripts/feeds -h<br><span class=\"token function\">install</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>package<span class=\"token operator\">></span>: Install a package<br><span class=\"token punctuation\">..</span>.<br>update -a<span class=\"token operator\">|</span><span class=\"token operator\">&lt;</span>feedname<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">></span>: Update packages and lists of feeds <span class=\"token keyword\">in</span> feeds.conf <span class=\"token builtin class-name\">.</span></code></pre>\n<p>由 help 內容可以知道，update 是更新追蹤的 package list； install 則是安裝 package，如果沒有安裝， menuconfing 時就會看不到相關的 package ，因此這邊全部裝起來</p>\n<p>接著進行環境準備，輸入 make defconfig 來檢查相關的 tool 有沒有 Ready，並產生設定文件 .config</p>\n<p>再來使用 make menuconfig 來選擇要編譯的 package，找不到 package 的話可以用 / 加關鍵字搜尋，搜尋有支援 regular exp 喔！這邊先選擇 python3 、LuCI 、GDB ， Target 用 x86 ，印象檔格式用 ext4</p>\n<p><img src=\"/img/posts/2019/setup-openwrt-on-virtualbox/console-2.webp\" alt=\"\"></p>\n<p>之後用 make -j8 全速編譯</p>\n<p><img src=\"/img/posts/2019/setup-openwrt-on-virtualbox/console-3.webp\" alt=\"\"></p>\n<p>編譯完得到映像壓縮檔，解壓縮</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">gunzip openwrt-x86-generic-combined-ext4.img.gz </code></pre>\n<p>得到映像檔，為了讓 VirtualBox 可以掛載，要用 vboxmanage轉換為 vdi 格式</p>\n<p>vboxmanage convertfromraw --format VDI openwrt-x86-generic-combined-ext4.img openwrt_x86.vdi<br>\n再來開啟 VirtualBox，建立 Virtual Machine</p>\n<p><img src=\"/img/posts/2019/setup-openwrt-on-virtualbox/vm-1.webp\" alt=\"\"></p>\n<p>選擇 Type 為 Linux ，版本為 Linux 2.6 / 3.x / 4.x (32-bit) ，一路 Next 完成掛載</p>\n<p>開啟 VirtualBox，可以看到</p>\n<p><img src=\"/img/posts/2019/setup-openwrt-on-virtualbox/vm-2.webp\" alt=\"\"></p>\n<p>完成！已經在 VirtualBox 上掛載剛剛編譯好的 Openwrt 了！</p>\n",
      "date_published": "2019-02-03T00:00:00-00:00"
    }
  ]
}
