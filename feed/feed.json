{
  "version": "https://jsonfeed.org/version/1",
  "title": "Ken Chen&#39;s Blog",
  "home_page_url": "https://blog.kenwsc.com",
  "feed_url": "https://blog.kenwsc.com/feed/feed.json",
  "description": "Ken Chen&#39;s Blog",
  "author": {
    "name": "Ken Chen",
    "url": ""
  },
  "items": [{
      "id": "https://blog.kenwsc.com/posts/three-semantics-of-rabbitmq/",
      "url": "https://blog.kenwsc.com/posts/three-semantics-of-rabbitmq/",
      "title": "關於消息的三層語義：以 RabbitMQ 為例",
      "content_html": "<p>對分散式系統來說，消息的可靠性非常重要，想想一個金融應用的場景，如果在支付時，消息遺失了，或是重複遞送了，都會造成使用者的困擾。當我們在系統中引入消息隊列時，我們同時引入了複雜度，這意思是，系統的「處理消息」跟你想的不一定是同一件事。從可靠性的角度來看，「處理消息」的語義可以分為三個層次，第一層是「最多一次」，當你請系統處理消息時，它會幫你進行，但最多一次，並且不保證是否完成；第二層是「最少一次」，系統會幫你處理消息，而且附帶必要的錯誤處理，確保消息至少被完成一次；第三層是「準確一次」，意指消息不多不少，恰恰好被準確處理並完成了一次。</p>\n<p>當試著從語言學的角度來看待系統時，我們才能規劃出系統的整體面貌。儘管「準確處理一次」有最佳的可靠性，但因為其處理成本，降低了系統整體的吞吐量。在〈Starbucks Does Not Use Two-Phase Commit〉一文中，Gregor Hohpe 精確描繪了星巴克的異步系統。收銀員收費後，將咖啡杯放到隊列中，等待咖啡師處理，再交給取貨區的顧客。這個過程中，收銀員跟咖啡師不會特別確認咖啡杯的狀態，假設咖啡杯被放錯位置，直到顧客反應前都沒有人會知道，這是「最多一次」的語義；但如果咖啡杯掉落到地上，他們可能會重新做一杯新的咖啡，這裡就是「最少一次」的語義。因此我們可以說，星巴克是在「最多一次」的基礎上，有部分操作實現「最少一次」的語義。</p>\n<h2 id=\"amqp-%26-rabbitmq\"><a class=\"direct-link\" href=\"#amqp-%26-rabbitmq\">#</a> AMQP &amp; RabbitMQ</h2>\n<p>軟體的隊列設計也需要面臨類似問題，讓我們來看看 AMQP 的例子。AMQP 是由 JP Morgan Chase 提出的通訊協定，目的是為了讓消息隊列有個開放式的標準可以依循，如此一來，不同的語言跟架構能夠建置共通的應用程式。在 2007 年，Rabbit 公司開發一套開源軟體來實作 AMQP，稱為 RabbitMQ，現在由 Pivotal 維護。也因為它開源加上支持多語言客戶端，許多消息隊列會採用 RabbitMQ 來執行。</p>\n<p>AMQP 的訊框格式是</p>\n<pre><code>+ — — — + — — — — -+ — — — — -+ + — — — — — — -+ + — — — — — -+\n| type  | channel  | size     | | payload      | | frame-end  |\n+ — — — + — — — — -+ — — — — -+ + — — — — — — -+ + — — — — — -+\n</code></pre>\n<p>訊框的類型(type)分為 4 種。應用上常碰到的有 3 種</p>\n<ul>\n<li>METHOD(1)：該訊框用於傳送 AMQP 的指令</li>\n<li>HEADER(2)：該訊框用於傳送 AMQP 的標頭</li>\n<li>BODY(3)：該訊框用於傳送 AMQP 的內容</li>\n</ul>\n<p>其中 METHOD 會依照命令的不同，而有不同的參數(Argument)，實現越進階的語義就需要仰賴越複雜的設定。</p>\n<h2 id=\"at-most-once\"><a class=\"direct-link\" href=\"#at-most-once\">#</a> At most once</h2>\n<p>先從最基本的「最多一次」來看。最多一次可以指生產端，也可以指消費端。對生產端來說，只要發佈一次消息就算完成語義，後續也不會再重發。這裡我們使用開源庫  <a href=\"https://github.com/wagslane/go-rabbitmq\">go-rabbitmq</a>，來當 Golang 的 RabbitMQ 的客戶端，程式碼會是</p>\n<pre class=\"language-go\"><code class=\"language-go\">producer<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span><br>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>“hello”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    routingKeys<span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span><span class=\"token function\">WithPublishOptionsExchange</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">)</span></code></pre>\n<p>指定好內文、路由規則、還有交換器，進行發送。</p>\n<p>因為已經保證了傳遞「最多一次」，消費端只要在這基礎上進行消費，就能達成語義</p>\n<pre class=\"language-go\"><code class=\"language-go\">consumer<span class=\"token punctuation\">.</span><span class=\"token function\">StartConsuming</span><span class=\"token punctuation\">(</span><br>    consumeMessage<span class=\"token punctuation\">,</span><br>    queueName<span class=\"token punctuation\">,</span><br>    routingKeys<span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">consumeMessage</span><span class=\"token punctuation\">(</span>d rabbitmq<span class=\"token punctuation\">.</span>Delivery<span class=\"token punctuation\">)</span> rabbitmq<span class=\"token punctuation\">.</span>Action <span class=\"token punctuation\">{</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> rabbitmq<span class=\"token punctuation\">.</span>Ack<br><span class=\"token punctuation\">}</span></code></pre>\n<p>指定消費函數、隊列名稱、路由規則來消費。</p>\n<p>用 WireShark 抓封包的話，會看到 Basic.Publish 發佈了一次的消息</p>\n<p><img src=\"/img/posts/three-semantics-of-rabbitmq/wireshark-rabbitmq-1.webp\" alt=\"\"></p>\n<p>消費端也用 Basic.Consume 進行了消費</p>\n<p><img src=\"/img/posts/three-semantics-of-rabbitmq/wireshark-rabbitmq-2.webp\" alt=\"\"></p>\n<h2 id=\"at-least-once\"><a class=\"direct-link\" href=\"#at-least-once\">#</a> At least once</h2>\n<p>「最多一次」對於分散式系統的應用來說是遠遠不夠的，假設客戶購買商品，產生一則消息，這個消息卻在傳遞的過程中因為一些網路問題而讓消息丟失，像是某人突然拔掉網路線，或是供電的電廠跳電，如果使用「最多一次」的語義，直到客戶反應前，我們都不會知道這個問題，同時，因為消息傳遞到一半丟失，有可能會造成系統狀態不一致，有部分系統已經執行過消息，有部分系統則是沒有。</p>\n<p>如果問題是由消息丟失引起的，最直覺的想法就是重試。想想，客戶向星巴克的店員抱怨，他點的咖啡還沒好，店員查詢後發現漏單，因此重做一份，這稱為重試(Retry)。</p>\n<p>同樣先從生產端來看。要重試，就需要先知道原本的消息是有否正確傳遞。這裡可以用 AMQP 的 Confirm 機制 來實現，時序圖上是</p>\n<p><img src=\"/img/posts/three-semantics-of-rabbitmq/pub-and-sub.webp\" alt=\"\"></p>\n<p>在建立 channel 時，聲明這個 channel 需要 confirm。Broker 收到後會回 Confirm.Select-Ok，表示同意生產者將 channel 設為 confirm。之後，每次生產者發佈消息後，都會收到 Ack，如果因為 RabbitMQ 自身的問題導致消息丟失，則會回傳 Nack 給生產者。</p>\n<p>程式碼會是</p>\n<pre class=\"language-go\"><code class=\"language-go\">comfirmCh <span class=\"token operator\">:=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">NotifyPublish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>producer<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span><br>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>“hello”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    routingKeys<span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span><span class=\"token function\">WithPublishOptionsExchange</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span>WithPublishOptionsMandatory<span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span>WithPublishOptionsPersistentDelivery<span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">)</span><br>comfirmation <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>comfirmCh<br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span>“receive<span class=\"token punctuation\">:</span> <span class=\"token operator\">%</span><span class=\"token operator\">+</span>v\\n”<span class=\"token punctuation\">,</span> comfirmation<span class=\"token punctuation\">)</span></code></pre>\n<p>遺憾的是，僅僅這樣還不算達到「至少一次」的語義。讓我們更進一步思考情境。假設 Broker 能收到消息，可是卻因為設定的因素，導致消息無法被放入隊列，例如使用了一組不存在的路由規則。那 AMQP 應該如何通知這類「運行正常但邏輯有誤」的情況呢？這時需要用到 mandatory 這個 Publish 的參數。</p>\n<p>當 Publish 附帶 mandatory 時，生產端會告訴 Broker，這則消息需要被放進 Queue 中，如果沒辦法放入的話，需要將此消息退回給我。在程式碼上，需要改成</p>\n<pre class=\"language-go\"><code class=\"language-go\">comfirmCh <span class=\"token operator\">:=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">NotifyPublish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>returnCh <span class=\"token operator\">:=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">NotifyReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>err <span class=\"token operator\">=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span><br>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"non-existence\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span><span class=\"token function\">WithPublishOptionsExchange</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span>WithPublishOptionsMandatory<span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">)</span><br>comfirmation <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;-</span>comfirmCh<br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"receive: %+v\\n\"</span><span class=\"token punctuation\">,</span> comfirmation<span class=\"token punctuation\">)</span><br>returnVal <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>returnCh<br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"receive: %+v\\n\"</span><span class=\"token punctuation\">,</span> returnVal<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>到此，我們可以確保消息會被放進隊列，但我們仍然沒辦法確保這則消息被放進隊列後，Broker 會突然關閉，導致消息丟失。要防範這情況，就需要持久化隊列中的消息。RabbitMQ 的持久化分爲三個部分：交換器的持久化、隊列的持久化和消息的持久化。這裡會需要操作的是後兩者。如果只設置隊列持久化，重啓 RabbitMQ 後，消息會丟失；只設置消息的持久化，重啓之後隊列消失，繼而消息也丟失。因此隊列跟消息的持久化都需要設定。</p>\n<p>要設定隊列的持久化，用</p>\n<pre class=\"language-go\"><code class=\"language-go\">conn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> amqp<span class=\"token punctuation\">.</span><span class=\"token function\">Dial</span><span class=\"token punctuation\">(</span>cfg<span class=\"token punctuation\">.</span>Url<span class=\"token punctuation\">)</span><br>ch<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">Channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token comment\">// the second arg is durable</span><br><span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">.</span><span class=\"token function\">QueueDeclare</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span></code></pre>\n<p>同時，在發布的消息中設定消息持久化</p>\n<pre class=\"language-go\"><code class=\"language-go\">err <span class=\"token operator\">=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span><br>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    routingKeys<span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span><span class=\"token function\">WithPublishOptionsExchange</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span>WithPublishOptionsMandatory<span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span>WithPublishOptionsPersistentDelivery<span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">)</span></code></pre>\n<p>來看 WireShark 抓到的封包</p>\n<p><img src=\"/img/posts/three-semantics-of-rabbitmq/wireshark-rabbitmq-3.webp\" alt=\"\"></p>\n<p>可以看到 Header 的 Delivery-Mode 被設為 2，指的就是有持久化消息。</p>\n<p>在傳遞「最少一次」的基礎上，消費端要保證消息也至少被消費一次。這個相對單純，只需要消費完成後，用 Ack 回應 Broker 消費已完成。如果 Broker 沒收到 Ack 且連結斷開，那再下次建立連結時，Broker 會重新發送消息。</p>\n<h2 id=\"exactly-once\"><a class=\"direct-link\" href=\"#exactly-once\">#</a> Exactly once</h2>\n<p>「最少一次」的問題很明顯，要是消息不斷被重複發送，有可能導致同樣的消息被重複處理，以電商的情境為例，有可能出現重複扣款的狀況。對於重複不敏感的場景，例如物聯網資訊蒐集，「最少一次」已經足以應付，但對金融場景來講，重複扣款是個嚴重的問題。</p>\n<p>為了達到「準確一次」的語義，會需要在「最少一次」的基礎上，加上去重複的機制。最直覺的想法是替所有消息都加上 ID，當收到消息時，會將該 ID 緩存起來，日後如果收到新的消息，先確認緩存中沒有重複的 ID 再進行處理。這個技巧又稱為「冪等鍵」，意思是將操作冪等化，不論重複送多少次，都會得到相同的結果。</p>\n<p>RabbitMQ 沒有實作緩存確認的機制，因此無法保證「準確一次」。這可以分兩個方向來看，假設生產端正在等待 Broker 回覆 Confirm，此時網路斷開，生產端偵測到異常，為了滿足「至少一次」，生產端重複發送消息，RabbitMQ 的 Broker 中就會存在兩條相同的消息。或者，消費端在消費完消息後，因為網路斷開，Broker 沒收到 Ack，則在連線恢復後，Broker 會將同樣的消息再度發送給消費端，造成重複消費。</p>\n<p>如上面講到的，因為 RabbitMQ 沒有辦法保證每個步驟能「準確一次」，我們得退而求其次，希望能做到端到端的「準確一次」。這代表說，我們不在意 RabbitMQ 中間是否存在重複遞送，只要訊息最後能被準確消費一次即可。</p>\n<p>要達成這件事，生產端需要替每則訊息加上 unique ID</p>\n<pre class=\"language-go\"><code class=\"language-go\">err <span class=\"token operator\">=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span><br>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    routingKeys<span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span><span class=\"token function\">WithPublishOptionsMessageID</span><span class=\"token punctuation\">(</span>uniqueID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span><span class=\"token function\">WithPublishOptionsExchange</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span>WithPublishOptionsMandatory<span class=\"token punctuation\">,</span><br>    rabbitmq<span class=\"token punctuation\">.</span>WithPublishOptionsPersistentDelivery<span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">)</span></code></pre>\n<p>消費端收到訊息後，確認緩存內沒有 uniqueID，再進行處理</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">consumeMessage</span><span class=\"token punctuation\">(</span>d rabbitmq<span class=\"token punctuation\">.</span>Delivery<span class=\"token punctuation\">)</span> rabbitmq<span class=\"token punctuation\">.</span>Action <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">IsExist</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>MessageId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"duplicated message\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span> rabbitmq<span class=\"token punctuation\">.</span>Ack<br>    <span class=\"token punctuation\">}</span><br>    cache<span class=\"token punctuation\">.</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>MessageId<span class=\"token punctuation\">)</span><br>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> rabbitmq<span class=\"token punctuation\">.</span>Ack<br><span class=\"token punctuation\">}</span></code></pre>\n<p>用 WireShark 也能看到 MessageID</p>\n<p><img src=\"/img/posts/three-semantics-of-rabbitmq/wireshark-rabbitmq-4.webp\" alt=\"\"></p>\n<p>因為我們是在業務層面保證「準確一次」，實作方式就會跟系統相關，像是引入集中式緩存（Redis）會增加系統複雜度；而緩存的空間與失效期間也需要設計，這就不是單單調整參數就好，而是需要視具體運作的狀況來確定了。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>軟體工程的其中一項挑戰來自於「語義鴻溝」，可以看到光是消息處理就存在著三層不同的語義，而且越高階語義就需要越複雜的設定。如果消息處理跟使用者的期待有落差，很容易產生無形的錯誤。可能對於大多數的使用者來說，都是以「準確一次」為預設，開發者也不會跟使用者講，消息丟失算是正常情況（即使在有條件的情況下，它的確是正常）。</p>\n<p>也許可以這麼想：身為開發者，如何盡早辨識出語義鴻溝，並提出對應的技術方案，就是功力所在了。雖然用層次的概念來描述語義，好像會給人只要實作高層次就好的印象，但高層次的保證需要更多操作，像是更多的 Confirm、跟緩存間更多的溝通，都會影響到其他效能指標。以「準確一次」來說，還得確保緩存不會在執行中出問題，如果有問題的話，錯誤處理也要額外設計。</p>\n<p>商業模型跟技術模型間如何對應一直是很有意思的題目，希望大家看完這篇後能體會到消息處理有趣的地方。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://www.rabbitmq.com/amqp-0-9-1-reference.html\">AMQP 0-9-1 Complete Reference Guide</a></li>\n</ul>\n",
      "date_published": "2022-10-22T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/error-as-resource-grpc-error-handling/",
      "url": "https://blog.kenwsc.com/posts/error-as-resource-grpc-error-handling/",
      "title": "讓錯誤成為資源：gRPC 的錯誤處理模型",
      "content_html": "<p>錯誤處理是所有 RPC 服務都要具備的設計，但是怎樣的錯誤處理模型，算是好的模型呢？從字面上來看，錯誤處理可以分解成「錯誤」跟「處理」，如果用 RESTful 的觀點，將錯誤當成是 Resource，一個好的模型應該要能匹配不同場景的 Resource，並根據場景需求來處理這些 Resource。</p>\n<h2 id=\"%E9%8C%AF%E8%AA%A4%E6%A8%A1%E5%9E%8B\"><a class=\"direct-link\" href=\"#%E9%8C%AF%E8%AA%A4%E6%A8%A1%E5%9E%8B\">#</a> 錯誤模型</h2>\n<p>在 RESTful 中，通常會用 HTTP Status Code 當錯誤訊息的分類(Category)，錯誤內容則放在 Payload。這樣的好處是，只要看到分類，就能先進行大方向的處理，如果需要特定資訊，再從 Payload 拿取。通常錯誤內容的格式會自行定義，以支付服務 Stripe 的 API 為例，定義的格式就有</p>\n<ul>\n<li>type (string)</li>\n<li>code (string)</li>\n<li>decline_code (string)</li>\n<li>message (string)</li>\n</ul>\n<p>message 應該是最常見的欄位，當開發分為前後端時，前端能根據 message 快速定位錯誤原因。code 則是用來補足 HTTP Status Code 的不足，在原本的分類下進行子分類。其他欄位則視應用場景來添加。如果應用場景不複雜的話，可以考慮只用基本的 Payload 格式，像是</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token number\">40001</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"an invalid parameter: user_name\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>RESTful API 透過分類知道要如何處理錯誤，透過 Payload 知道錯誤的內容，狹義來說，RESTful API 是指用 HTTP + JSON/XML 的方式來設計 API，但這只是一種特定的實作方式，不直接等於 RESTful。Roy Fielding 談 RESTful 時，用的名稱是「表述性狀態轉移」，這是個原則性的概念，只要稍加改動，應該要能套用同樣原則到不同的實現中，例如 gRPC。在進一步細談如何套用前，我們先來看看 gRPC 的錯誤處理模型。</p>\n<p>假設我們建立一個 gRPC server，定義一個 service func SayHello，裡面什麼事情都不做，直接回傳錯誤</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    srv <span class=\"token operator\">:=</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span>cfg<span class=\"token punctuation\">)</span><br>    proto<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterHelloServiceServer</span><span class=\"token punctuation\">(</span>srv<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>server<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    srv<span class=\"token punctuation\">.</span><span class=\"token function\">Serve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">var</span> demoErr <span class=\"token operator\">=</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some error\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">type</span> server <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    proto<span class=\"token punctuation\">.</span>UnimplementedHelloServiceServer<br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>server<span class=\"token punctuation\">)</span> <span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> demoErr<br><span class=\"token punctuation\">}</span></code></pre>\n<p>同時建立一個 client 去呼叫 server</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  conn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">NewClient</span><span class=\"token punctuation\">(</span>cfg<span class=\"token punctuation\">)</span><br>  client <span class=\"token operator\">:=</span> proto<span class=\"token punctuation\">.</span><span class=\"token function\">NewHelloServiceClient</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span><br>  client<span class=\"token punctuation\">.</span><span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>然後拿出你的 WireShark 抓包，直接看看傳了哪些東西，抓到的 Request 會是</p>\n<p><img src=\"/img/posts/error-as-resource-grpc-error-handling/wireshark_grpc_request_1.webp\" alt=\"\"></p>\n<p>翻譯成白話：gRPC 用 POST method 呼叫 /proto.HelloService/SayHello 的 URL。</p>\n<p>也能抓到 Response</p>\n<p><img src=\"/img/posts/error-as-resource-grpc-error-handling/wireshark_grpc_response_1.webp\" alt=\"\"></p>\n<p>在 Header 中可以看到兩個跟 gRPC相關的 header，grpc-status 跟 grpc-message。語意上，這大致可以對應到 HTTP 的 Status Code 跟 Payload。可能有人會覺得奇怪，為什麼 HTTP 已經有一套可以套用的錯誤模型了，gRPC 還需要自己定義 Header？從定義來看，有機會是 HTTP Status Code 的應用情境不符合 gRPC 的情境，像是在 gRPC 中，有些 Status 是 client 獨有，有些是 server 獨有，而 HTTP Status Code 沒分這麼細緻。</p>\n<p>另外，HTTP 的錯誤模型有個缺點，它將正常的資源跟錯誤的資源都用 Payload 來表述狀態。這裡有語意重載，會帶來複雜的處理問題。舉個例子，假設有人請你幫他跑腿，你回答 “No way”，意思是「我才不要」；但如果有人跟你說他中了樂透，你回答 “No way”，意思就變成是「天啊，怎麼可能」，同樣是 “No way”，前後的情境不同，意思就變得不一樣。對照到 Payload，當語意重載的情況出現時，會讓 client 需要依照 Context 來判斷要用什麼模型來處理，如果可以將正常的資源跟錯誤的資源分開，出錯的機率就會變小，可讀性也會提高。gRPC 這個設計相對合理。</p>\n<h2 id=\"%E7%8B%80%E6%85%8B%E7%A2%BC\"><a class=\"direct-link\" href=\"#%E7%8B%80%E6%85%8B%E7%A2%BC\">#</a> 狀態碼</h2>\n<p>剛剛講到 grpc-status 是 gRPC 的狀態碼，在上面的 Response 中，我們看到 grpc-status = 2，2 是什麼意思？依照 gRPC official status code 的定義，2 是 Unknown Error。</p>\n<blockquote>\n<p>Unknown error. For example, this error may be returned when a Status value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error.</p>\n</blockquote>\n<p>為什麼會是 Unknown 呢？因為我們直接把 error 回傳，沒有替這個 error 分類，在 Golang 的實作中，沒分類的 error 會自動被歸類為 Unknown，可想而知這不是個好的實作，收到錯誤訊息的人看到 Unknown，無法進一步處理，只能被動印出 Log。</p>\n<p>為了讓訊息更明確，我們需要替 gRPC error 指定 grpc-status</p>\n<p>修改 server</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>server<span class=\"token punctuation\">)</span> <span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>codes<span class=\"token punctuation\">.</span>InvalidArgument<span class=\"token punctuation\">,</span> <span class=\"token string\">\"some error\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>status package 是官方提供的 Package，顧名思義，就是讓你可以控制 status 的值；而 codes package 則定義了 gRPC 相關的 status code。我們在這裡定義該 status code 是 invalid argument，告知呼叫者參數錯誤；並在後面帶上 error message 讓呼叫者可以知道詳細資訊。</p>\n<p>修改後，WireShark 的 Response 變成</p>\n<p><img src=\"/img/posts/error-as-resource-grpc-error-handling/wireshark_grpc_response_2.webp\" alt=\"\"></p>\n<p>原本 grpc-status 變成 3了，對應到 Status 就是 INVALID_ARGUMENT。呼叫者可以知道原來是自己的參數錯誤才導致呼叫異常。</p>\n<p>順便來看一下，目前 gRPC 定義的 status code 有這些</p>\n<ul>\n<li>OK(0)：成功狀態</li>\n<li>CANCELLED(1)：操作已被（調用者）取消</li>\n<li>UNKNOWN(2)：未知錯誤</li>\n<li>INVALID_ARGUMENT(3)：客戶端指定非法參數</li>\n<li>DEADLINE_EXCEEDED(4)：在操作完成前，已經過了截止時間</li>\n<li>NOT_FOUND(5)：請求的資源找不到</li>\n<li>ALREADY_DENIED(6)：客戶端試圖創建的實體已經存在</li>\n<li>PERMISSION_DENIED(7)：調用者沒有權限執行操作</li>\n<li>RESOURCE_EXHASTED(8)：某些資源已經被耗盡</li>\n<li>FAILED_PRECONDITION(9)：系統沒有處於操作需要的狀態</li>\n<li>ABORTED(10)：操作被中止</li>\n<li>OUT_OF_RANGE(11)：嘗試進行的操作超出合理範圍</li>\n<li>UNIMPLEMENTED(12)：該操作尚未實現</li>\n<li>INTERNAL(13)：內部錯誤</li>\n<li>UNAVAILABLE(14)：該服務目前不可用</li>\n<li>DATA_LOSS(15)：不可恢復的數據損壞</li>\n<li>UNAUTHENTICATED(16)：客戶端沒有操作需要的認證</li>\n</ul>\n<p>到這裡我們發現一件事，如果想要描述的錯誤內容單純用狀態碼無法表達怎麼辦？例如，我們不僅想知道錯誤類型是參數錯誤，還想知道錯誤的參數是哪個，應該要如何修正，該怎麼將這個資訊給結構化呢？</p>\n<h2 id=\"%E8%A9%B3%E7%B4%B0%E9%8C%AF%E8%AA%A4%E8%B3%87%E8%A8%8A\"><a class=\"direct-link\" href=\"#%E8%A9%B3%E7%B4%B0%E9%8C%AF%E8%AA%A4%E8%B3%87%E8%A8%8A\">#</a> 詳細錯誤資訊</h2>\n<p>gRPC 除了有 grpc-message 顯示人眼可讀的 error message 外，還有一個 header grpc-status-details-bin，用來補足 status 表現能力不夠的問題。為了統一模型，這個資訊格式也是採用 protobuf，我們可以把它想像成 error 專用欄位，內容經過 protobuf message 編碼後，會放在這個標頭中。</p>\n<p>既然知道概念，那就好處理了，把 server 端改成</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>server<span class=\"token punctuation\">)</span> <span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    st <span class=\"token operator\">:=</span> status<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>codes<span class=\"token punctuation\">.</span>InvalidArgument<span class=\"token punctuation\">,</span> <span class=\"token string\">\"some error\"</span><span class=\"token punctuation\">)</span><br>    st<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">WithDetails</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>errdetails<span class=\"token punctuation\">.</span>BadRequest_FieldViolation<span class=\"token punctuation\">{</span><br>        Field<span class=\"token punctuation\">:</span>       <span class=\"token string\">\"lost\"</span><span class=\"token punctuation\">,</span><br>        Description<span class=\"token punctuation\">:</span> <span class=\"token string\">\"lost field that should have\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>一樣是用 status 來處理，但在 status 中加入 details，gRPC 可以接受多個 detail，因此你可以根據需求將詳細的資訊傳進去。在這個例子中，我們進一步補充說 lost 這個 field 的值錯誤，它應該要有值，但接收時沒發現。這的資訊就豐富到能讓呼叫端進行應用層級的處理了。</p>\n<p>雖然只要是 protobuf 就能放進 detail 中，但為了更好的相容性與定義，建議使用 Google 提供的 errdetails package 來處理，避免自己定義模型。</p>\n<p>修改後，用 WireShark 再抓一次</p>\n<p><img src=\"/img/posts/error-as-resource-grpc-error-handling/wireshark_grpc_response_3.webp\" alt=\"\"></p>\n<p>看到 grpc-status-details-bin 冒出來了，後面是 base64 編碼過的內容，如果丟進 decode 的話，可以得到</p>\n<pre><code>invalid argument e\n8type.googleapis.com/google.rpc.BadRequest.FieldViolation)\nlost lost field that should have\n</code></pre>\n<p>可以看到詳細的錯誤資訊都在裡面。</p>\n<p>用 Postman 呼叫 gRPC，也能看到同樣的錯誤訊息。</p>\n<p><img src=\"/img/posts/error-as-resource-grpc-error-handling/postman.webp\" alt=\"\"></p>\n<h2 id=\"%E5%AE%A2%E6%88%B6%E7%AB%AF\"><a class=\"direct-link\" href=\"#%E5%AE%A2%E6%88%B6%E7%AB%AF\">#</a> 客戶端</h2>\n<p>剛剛的例子講的都是 server 端應該怎麼定義並回傳錯誤，client 收到 server 回傳的錯誤後，也要針對錯誤進行處理。</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>emptypb<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>st<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> status<span class=\"token punctuation\">.</span><span class=\"token function\">FromError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">Code</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> codes<span class=\"token punctuation\">.</span>InvalidArgument <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> d <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">Details</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">switch</span> info <span class=\"token operator\">:=</span> d<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">case</span> <span class=\"token operator\">*</span>errdetails<span class=\"token punctuation\">.</span>BadRequest_FieldViolation<span class=\"token punctuation\">:</span><br>            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>我們先用 status package 將 error 轉換成 status 的結構，接著從 status 的結構中讀取 status code，如果是 Invalid Argument，再進一步迭代所有的 detail 項並且印出。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">~/git/ken-playground/grpc<span class=\"token operator\">></span> go run ./example/client-demo                                                                                      <br>field:<span class=\"token string\">\"lost\"</span>  description:<span class=\"token string\">\"lost field that should have\"</span></code></pre>\n<p>這裡有幾點要注意，第一，錯誤處理的結構仍然稍嫌複雜，if 中還嵌套著迭代跟 switch，如果 status code 有多個可能，最外圍的 if 需要再改成 switch 來接收，整體來說有一定的成本在。設計得太複雜，花太多時間來管理錯誤，結果大多錯誤都用不到的話，只會增加無謂的成本。gRPC 是針對所有可能的場景來設計，實際上還是要根據應用來裁量。</p>\n<p>再來，對於企業層級的錯誤處理，也可以試著用 gRPC interceptor 來轉換錯誤，像是提供企業級的錯誤定義模組，在每個 client 建構時都自動引入定義好的 interceptor，儘管會犧牲一些些彈性，但能換取較好的可擴充性，加速開發時間。</p>\n<p>最後，我們直接使用了 *errdetails.BadRequest_FieldViolation 來做型別斷言，省掉額外宣告錯誤模型的麻煩。這時 server 使用 errdetails 的效果顯現出來了，透過重用泛用性高，經過產品階段驗證的介面，自己就不用從頭摸索、設計、維護模型，可以轉而將這些時間投入到產品開發上。</p>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>這篇從錯誤模型的角度，嘗試設計一套 gRPC 的錯誤處理機制，不過，與其說是設計，最後還是用了跟主流方案接近的最佳實踐。畢竟最佳實踐能是最佳實踐的原因，就是經過實務中的打磨，使用性特別好。</p>\n<p>這邊想再講的一個思考角度是開發者體驗，通常我們開發時，只會關注 happy path，錯誤處理都是用精簡至上的角度來設計，直到某天錯誤發生，想看的除錯資訊都沒有，才會回來檢視原本的設計。這背後意味著在思考開發場景時，有些假設是值得商榷的。在開發者花費的時間中，除錯或許比開發佔更高比例，既然如此，我們應該將每個錯誤都當成是一個使用者故事來看待，讓系統的支援完善，才能做好開發者體驗。</p>\n<p>以上大概是梳理錯誤處理的一些過程，中間也學習到很多模型匹配的原則，算是挺有收穫的，希望看完這篇文章的讀者，能多知道一些錯誤處理的背景。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://grpc.github.io/grpc/core/md_doc_statuscodes.html\">GRPC Core: Status codes and their use in gRPC</a></li>\n<li><a href=\"https://stripe.com/docs/api/errors#errors-api_error\">Stripe API reference – Go</a></li>\n</ul>\n",
      "date_published": "2022-10-07T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/use-conan-to-manage-c-package/",
      "url": "https://blog.kenwsc.com/posts/use-conan-to-manage-c-package/",
      "title": "Conan：C/C++ 的套件管理工具",
      "content_html": "<p>開發 C++ 程式時，套件管理會是個困擾開發者的問題，C++ 不像 Python 有 pip；node.js 有 npm；lua 有 rock；C# 有 Nuget。它就只是沒有。沒有套件管理，當不同開發環境的使用者要開發程式時，不僅需要手動將相關的檔案塞進 repository 中，還會遇到相容性的問題，例如小明使用 paho-c 1.3.0 開發，開發到一半時，另一位開發者小華引用了小明放在 repo 中 include 資料夾下的 header file，卻使用了自己的 1.3.1 shared library，這使得兩個人的版本不相容，要花很多時間除錯。</p>\n<p>此外，當需要更新 repo 中的第三方套件版本時，需要手動將檔案放到 include 跟 libs 的資料夾，你引用多少套套件，你就要塞多少檔案進去；而跨平台的問題也是，Win32 可能要一份，Win64 要一份，Release 跟 Debug 的 Libs 各要一份，Linux 跟 Mac 再各要一份，最後 x86、arm、mips 再各要一份，自行排列組合一下就知道這個更新的痛苦了。為什麼我知道呢？因為我就是那個被困擾的人。</p>\n<p>好在許多開發者都有同樣的問題，於是 Conan 出來了，這是一個 C++ 套件管理工具，用 Python 寫成，目的在於協助開發者解決上述的困擾。本文會簡單介紹 Conan 的用法，希望大家看完後都能如獲新生。</p>\n<h2 id=\"install-conan\"><a class=\"direct-link\" href=\"#install-conan\">#</a> Install conan</h2>\n<p>首先來安裝 conan 這套工具，由於 conan 是用 python 寫的，也有在 pip 的 remote repo 中，因此只要用 pip 即可安裝</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP-2R08VK6:~/git/conan/build$ pip3 <span class=\"token function\">install</span> conan<br>Collecting conan<br>    Downloading <span class=\"token punctuation\">[</span>https://files.pythonhosted.org/packages/2e/b7/560406ecd9d20e308498ce378dc8c1e0bc932f44d5377bc0ca62ec8dd75b/conan-1.21.1.tar.gz<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https://files.pythonhosted.org/packages/2e/b7/560406ecd9d20e308498ce378dc8c1e0bc932f44d5377bc0ca62ec8dd75b/conan-1.21.1.tar.gz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>552kB<span class=\"token punctuation\">)</span><br>    <span class=\"token number\">100</span>% <span class=\"token operator\">|</span>████████████████████████████████<span class=\"token operator\">|</span> 552kB 761kB/s <br>Collecting Jinja<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&lt;</span><span class=\"token number\">3</span>,<span class=\"token operator\">>=</span><span class=\"token number\">2.3</span> <span class=\"token punctuation\">(</span>from conan<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">..</span>.</code></pre>\n<p>安裝完記得重新讀取 .profile，引入 conan 指令</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.profile</code></pre>\n<h2 id=\"prepare-environment\"><a class=\"direct-link\" href=\"#prepare-environment\">#</a> Prepare Environment</h2>\n<p>來看一下專案環境，假設我們<a href=\"https://medium.com/@ken00535/use-cmake-to-build-cross-platform-application-8888db861cb3\">參照前篇</a>，用 cmake 來進行編譯，工作目錄會長</p>\n<pre><code>project/\n├── build/\n├── src/\n|   ├── CMakeLists.txt\n|   └── hello.cpp\n├── CMakeLists.txt\n├── conanfile.txt\n└── README\n</code></pre>\n<p>其中 src 放原始碼，hello.cpp 內容為經典的 hello, world</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Poco/Thread.h\"</span></span><br><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Poco/Runnable.h\"</span></span><br><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloRunnable</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> Poco<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Runnable</span></span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello, world!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    HelloRunnable runnable<span class=\"token punctuation\">;</span><br>    Poco<span class=\"token double-colon punctuation\">::</span>Thread thread<span class=\"token punctuation\">;</span><br>    thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    thread<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這邊使用 Poco 的 Lib 來創建 thread，並呼叫一個印出 Hello, world 的 Runnable。之所以用 Poco 是因為 conan 官方也用 Poco 當範例，而且方便進行跨平台。Lib 本身不是重點，重點是有使用了一個第三方套件。</p>\n<p>關於 CMakeLists.txt 的使用請參照前篇，不再多述，兩個 CMakeLists.txt 分別是</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># .CmakeLists.txt</span><br><br>CMAKE_MINIMUM_REQUIRED<span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">2.6</span><span class=\"token punctuation\">)</span><br>PROJECT<span class=\"token punctuation\">(</span>HELLOLIB<span class=\"token punctuation\">)</span><br>ADD_SUBDIRECTORY<span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span></code></pre>\n<p>以及</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># .src/CmakeLists.txt</span><br><br>ADD_EXECUTABLE<span class=\"token punctuation\">(</span>hello hello.cpp<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"edit-conanfile\"><a class=\"direct-link\" href=\"#edit-conanfile\">#</a> Edit conanfile</h2>\n<p>conan 使用 conanfile.txt 來管理套件，conanfile 的格式有點像 TOML，但我找不到官方說法，對使用者來說也許不用想太多，只要知道是某種配置文件就行，它的內容是</p>\n<pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token header\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">requires</span><span class=\"token punctuation\">]</span></span><br>Poco/1.9.4@pocoproject/stable<br><br><span class=\"token header\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">generators</span><span class=\"token punctuation\">]</span></span><br>cmake</code></pre>\n<p>這段內容表示依賴套件是 Poco，版本 1.9.4，來源 pocoproject/stable，產生cmake 模組。</p>\n<p>接著進到 build 目錄，使用 conan</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP-2R08VK6:~/git/conan/build$ conan <span class=\"token function\">install</span> <span class=\"token punctuation\">..</span><br>Configuration:<br><span class=\"token punctuation\">[</span>settings<span class=\"token punctuation\">]</span><br><span class=\"token assign-left variable\">arch</span><span class=\"token operator\">=</span>x86_64<br><span class=\"token assign-left variable\">arch_build</span><span class=\"token operator\">=</span>x86_64<br><span class=\"token assign-left variable\">build_type</span><span class=\"token operator\">=</span>Release<br><span class=\"token assign-left variable\">compiler</span><span class=\"token operator\">=</span>gcc<br>compiler.libcxx<span class=\"token operator\">=</span>libstdc++<br>compiler.version<span class=\"token operator\">=</span><span class=\"token number\">7</span><br><span class=\"token assign-left variable\">os</span><span class=\"token operator\">=</span>Linux<br><span class=\"token assign-left variable\">os_build</span><span class=\"token operator\">=</span>Linux<br><span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">[</span>build_requires<span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">[</span>env<span class=\"token punctuation\">]</span><br><br>conanfile.txt: Installing package<br>Requirements<br>    OpenSSL/1.0.2o@conan/stable from <span class=\"token string\">'conan-center'</span> - Cache<br>    Poco/1.9.4@pocoproject/stable from <span class=\"token string\">'conan-center'</span> - Cache<br>    zlib/1.2.11@conan/stable from <span class=\"token string\">'conan-center'</span> - Cache<br>Packages<br>    OpenSSL/1.0.2o@conan/stable:b781af3f476d0aa5070a0a35b544db7a3c193cc8 - Cache<br>    Poco/1.9.4@pocoproject/stable:57e3039664a87aab5ccabd995efae6da01c1ff17 - Cache<br>    zlib/1.2.11@conan/stable:d50a0d523d98c15bb147b18fa7d203887c38be8b - Cache<br><br>zlib/1.2.11@conan/stable: Already installed<span class=\"token operator\">!</span><br>OpenSSL/1.0.2o@conan/stable: Already installed<span class=\"token operator\">!</span><br>Poco/1.9.4@pocoproject/stable: Already installed<span class=\"token operator\">!</span><br>conanfile.txt: Generator cmake created conanbuildinfo.cmake<br>conanfile.txt: Generator txt created conanbuildinfo.txt<br>conanfile.txt: Generated conaninfo.txt<br>conanfile.txt: Generated graphinfo</code></pre>\n<p>然後工作目錄就變成</p>\n<pre><code>project/\n├── build/\n|   ├── ...\n|   ├── conanbuildinfo.cmake\n|   └── ...\n├── src/\n|   ├── CMakeLists.txt\n|   └── hello.cpp\n├── CMakeLists.txt\n├── conanfile.txt\n└── README\n</code></pre>\n<p>跟之前對照，多出了 cmake 模組 conanbuildinfo.cmake</p>\n<h2 id=\"modify-cmakelists\"><a class=\"direct-link\" href=\"#modify-cmakelists\">#</a> Modify CMakeLists</h2>\n<p>之所以要有 cmake 模組，就是為了讓 cmake 引用，因此要回頭改 CMakeLists.txt，將 conan 相關的指令加進去</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># .CMakeLists.txt</span><br><br>CMAKE_MINIMUM_REQUIRED<span class=\"token punctuation\">(</span>VERSION <span class=\"token number\">2.6</span><span class=\"token punctuation\">)</span><br>PROJECT<span class=\"token punctuation\">(</span>HELLOLIB<span class=\"token punctuation\">)</span><br><br>INCLUDE<span class=\"token punctuation\">(</span><span class=\"token variable\">${CMAKE_BINARY_DIR}</span>/conanbuildinfo.cmake<span class=\"token punctuation\">)</span><br>CONAN_BASIC_SETUP<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>INCLUDE_DIRECTORIES<span class=\"token punctuation\">(</span><span class=\"token variable\">${CONAN_INCLUDE_DIRS}</span><span class=\"token punctuation\">)</span><br>MESSAGE<span class=\"token punctuation\">(</span>STATUS <span class=\"token variable\">${CONAN_INCLUDE_DIRS}</span><span class=\"token punctuation\">)</span><br>ADD_SUBDIRECTORY<span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span></code></pre>\n<p>其中 INCLUDE 是引用 conan 產生的 cmake 模組；CONAN_BASIC_SETUP 會設定 conan 需要的變數；INCLUDE_DIRECTORIES 是引用 conan 相關的 header file，免去手動搬運 header file 的麻煩。MESSAGE 可加可不加，這邊是用來印出 conan header file 的所在目錄，讓開發者心底踏實一點。</p>\n<p>而另一個 CMakeLists.txt 則改成</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># .src/CMakeLists.txt</span><br><br>ADD_EXECUTABLE<span class=\"token punctuation\">(</span>hello hello.cpp<span class=\"token punctuation\">)</span><br>TARGET_LINK_LIBRARIES<span class=\"token punctuation\">(</span>hello <span class=\"token variable\">${CONAN_LIBS}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>非常單純，就是鏈結 conan 相關的 lib。</p>\n<h2 id=\"build\"><a class=\"direct-link\" href=\"#build\">#</a> Build</h2>\n<p>關鍵的時候到了，用 cmake 配置並編譯</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP-2R08VK6:~/git/conan/build$ cmake <span class=\"token punctuation\">..</span><br>-- The C compiler identification is GNU <span class=\"token number\">7.4</span>.0<br><span class=\"token punctuation\">..</span>.<br>-- /home/ken/.conan/data/Poco/1.9.4/pocoproject/stable/package/57e3039664a87aab5ccabd995efae6da01c1ff17/include/home/ken/.conan/data/OpenSSL/1.0.2o/conan/stable/package/b781af3f476d0aa5070a0a35b544db7a3c193cc8/include/home/ken/.conan/data/zlib/1.2.11/conan/stable/package/d50a0d523d98c15bb147b18fa7d203887c38be8b/include<br><span class=\"token punctuation\">..</span>.</code></pre>\n<p>可以看到 conan 抓下來的檔案會放在 user 家目錄的 .conan。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP-2R08VK6:~/git/conan/build$ cmake --build <span class=\"token builtin class-name\">.</span><br>Scanning dependencies of target hello<br><span class=\"token punctuation\">[</span> <span class=\"token number\">50</span>%<span class=\"token punctuation\">]</span> Building CXX object src/CMakeFiles/hello.dir/hello.cpp.o<br><span class=\"token punctuation\">[</span><span class=\"token number\">100</span>%<span class=\"token punctuation\">]</span> Linking CXX executable <span class=\"token punctuation\">..</span>/bin/hello<br><span class=\"token punctuation\">[</span><span class=\"token number\">100</span>%<span class=\"token punctuation\">]</span> Built target hello</code></pre>\n<p>編譯完成，來執行看看</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@DESKTOP-2R08VK6:~/git/conan/build$ ./bin/hello <br>Hello, world<span class=\"token operator\">!</span></code></pre>\n<p>結束！conan 自動抓完 header file 跟 library，開發者不要再煩惱套件跟庫管理了，專心來享受寫程式的快樂吧。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>看到 conan 能自動管理套件，真的不是個「爽」字能形容，套句強者我同事的話：「我不常寫 C++，因為它的套件管理太可怕了」。有使用開源程式碼開發的人，應該非常能了解這種感受。</p>\n<p>在使用 conan 開發途中，難免踩到一些坑，直接上 GitHub 發問後，沒想到 conan 的 Contributor 在短短幾小時內就快速回覆，還 involve 相關專案的 Contributor 一起來確認，現在開源社群的活躍度已經這麼厲害了嗎？</p>\n<p>要說 conan 的問題，可能是普及度還不夠，有時需要的 library 不一定會有，但我覺得這沒有關係，只要會 python，就可以捲起袖子，把自己要用的 library 打包後回饋，讓其他人也能快速利用同樣的資源。畢竟人生苦短，不要重複造輪子，我們可以面朝大海。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://conan.io/\">Conan Official Website</a></li>\n<li><a href=\"https://docs.conan.io/en/latest/reference/generators/cmake.html\">常用的 conan cmake 變數</a></li>\n<li><a href=\"http://blog.guorongfei.com/2018/04/23/conan-tutorial/\">C++包管理器 — — conan</a></li>\n</ul>\n",
      "date_published": "2020-01-18T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/use-commitizen-to-write-graceful-git-comment/",
      "url": "https://blog.kenwsc.com/posts/use-commitizen-to-write-graceful-git-comment/",
      "title": "輕鬆上手約定式提交：Commitizen 體驗",
      "content_html": "<p>最近參加 <a href=\"https://www.facebook.com/DevOpsTaiwan/?__xts__%5B0%5D=68.ARDEgwToQAGuv9hG3_bq6XWyLfuKwC8UtMvzV5WLsG4UpdFV7OX5T7j3D5mDFIFc-g4fw6AmpuWS6Q2lXlGOX63ewQsP-Zr28ToevHy_ys6mbYIQw_XhaPLa9vdayvCkwV0GiPgJ0ex-m3cPNb0BEO4O-psJC4pcRo4QwsG10-DYNJW9TVMZp6fUQk7vJwiYvSYwwKUEfySzN7acg1qnTyTqq9gfhp6PH4T_wyR_qcA5sjwkmHklTSZs5tYXRJv_hS7p72UmGZc9AGktwZ3HKiuCxdmc3fVK2l9lRASxzyPAC4qWVPEYRF7eScGeOprzdFkfnkbmkoCKqappUDmFhHrXq5ONVNSXCXC_ltxFT-TWwPyFeLJk5o0Cqe0&amp;__xts__%5B1%5D=68.ARAcpv3SzZ6EJSKKfcow3owDtiyMig-u6PbVyaWDvjd8xNckpS8mKdrSgY8LjHquhuMgtjC9T36r5IdZkW79QMhDBVs-dFX-ejRugNm4slqIlj7Z0NFmlSotqiDtbmRivf8CPNkFGHvms-BdA1925rc4Qss3OXhWVaAF53i2MtAqTdC4NwOdN0RbjRT2loQHnkLFnSqk-QU-YDNG&amp;__tn__=K-R&amp;eid=ARAGF0O3M8GMJQ8AvevMsEgZ1JRpx_HAz-w9szWyv3wn99ZFociIgks68rbjUVVQoBUFPAtPcnDLvKR9&amp;fref=mentions\">DevOps Meetup</a> 的活動，Speaker 提到團隊使用 Commitizen 這套工具來統一提交訊息的風格，當場就有種醍醐灌頂的感覺。我們團隊前陣子才 Suffer 在 Commit Style 分歧，知識管理效率低落，有時只有 commit 本人能看懂，而使用共同模板又太浪費時間，跟 Git 鼓勵 commit 的精神背道而馳。聽完後，真的是相見恨晚，完全命中我的痛點。</p>\n<p>Commitizen 是由 AngularJS 的規範衍伸而來，各團隊可以依照需求自行調整，我們 Step by Step 來看看 Commitizen 的效果如何。</p>\n<h2 id=\"install-node.js\"><a class=\"direct-link\" href=\"#install-node.js\">#</a> Install Node.js</h2>\n<p>因為 Commitizen 是使用 Node.js 開發，不免俗的，要裝一下 Node.js，Ubuntu 的安裝方式是</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> nodejs<br><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">npm</span></code></pre>\n<p>確認是否有安裝完成</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@ken-Lenovo-ideapad-330-15ICH:~/git/git$ node -v<br>v8.10.0<br>ken@ken-Lenovo-ideapad-330-15ICH:~/git/git$ <span class=\"token function\">npm</span> -v<br><span class=\"token number\">3.5</span>.2</code></pre>\n<h2 id=\"install-commitizen\"><a class=\"direct-link\" href=\"#install-commitizen\">#</a> Install Commitizen</h2>\n<p>接著使用 Node.js 的 Package Management 工具 npm 來安裝 Commitizen</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g commitizen<br><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'{ \"path\": \"cz-conventional-changelog\" }'</span> <span class=\"token operator\">></span> ~/.czrc</code></pre>\n<p>-g 是全域安裝的意思，如果沒有需要針對 Project 制定 Style，用全域安裝即可，.czrc 則是用來設定 template 的路徑。</p>\n<h2 id=\"git-format\"><a class=\"direct-link\" href=\"#git-format\">#</a> Git Format</h2>\n<p>在預設的 format 中，commit comment 由三個部分組成</p>\n<pre><code>&lt;head&gt;\n&lt;body&gt;\n&lt;footer&gt;\n</code></pre>\n<p>讓我們看一個簡單的例子</p>\n<pre><code>commit 4030e040b6044de68b2750702a5b6065c887960c\nAuthor: kenwschen &lt;ken*****@[gmail.com](mailto:ken00535@gmail.com)&gt;\nDate:   Thu Nov 28 22:51:44 2019 +0800\n<p>feat(libhello): add hello file</p>\n<p>hello, this is a longer description</p>\n<p>fix #100<br>\n</code></pre></p>\n<p>第一行是 head，也就是 title，通常會由</p>\n<pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n</code></pre>\n<p>在本例中可以看成這個 commit 為新增功能(feature)，更改的 module 是 libhello，簡單描述是 add hello file。</p>\n<p>中間行是 body，代表詳細的描述，通常會說明要解決的問題是什麼，具體做法是什麼等等。</p>\n<p>最後一行是 footer，通常會標明相關的 issue，如果沒有將 issue 跟 git 結合在一起的話，footer 可以不標。</p>\n<h2 id=\"git-cz\"><a class=\"direct-link\" href=\"#git-cz\">#</a> Git cz</h2>\n<p>實際執行 Commitizen，使用 git cz 來取代 git commit</p>\n<p><img src=\"/img/posts/use-commitizen-to-write-graceful-git-comment/commitizen-1.png\" alt=\"\"></p>\n<p>可以看到，Commitizen 會很貼心顯示選單讓 user 選擇，只要照著問題跟選單將答案填入就好，就是這麼簡單。</p>\n<p>來看一下提交的結果</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@ken-Lenovo-ideapad-330-15ICH:~/git$ <span class=\"token builtin class-name\">echo</span> hello <span class=\"token operator\">></span> hello     <br>ken@ken-Lenovo-ideapad-330-15ICH:~/git$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>              <br>ken@ken-Lenovo-ideapad-330-15ICH:~/git$ <span class=\"token function\">git</span> cz                 <br>cz-cli@4.0.3, cz-conventional-changelog@3.0.1                  <br>                                                                <br>? Select the <span class=\"token builtin class-name\">type</span> of change that you're committing: feat:        A new feature                                                     <br>? What is the scope of this change <span class=\"token punctuation\">(</span>e.g. component or <span class=\"token function\">file</span> name<span class=\"token punctuation\">)</span>: <span class=\"token punctuation\">(</span>press enter to skip<span class=\"token punctuation\">)</span> libhello                                   <br>? Write a short, imperative tense description of the change <span class=\"token punctuation\">(</span>max <span class=\"token number\">84</span> chars<span class=\"token punctuation\">)</span>:                                                        <br>    <span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span> <span class=\"token function\">add</span> hello <span class=\"token function\">file</span>                                               <br>? Provide a longer description of the change: <span class=\"token punctuation\">(</span>press enter to skip<span class=\"token punctuation\">)</span><br>    hello, this is a longer description<br>? Are there any breaking changes? No<br>? Does this change affect any <span class=\"token function\">open</span> issues? No<br><span class=\"token punctuation\">[</span>master 2e1ea38<span class=\"token punctuation\">]</span> feat<span class=\"token punctuation\">(</span>libhello<span class=\"token punctuation\">)</span>: <span class=\"token function\">add</span> hello <span class=\"token function\">file</span><br>    <span class=\"token number\">1</span> <span class=\"token function\">file</span> changed, <span class=\"token number\">1</span> insertion<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span><br>    create mode <span class=\"token number\">100644</span> hello<br><br>ken@ken-Lenovo-ideapad-330-15ICH:~/git$ <span class=\"token function\">git</span> log<br>commit 2e1ea3868dcf972c2499378ee9d5b3ac7ab654b6 <span class=\"token punctuation\">(</span>HEAD -<span class=\"token operator\">></span> master<span class=\"token punctuation\">)</span><br>Author: kenwschen <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span>ken*****@gmail.com<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>mailto:ken00535@gmail.com<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><br>Date:   Fri Nov <span class=\"token number\">29</span> 00:40:31 <span class=\"token number\">2019</span> +0800<br><br>feat<span class=\"token punctuation\">(</span>libhello<span class=\"token punctuation\">)</span>: <span class=\"token function\">add</span> hello <span class=\"token function\">file</span><br><br>hello, this is a longer description</code></pre>\n<p>是不是太美了！</p>\n<h2 id=\"customize-format\"><a class=\"direct-link\" href=\"#customize-format\">#</a> Customize Format</h2>\n<p>如果專案有自訂格式，例如需要標註修改方式、修改目的等等，可以怎麼做？Commitizen 支援許多模板，其中 cz-customizable 有讓 user 自訂選項的彈性，先安裝起來</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g cz-customizable<br><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'{ \"path\": \"cz-customizable\" }'</span> <span class=\"token operator\">></span> ~/.czrc</code></pre>\n<p>將配置項的範例複製到家目錄</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> /usr/local/lib/node_modules/cz-customizable/cz-config-EXAMPLE.js ~/.cz-config.js</code></pre>\n<p>打開配置文件，可以看到其中有許多配置設定，假設現在需要新增一個互動問答，讓 user 輸入 commit 的 purpose，可以在其中加入</p>\n<pre class=\"language-js\"><code class=\"language-js\">    messages<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>        type<span class=\"token operator\">:</span> <span class=\"token string\">\"Select the type of change that you're committing:\"</span><span class=\"token punctuation\">,</span><br>        scope<span class=\"token operator\">:</span> <span class=\"token string\">'\\nDenote the SCOPE of this change (optional):'</span><span class=\"token punctuation\">,</span><br>        customScope<span class=\"token operator\">:</span> <span class=\"token string\">'Denote the SCOPE of this change:'</span><span class=\"token punctuation\">,</span><br>        subject<span class=\"token operator\">:</span> <span class=\"token string\">'Write a SHORT, IMPERATIVE tense description of the change:\\n'</span><span class=\"token punctuation\">,</span><br>        body<span class=\"token operator\">:</span> <span class=\"token string\">'Provide a LONGER description of the change (optional). Use \"|\" to break new line:\\n'</span><span class=\"token punctuation\">,</span><br>        <span class=\"token operator\">**</span>bodyPurpose<span class=\"token operator\">:</span> <span class=\"token string\">'The purpose of the change:\\n'</span><span class=\"token punctuation\">,</span><span class=\"token operator\">**</span><br>        breaking<span class=\"token operator\">:</span> <span class=\"token string\">'List any BREAKING CHANGES (optional):\\n'</span><span class=\"token punctuation\">,</span><br>        footer<span class=\"token operator\">:</span> <span class=\"token string\">'List any ISSUES CLOSED by this change (optional). E.g.: #31, #34:\\n'</span><span class=\"token punctuation\">,</span><br>        confirmCommit<span class=\"token operator\">:</span> <span class=\"token string\">'Are you sure you want to proceed with the commit above?'</span><span class=\"token punctuation\">,</span><br>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre>\n<p>其中 bodyPurpose 這行是新加入的選項。</p>\n<p>接著修改問句文件</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> /usr/local/lib/node_modules/cz-customizable/questions.js</code></pre>\n<p>在其中加入 bodyPurpose</p>\n<pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token operator\">...</span><br>    messages<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span><br>          messages<span class=\"token punctuation\">.</span>body <span class=\"token operator\">||</span> <span class=\"token string\">'Provide a LONGER description of the change (optional). Use \"|\" to break new line:\\n'</span><span class=\"token punctuation\">;</span><br>        <span class=\"token operator\">**</span>messages<span class=\"token punctuation\">.</span>bodyPurpose <span class=\"token operator\">=</span> messages<span class=\"token punctuation\">.</span>bodyPurpose <span class=\"token operator\">||</span> <span class=\"token string\">'The purpose of the change:\\n'</span><span class=\"token punctuation\">;</span><span class=\"token operator\">**</span><br>        messages<span class=\"token punctuation\">.</span>breaking <span class=\"token operator\">=</span> messages<span class=\"token punctuation\">.</span>breaking <span class=\"token operator\">||</span> <span class=\"token string\">'List any BREAKING CHANGES (optional):\\n'</span><span class=\"token punctuation\">;</span><br>    <span class=\"token operator\">...</span><br><br>    <span class=\"token operator\">...</span><br>          <span class=\"token punctuation\">{</span><br>            type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span><br>            name<span class=\"token operator\">:</span> <span class=\"token string\">'body'</span><span class=\"token punctuation\">,</span><br>            message<span class=\"token operator\">:</span> messages<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span><br>          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>          <span class=\"token operator\">**</span><span class=\"token punctuation\">{</span><br>            type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span><br>            name<span class=\"token operator\">:</span> <span class=\"token string\">'bodyPurpose'</span><span class=\"token punctuation\">,</span><br>            message<span class=\"token operator\">:</span> messages<span class=\"token punctuation\">.</span>bodyPurpose<span class=\"token punctuation\">,</span><br>          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token operator\">**</span><br>    <span class=\"token operator\">...</span></code></pre>\n<p>然後修改 commit 生成文件，將 bodyPurpose 加入</p>\n<pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>answers<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> wrapOptions<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span><br>    <span class=\"token operator\">**</span>body <span class=\"token operator\">=</span> body <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>answers<span class=\"token punctuation\">.</span>bodyPurpose<span class=\"token punctuation\">,</span> wrapOptions<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">**</span><br>    body <span class=\"token operator\">=</span> <span class=\"token function\">addBreaklinesIfNeeded</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>breaklineChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>現在來看一下修改的成果</p>\n<p><img src=\"/img/posts/use-commitizen-to-write-graceful-git-comment/commitizen-2.png\" alt=\"\"></p>\n<p>而實際的 log 是</p>\n<pre><code>commit 3cc8c9aa4a9084fb4b8faa651d98b5376f24e4d6 (HEAD -&gt; master)\nAuthor: kenwschen &lt;[kenxxxxx@gmail.com](mailto:ken00535@gmail.com)&gt;\nDate:   Fri Nov 29 19:56:58 2019 +0800\n<p>feat(libhello): add hello file</p>\n<p>add a new file to test commitizen tool. hello is a lib that can say &quot;hello&quot;<br>\n</code></pre></p>\n<h2 id=\"conclusion\"><a class=\"direct-link\" href=\"#conclusion\">#</a> Conclusion</h2>\n<p>有時候程式寫一寫，會忘記升級自己的工具，很多時候團隊遇到的問題不是人的問題，而是工具的問題，我們應該要盡量 align 目標，用工具時時提醒出發點在哪。commit comment 原本是為了溝通而存在，而 Commitizen 可以幫我們更好地去做這件事。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://github.com/commitizen/cz-cli\">Commitizen GitHub</a></li>\n<li><a href=\"https://github.com/leonardoanalista/cz-customizable\">cz-customizable GitHub</a></li>\n</ul>\n",
      "date_published": "2019-11-29T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/use-prometheus-to-monitor-end-devices/",
      "url": "https://blog.kenwsc.com/posts/use-prometheus-to-monitor-end-devices/",
      "title": "監控節點的度量指標：Prometheus 入門",
      "content_html": "<p>Prometheus 是一套開源的監控系統，常常搭配雲端，監控服務運行狀態。今年 COSCUP 有一位 Speaker 將它用於 End-Devices 的監控，看起來非常有意思。透過這套系統，我們能將各處節點的資訊整合於統一的平台，讓 Operation 監控服務，避免服務中斷導致價值鍊中斷，同時這些數據也能提供給 Developer，作為後續改善的依據。</p>\n<p>Prometheus 的基本原理是用 HTTP 定期抓取監控端（target）的資料，target 上會有 exporter，將符合 Prometheus 定義的資訊輸出到 HTTP API，Prometheus 拉取後就能將它顯示於 Dashboard。</p>\n<h2 id=\"install-prometheus\"><a class=\"direct-link\" href=\"#install-prometheus\">#</a> Install Prometheus</h2>\n<p>安裝有兩個方式，可以用 binary 安裝或是用 docker 安裝，為隔離與管理方便，這邊選擇使用 docker 安裝</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">docker run --name prometheus -d -p <span class=\"token number\">9090</span>:9090 quay.io/prometheus/prometheus </code></pre>\n<p>記得將 container port forward 到 host 的 port，讓外面可以使用。</p>\n<p>安裝好後，在瀏覽器輸入 Prometheus server 的 IP，應該可以看到 Prometheus 自帶的 GUI，如下</p>\n<p><img src=\"/img/posts/use-prometheus-to-monitor-end-devices/prom-1.png\" alt=\"\"></p>\n<p>Expression 可以輸入 Prometheus 的查詢 PromQL，Graph 會依照 PromQL 顯示對應的採集資料，這些採集資料稱為 Metric，up 這個 Metric 表示對應的採集實例(instance)狀態，當 up 值為 1，表示 exporter instance 正常運作。</p>\n<h2 id=\"install-node-exporter\"><a class=\"direct-link\" href=\"#install-node-exporter\">#</a> Install Node Exporter</h2>\n<p>當要抓取不同 target 或更詳細的資料時，會需要一套 exporter 將資料收集起來，方便 Prometheus server 拉取。Node Exporter 這個 Project 就是要做這件事。它是用 Go 語言寫成，沒有相依性問題，直接下載後就能執行</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -OL <span class=\"token punctuation\">[</span>https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz<span class=\"token punctuation\">)</span><br><span class=\"token function\">tar</span> -xzf node_exporter-0.18.1.linux-amd64.tar.gz<br><span class=\"token function\">cp</span> node_exporter-0.18.1.linux-amd64/node_exporter /usr/local/bin/<br>node_exporter</code></pre>\n<p>下載時請依照自己的作業系統下載對應版本，我們下載 Linux 版後放到安裝目錄，執行</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@ken-Lenovo-ideapad-330-15ICH:~/git/promethus$ node_exporter<br><br>INFO<span class=\"token punctuation\">[</span>0000<span class=\"token punctuation\">]</span> Starting node_exporter <span class=\"token punctuation\">(</span>version<span class=\"token operator\">=</span><span class=\"token number\">0.18</span>.1, <span class=\"token assign-left variable\">branch</span><span class=\"token operator\">=</span>HEAD, <span class=\"token assign-left variable\">revision</span><span class=\"token operator\">=</span>3db77732e925c08f675d7404a8c46466b2ece83e<span class=\"token punctuation\">)</span>  <span class=\"token assign-left variable\">source</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter.go:156\"</span>                                  <br>INFO<span class=\"token punctuation\">[</span>0000<span class=\"token punctuation\">]</span> Build context <span class=\"token punctuation\">(</span>go<span class=\"token operator\">=</span>go1.12.5, <span class=\"token assign-left variable\">user</span><span class=\"token operator\">=</span>root@b50852a1acba, <span class=\"token assign-left variable\">date</span><span class=\"token operator\">=</span><span class=\"token number\">20190604</span>-16:41:18<span class=\"token punctuation\">)</span>  <span class=\"token assign-left variable\">source</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter.go:157\"</span>              <br>INFO<span class=\"token punctuation\">[</span>0000<span class=\"token punctuation\">]</span> Enabled collectors:                           <span class=\"token assign-left variable\">source</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter.go:97\"</span>                         <br>INFO<span class=\"token punctuation\">[</span>0000<span class=\"token punctuation\">]</span>  - arp                                        <span class=\"token assign-left variable\">source</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter.go:104\"</span>                        <br>INFO<span class=\"token punctuation\">[</span>0000<span class=\"token punctuation\">]</span>  - bcache                                     <span class=\"token assign-left variable\">source</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter.go:104\"</span>                        <br>INFO<span class=\"token punctuation\">[</span>0000<span class=\"token punctuation\">]</span>  - bonding                                    <span class=\"token assign-left variable\">source</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter.go:104\"</span><br><span class=\"token punctuation\">..</span>.</code></pre>\n<p>Node Exporter 預設的 port 是 9100，在瀏覽器上輸入後，可以看到</p>\n<p><img src=\"/img/posts/use-prometheus-to-monitor-end-devices/prom-2.png\" alt=\"\"></p>\n<p>底下的 Metrics 就是採集到的 Metrics，點開來會看到 Node Exporter 有採集的資訊</p>\n<pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token comment\"># HELP go_gc_duration_seconds A summary of the GC invocation durations.</span><br><span class=\"token comment\"># TYPE go_gc_duration_seconds summary</span><br><span class=\"token key attr-name\">go_gc_duration_seconds{quantile</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"0\"} 1.4124e-05</span><br><span class=\"token key attr-name\">go_gc_duration_seconds{quantile</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"0.25\"} 3.1017e-05</span><br><span class=\"token key attr-name\">go_gc_duration_seconds{quantile</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"0.5\"} 0.000118785</span><br><span class=\"token key attr-name\">go_gc_duration_seconds{quantile</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"0.75\"} 0.000144924</span><br><span class=\"token key attr-name\">go_gc_duration_seconds{quantile</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"1\"} 0.000173711</span><br>go_gc_duration_seconds_sum 0.000581784<br>go_gc_duration_seconds_count 6<br><span class=\"token comment\"># HELP go_goroutines Number of goroutines that currently exist.</span><br><span class=\"token comment\"># TYPE go_goroutines gauge</span><br>go_goroutines 7<br><span class=\"token comment\"># HELP go_info Information about the Go environment.</span><br><span class=\"token comment\"># TYPE go_info gauge</span><br><span class=\"token key attr-name\">go_info{version</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"go1.12.5\"} 1</span><br><span class=\"token comment\"># HELP go_memstats_alloc_bytes Number of bytes allocated and still in use.</span><br><span class=\"token comment\"># TYPE go_memstats_alloc_bytes gauge</span><br>go_memstats_alloc_bytes 1.942816e+06<br>...</code></pre>\n<h2 id=\"install-node-exporter-2\"><a class=\"direct-link\" href=\"#install-node-exporter-2\">#</a> Install Node Exporter</h2>\n<p>要將新增的 instance 告知 Prometheus server，讓 server 去拉取，就要去修改 server 的 config 檔，因為我們前面是用 docker 來執行，因此要先進到 container 內。其實更好的辦法應該是讓 container 跟外部的 config 檔同步，但我們先關注在 Prometheus 的操作上</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">docker <span class=\"token builtin class-name\">exec</span> -it prometheus <span class=\"token function\">sh</span></code></pre>\n<p>打開 config file</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /etc/prometheus/<br><span class=\"token function\">vi</span> prometheus.yml</code></pre>\n<p>在最下面加入新的 Job</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class=\"token comment\"># Here it's Prometheus itself.    </span><br><span class=\"token key atrule\">scrape_configs</span><span class=\"token punctuation\">:</span>     <br>    <span class=\"token comment\"># The job name is added as a label `job=&lt;job_name>` to any timeseries scraped from this config.       </span><br>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">job_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'prometheus'</span>          <br>      <span class=\"token comment\"># metrics_path defaults to '/metrics'  </span><br>      <span class=\"token comment\"># scheme defaults to 'http'.                          </span><br>      <span class=\"token key atrule\">static_configs</span><span class=\"token punctuation\">:</span>             <br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">targets</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'localhost:9090'</span><span class=\"token punctuation\">]</span><br>                    <br>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">job_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'node'</span><br>      <span class=\"token key atrule\">static_configs</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">targets</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'172.17.0.1:9100'</span><span class=\"token punctuation\">]</span></code></pre>\n<p>在 Prometheus 的術語中，Job 表示一組任務，任務中可能包括對好幾個 instance 的採集。上面新增一組 Job 稱為 node，對 172.17.0.1:9100 這個 instance 進行採集。</p>\n<p>設定完成後重啟 promethus</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">docker container restart prometheus</code></pre>\n<p>打開瀏覽器的 UI，可以看到出現新的 instance</p>\n<p><img src=\"/img/posts/use-prometheus-to-monitor-end-devices/prom-3.png\" alt=\"\"></p>\n<h2 id=\"query-cpu-usage\"><a class=\"direct-link\" href=\"#query-cpu-usage\">#</a> Query CPU Usage</h2>\n<p>假設我們要查詢 instance 的 CPU 使用率，可以怎麼做？我們可以由 Node Exporter 的說明中，看到 node_cpu_seconds_total 這項 metric 是 cpu 花費在特定模式的秒數。</p>\n<p>於是使用 PromQL 的內建函數 irate(v[time])，來取得數據的在時間區段的瞬間增長率，由於 CPU 在時間區段使用的時間秒數就是 CPU 的使用率，如此一來，就能取得使用率數值。</p>\n<p>最後，使用 PromQL 的聚合操作 avg，來將各 CPU 的數值合併，取其平均，聚合的規則是以各 instance 為聚合單位。</p>\n<p>結合所有查詢式如下</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token number\">100</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>avg <span class=\"token keyword\">by</span> <span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>irate<span class=\"token punctuation\">(</span>node_cpu_seconds_total{job<span class=\"token operator\">=</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">mode</span><span class=\"token operator\">=</span><span class=\"token string\">\"idle\"</span>}<span class=\"token punctuation\">[</span><span class=\"token number\">5</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></code></pre>\n<p>job 跟 mode 是 metric 的 label，扣掉 idle 所佔的使用率後，剩下的使用率就是 CPU 使用率了，按下執行後，Graph 就跑出來啦</p>\n<p><img src=\"/img/posts/use-prometheus-to-monitor-end-devices/prom-4.png\" alt=\"\"></p>\n<h2 id=\"monitor-pri\"><a class=\"direct-link\" href=\"#monitor-pri\">#</a> Monitor PRi</h2>\n<p>確認主機的資訊能拉取後，如法炮製到 RPi 上，安裝 Node Exporter，Model B 的架構是 armv6</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">pi@raspberrypi:~/prometheus $ <span class=\"token function\">wget</span> <span class=\"token punctuation\">[</span>https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux<span class=\"token punctuation\">)</span><br>-armv6.tar.gz<br>pi@raspberrypi:~/prometheus $ <span class=\"token function\">tar</span> -zxvf node_exporter-0.18.1.linux-armv6.tar.gz<br>pi@raspberrypi:~/prometheus $ <span class=\"token builtin class-name\">cd</span> node_exporter-0.18.1.linux-armv6/<br>pi@raspberrypi:~/prometheus/node_exporter-0.18.1.linux-armv6 $ ./node_exporter</code></pre>\n<p>修改 prometheus.yml，加入新的 instance</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class=\"token comment\"># Here it's Prometheus itself.</span><br><span class=\"token key atrule\">scrape_configs</span><span class=\"token punctuation\">:</span><br>  <span class=\"token comment\"># The job name is added as a label `job=&lt;job_name>` to any timeseries scraped from this config.</span><br>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">job_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'prometheus'</span><br>    <span class=\"token comment\"># metrics_path defaults to '/metrics'</span><br>    <span class=\"token comment\"># scheme defaults to 'http'.</span><br>    <span class=\"token key atrule\">static_configs</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">targets</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'localhost:9090'</span><span class=\"token punctuation\">]</span><br>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">job_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'node'</span><br>    <span class=\"token key atrule\">static_configs</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">targets</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'172.17.0.1:9100'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'192.168.5.10:9100'</span><span class=\"token punctuation\">]</span></code></pre>\n<p>刷新頁面，觀察結果</p>\n<p><img src=\"/img/posts/use-prometheus-to-monitor-end-devices/prom-5.png\" alt=\"\"></p>\n<p>RPi 的 CPU 使用率快樂抖動中。</p>\n<h2 id=\"conclusion\"><a class=\"direct-link\" href=\"#conclusion\">#</a> Conclusion</h2>\n<p>上張 Prometheus 的架構圖</p>\n<p><img src=\"/img/posts/use-prometheus-to-monitor-end-devices/prom-6.jpg\" alt=\"\"></p>\n<p>Prometheus 整個生態系有許多組件，在這個 Demo 中，用到的是 Prometheus Server、WebUI、Exporter 等架構圖下半部分，其他不同組件也有各自的用途。使用 Prometheus，我們能夠 Monitor 服務運行的狀況，也可以用它來通知異常（在今年的 COSCUP 中，Line 的 Speaker 就用它來觀察會議室中的活動人數，免得有人借了會議室卻不使用）。</p>\n<p>如果你還在尋找維運工具，不妨試試看。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/91215371\">為什麼說 Prometheus 是足以取代 Zabbix 的監控神器？</a></li>\n<li><a href=\"https://songjiayang.gitbooks.io/prometheus/content/\">Prometheus 实战</a></li>\n<li><a href=\"https://www.inwinstack.com/2018/11/14/prometheus-introduction-1/\">Prometheus 介紹與基礎入門 (上)</a></li>\n<li><a href=\"https://yunlzheng.gitbook.io/prometheus-book/\">Prometheus-book</a></li>\n</ul>\n",
      "date_published": "2019-11-28T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/use-ansible-to-update-end-devices/",
      "url": "https://blog.kenwsc.com/posts/use-ansible-to-update-end-devices/",
      "title": "配置即代碼：Ansible 入門",
      "content_html": "<p>之前負責產品研發時，常常需要因應客戶需求，更新終端裝置上的應用程式。因為終端裝置在廠區可能一次就是幾十幾百台，如果用手動更新大概當天就不用做事了。Ansible 這類組態管理(Configuration Management)軟體就是為此而生。相對於同類軟體，Ansible 的系統需求單純，只要 Client 端有安裝 Python 即可，很適合資源受限的嵌入式系統。</p>\n<p>這篇會用 Ansible 來模擬簡單的 Python 應用程式更新，看看它如何處理 Deployment 的問題。</p>\n<h2 id=\"install-ansible-and-setup-environment\"><a class=\"direct-link\" href=\"#install-ansible-and-setup-environment\">#</a> Install Ansible and Setup Environment</h2>\n<p>首先在 Server 端安裝 Ansible，如果你使用的是 Ubuntu 的話，只需要執行</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> ansible</code></pre>\n<p>同時，使用一台 Raspberry Pi Model B 來當成終端裝置，沒有 RPi 也可以用 VirtualBox + Vagrant 搭建虛擬機來使用。</p>\n<p><img src=\"/img/posts/use-ansible-to-update-end-devices/rpi3-1.webp\" alt=\"\"></p>\n<p>因為 Ansible 是使用 SSH 進行遠端操作，記得要打開 RPi 上的 SSH</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> raspi-config</code></pre>\n<p><img src=\"/img/posts/use-ansible-to-update-end-devices/rpi3-2.webp\" alt=\"\"></p>\n<p>選擇 Interfacing Options 後，打開 P2 SSH。</p>\n<p>最後要記得確認 RPi 上有 Python</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">python3 --version</code></pre>\n<h2 id=\"setup-host-information\"><a class=\"direct-link\" href=\"#setup-host-information\">#</a> Setup Host Information</h2>\n<p>我們必須告訴 Ansible 要連接的主機是哪些，相關資訊是什麼，這些 Client 端的裝置，在 Ansible 術語中稱為 Inventory。先假設工作目錄為 playbook，則先在該目錄下新增一個 hosts，來描述終端裝置</p>\n<pre><code>playbook/\n    hosts               *# inventory file for production servers*\n</code></pre>\n<p>該檔案內容為</p>\n<pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">pi ansible_host</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">192.168.5.10 ansible_user=pi</span></code></pre>\n<p>由內容可以知道，該裝置名稱是 pi，IP 是 192.168.5.10，而用來登入的使用者名稱為 pi。</p>\n<p>接著可以執行 Ansible 的測試命令 ping，當裝置收到後，會回應 pong，表示兩者間通訊正常</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># -i is inventory</span><br><span class=\"token comment\"># -m is command module</span><br><br>ken@ken-Lenovo-ideapad-330-15ICH:~/git/ansible/raspberry/playbooks$ ansible pi -i hosts -m <span class=\"token function\">ping</span><br>pi <span class=\"token operator\">|</span> SUCCESS <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token string\">\"changed\"</span><span class=\"token builtin class-name\">:</span> false, <br>    <span class=\"token string\">\"ping\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"pong\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"setup-ansible-config-file\"><a class=\"direct-link\" href=\"#setup-ansible-config-file\">#</a> Setup Ansible Config File</h2>\n<p>因為每台裝置需要寫 hosts 來對應會很麻煩，如果裝置有共通欄位，例如 RPi 的 remote_user 都是 pi，能不能使用共同文件來設定？Ansible 的 config 檔就是為了滿足這個需求。我們在工作目錄下加入 config</p>\n<pre><code>playbook/\n    hosts               *# inventory file for production servers\n    ansible.cfg         *# ansible config file*\n</code></pre>\n<p>檔案內容如下</p>\n<pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token header\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">defaults</span><span class=\"token punctuation\">]</span></span><br><span class=\"token key attr-name\">inventory</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">hosts</span><br><span class=\"token key attr-name\">remote_user</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">pi</span><br><span class=\"token key attr-name\">host_key_checking</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">False</span></code></pre>\n<p>將預設的 inventory 指向 hosts，預設的 user 設為 pi，如此一來，inventory file 中就無需描述多餘資訊，hosts 可以改成</p>\n<pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">pi ansible_host</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">192.168.5.10</span></code></pre>\n<p>因為 config 檔中已經指定 inventory 為 hosts，之後執行 Ansible 時就不用指定 -i 了。這次使用另外一個 Ansible 的命令來看 uptime 的時間</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@ken-Lenovo-ideapad-330-15ICH:~/git/ansible/raspberry/playbooks$ ansible pi -m <span class=\"token builtin class-name\">command</span> -a <span class=\"token function\">uptime</span><br>pi <span class=\"token operator\">|</span> SUCCESS <span class=\"token operator\">|</span> <span class=\"token assign-left variable\">rc</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token operator\">>></span><br>    <span class=\"token number\">16</span>:28:46 up  <span class=\"token number\">2</span>:48,  <span class=\"token number\">4</span> users,  load average: <span class=\"token number\">0.08</span>, <span class=\"token number\">0.05</span>, <span class=\"token number\">0.01</span></code></pre>\n<p>如上，可以看到 RPi 從啟動到下指令，中間經過 2:48。</p>\n<h2 id=\"write-a-playbook\"><a class=\"direct-link\" href=\"#write-a-playbook\">#</a> Write a Playbook</h2>\n<p>在前面的步驟中，我們透過 Ansible 對遠端裝置進行單次指令，但如果組態設定或部署需要一次進行多次指令的話，我們可以怎麼做？Ansible 有個工具稱為 playbook，類似劇本，只要 user 依照 yaml 格式編寫好，Ansible 就會根據 playbook 來執行指令。</p>\n<p>為了使用 playbook，在工作目錄中加入 playbook 的檔案</p>\n<pre><code>playbook/\n    hosts               *# inventory file for production servers\n    ansible.cfg         *# ansible config file\n    pi-update.yml       *# ansible playbook*\n</code></pre>\n<p>內容如下</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Update python script<br>  <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span> end<span class=\"token punctuation\">-</span>devices<br>  <span class=\"token key atrule\">become</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">True</span><br>  <span class=\"token key atrule\">tasks</span><span class=\"token punctuation\">:</span><br>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> copy python file<br>    <span class=\"token key atrule\">copy</span><span class=\"token punctuation\">:</span> src=files/hello.py dest=/home/pi/ansible/hello.py mode=0644<br>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> run python file<br>    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> python3 /home/pi/ansible/hello.py</code></pre>\n<p>在這個 playbook 中，執行對象是 end-devices 這個 inventory 群組。這個 playbook 存在兩個 task，第一個用來將 <a href=\"http://hello.py\">hello.py</a> 這支 python 的 copy 到終端裝置；第二個用來執行終端裝置上的 python 程式。</p>\n<p>可以看到，inventory 由原先的 hosts 改為 end-devices，這是因為 inventory 可能是由多台機器組成的群組，因此我們改寫原先的 inventory file，將它變成</p>\n<pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token header\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">end-devices</span><span class=\"token punctuation\">]</span></span><br><span class=\"token key attr-name\">pi ansible_host</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">192.168.5.10</span></code></pre>\n<p>在開頭加入群組名稱。</p>\n<p>接著，在工作目錄創建要複製過去的檔案</p>\n<pre><code>playbook/\n    hosts               *# inventory file for production servers\n    ansible.cfg         *# ansible config file\n    pi-update.yml       *# ansible playbook\n    files/              *# files\n      hello.py\n</code></pre>\n<p><a href=\"http://hello.py\">hello.py</a> 是個 python 的程式碼，用來印出 “Hello, world”</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>相關準備完成了，來看看執行的結果。執行 playbook 需要使用 ansible-playbook 這個命令</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@ken-Lenovo-ideapad-330-15ICH:~/git/ansible/raspberry/playbooks$ ansible-playbook pi-update.yml<br><br>PLAY <span class=\"token punctuation\">[</span>Update python script<span class=\"token punctuation\">]</span> ********************************************************************<br><br>TASK <span class=\"token punctuation\">[</span>Gathering Facts<span class=\"token punctuation\">]</span> ********************************************************************<br>ok: <span class=\"token punctuation\">[</span>pi<span class=\"token punctuation\">]</span><br><br>TASK <span class=\"token punctuation\">[</span>copy python file<span class=\"token punctuation\">]</span> ********************************************************************<br>changed: <span class=\"token punctuation\">[</span>pi<span class=\"token punctuation\">]</span><br><br>TASK <span class=\"token punctuation\">[</span>run python file<span class=\"token punctuation\">]</span> ********************************************************************<br>changed: <span class=\"token punctuation\">[</span>pi<span class=\"token punctuation\">]</span><br><br>PLAY RECAP ********************************************************************<br>pi                  <span class=\"token builtin class-name\">:</span> <span class=\"token assign-left variable\">ok</span><span class=\"token operator\">=</span><span class=\"token number\">3</span>    <span class=\"token assign-left variable\">changed</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>    <span class=\"token assign-left variable\">unreachable</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>    <span class=\"token assign-left variable\">failed</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></code></pre>\n<p>Ansible 會先收集裝置上的資訊，然後依照 playbook 來執行 task，changed 表示裝置被實際變動，由結果可看到 Ansible 將 <a href=\"http://hello.py\">hello.py</a> 複製到 RPi 上，並且執行 python script。</p>\n<h2 id=\"add-debug-information\"><a class=\"direct-link\" href=\"#add-debug-information\">#</a> Add Debug Information</h2>\n<p>但是 <a href=\"http://hello.py\">hello.py</a> 有印出 “Hello, world”，為什麼在執行結果沒看到呢？這是因為印出的資訊是在 RPi 上，如果要將輸出結果顯示到 Ansible 的結果中，可以修改 playbook 如下</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Update python script<br>  <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span> end<span class=\"token punctuation\">-</span>devices<br>  <span class=\"token key atrule\">become</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">True</span><br>  <span class=\"token key atrule\">tasks</span><span class=\"token punctuation\">:</span><br>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> copy python file<br>    <span class=\"token key atrule\">copy</span><span class=\"token punctuation\">:</span> src=files/hello.py dest=/home/pi/ansible/hello.py mode=0644<br>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> run python file<br>    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> python3 /home/pi/ansible/hello.py<br>    <span class=\"token key atrule\">register</span><span class=\"token punctuation\">:</span> hello<br>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">debug</span><span class=\"token punctuation\">:</span> var=hello</code></pre>\n<p>將 task 的結果用 register 註冊為 variable，再使用 debug 印出，方便除錯。</p>\n<p>好的，再執行一次 ansible-playbook</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@ken-Lenovo-ideapad-330-15ICH:~/git/ansible/raspberry/playbooks$ ansible-playbook pi-update.yml<br><br>PLAY <span class=\"token punctuation\">[</span>Update python script<span class=\"token punctuation\">]</span> ********************************************************************<br><br>TASK <span class=\"token punctuation\">[</span>Gathering Facts<span class=\"token punctuation\">]</span> ********************************************************************<br>ok: <span class=\"token punctuation\">[</span>pi<span class=\"token punctuation\">]</span><br><br>TASK <span class=\"token punctuation\">[</span>copy python file<span class=\"token punctuation\">]</span> ********************************************************************<br>ok: <span class=\"token punctuation\">[</span>pi<span class=\"token punctuation\">]</span><br><br>TASK <span class=\"token punctuation\">[</span>run python file<span class=\"token punctuation\">]</span> ********************************************************************<br>changed: <span class=\"token punctuation\">[</span>pi<span class=\"token punctuation\">]</span><br><br>TASK <span class=\"token punctuation\">[</span>debug<span class=\"token punctuation\">]</span> ********************************************************************<br>ok: <span class=\"token punctuation\">[</span>pi<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token string\">\"hello\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token string\">\"changed\"</span><span class=\"token builtin class-name\">:</span> true, <br>        <span class=\"token string\">\"cmd\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><br>            <span class=\"token string\">\"python3\"</span>, <br>            <span class=\"token string\">\"/home/pi/ansible/hello.py\"</span><br>        <span class=\"token punctuation\">]</span>, <br>        <span class=\"token string\">\"delta\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"0:00:00.779588\"</span>, <br>        <span class=\"token string\">\"end\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2019-11-25 20:06:11.911999\"</span>, <br>        <span class=\"token string\">\"failed\"</span><span class=\"token builtin class-name\">:</span> false, <br>        <span class=\"token string\">\"rc\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>, <br>        <span class=\"token string\">\"start\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2019-11-25 20:06:11.132411\"</span>, <br>        <span class=\"token string\">\"stderr\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>, <br>        <span class=\"token string\">\"stderr_lines\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>, <br>        <span class=\"token string\">\"stdout\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Hello, world\"</span>, <br>        <span class=\"token string\">\"stdout_lines\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><br>            <span class=\"token string\">\"Hello, world\"</span><br>        <span class=\"token punctuation\">]</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br>PLAY RECAP ********************************************************************<br>pi                 <span class=\"token builtin class-name\">:</span> <span class=\"token assign-left variable\">ok</span><span class=\"token operator\">=</span><span class=\"token number\">4</span>    <span class=\"token assign-left variable\">changed</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>    <span class=\"token assign-left variable\">unreachable</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>    <span class=\"token assign-left variable\">failed</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></code></pre>\n<p>這次就可以看到 stdout 結果是 “Hello, world”，同時因為 <a href=\"http://hello.py\">hello.py</a> 已經複製過了，第一個 task 狀態改為 ok，而非 changed。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>初次上路，好在沒有翻車。Ansible 相對 expect 這類響應式腳本複雜不少，但需要的 cost 真的很低，只需要 python 就可以運行。優點是 framework 架構完整，修改性跟移植性高，當專案成長到一定規模，expect 維護起來很麻煩時，就可以考慮用 Ansible 來補充。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://www.tenlong.com.tw/products/9789864768264\">《Ansible：建置與執行》</a></li>\n<li><a href=\"https://docs.ansible.com/\">Ansible Documentation</a></li>\n<li><a href=\"https://medium.com/laraveldojo/%E8%AE%93%E6%82%A8%E5%AE%89%E5%BF%83%E5%9F%B7%E8%A1%8C-ansible-playbook-%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7-2-856a60b19898?source=---------14------------------\">讓您安心執行 Ansible playbook 的小技巧（2）</a></li>\n</ul>\n",
      "date_published": "2019-11-26T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/use-vscode-to-remote-coding/",
      "url": "https://blog.kenwsc.com/posts/use-vscode-to-remote-coding/",
      "title": "遠端開發環境架設：Web 版 VSCode",
      "content_html": "<p>手邊一些開發有使用 Flask，因為 Flask 是架在遠端 Server 上，如果本地開發後還要部署到遠端，等於中間多了一個步驟，切來切去很麻煩，所以在想，有沒有機會直接在遠端進行開發？Google 後發現有個 code-server，能用 VSCode 進行 Remote Coding，所以還等什麼呢，來試試看吧。</p>\n<h2 id=\"use-docker-to-deploy-code-server\"><a class=\"direct-link\" href=\"#use-docker-to-deploy-code-server\">#</a> Use Docker to Deploy code-server</h2>\n<p>依照 code-server 的 Github，我們可以使用 docker 來架設</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># -v bind docker folder to host's folder</span><br><span class=\"token comment\"># codercom/code-server:v2 is docker image</span><br><br>docker run -it -p <span class=\"token number\">127.0</span>.0.1:8080:8080 -v <span class=\"token string\">\"<span class=\"token variable\">${<span class=\"token environment constant\">HOME</span>}</span>/.local/share/code-server:/home/coder/.local/share/code-server\"</span> -v <span class=\"token string\">\"<span class=\"token environment constant\">$PWD</span>:/home/coder/project\"</span> codercom/code-server:v2</code></pre>\n<p>docker 會自動去 Docker Hub 將 image 抓下來設置，完成。</p>\n<p>好像有點簡單，用瀏覽器來看一下成果</p>\n<p><img src=\"/img/posts/use-vscode-to-remote-coding/vscode-1.webp\" alt=\"\"></p>\n<p>看起來跟本機端的 VSCode 幾乎完全一樣啊！</p>\n<h2 id=\"use-binary\"><a class=\"direct-link\" href=\"#use-binary\">#</a> Use Binary</h2>\n<p>因為用 docker 真的太簡單了，沒有挑戰性，為了充篇幅，接著來看如果不使用 docker，要使用 binary 來執行的話，可以怎麼做。</p>\n<p>GitHub 同樣有 QuickStart Guide</p>\n<blockquote>\n<ol>\n<li>Visit the releases page and download the latest binary for your operating system.</li>\n<li>Unpack the downloaded file then run the binary.</li>\n<li>In your browser navigate to localhost:8080.</li>\n</ol>\n</blockquote>\n<p>我的電腦是 Linux，首先依照步驟，先去下載 binary</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> <span class=\"token punctuation\">[</span>https://github.com/cdr/code-server/releases/download/2.1692-vsc1.39.2/code-server2.1692-vsc1.39.2-linux-x86_64.tar.gz<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https://github.com/cdr/code-server/releases/download/2.1692-vsc1.39.2/code-server2.1692-vsc1.39.2-linux-x86_64.tar.gz<span class=\"token punctuation\">)</span></code></pre>\n<p>解壓縮並安裝到 /bin</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> zxvf code-server2.1665-vsc1.39.2-linux-x86_64.tar.gz<br><span class=\"token builtin class-name\">cd</span> code-server2.1665-vsc1.39.2-linux-x86_64/<br><span class=\"token function\">mv</span> code-server ~/bin/<br><span class=\"token builtin class-name\">cd</span><br><span class=\"token builtin class-name\">source</span> .bashrc </code></pre>\n<p>接著執行</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken@ken-Lenovo-ideapad-330-15ICH:~$ code-server<br>info  Server listening on <span class=\"token punctuation\">[</span>http://localhost:8080<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>http://localhost:8080<span class=\"token punctuation\">)</span><br>info    - Password is 803570ed676b5d026417da00<br>info      - To use your own password, <span class=\"token builtin class-name\">set</span> the PASSWORD environment variable<br>info      - To disable use <span class=\"token variable\"><span class=\"token variable\">`</span>--auth none<span class=\"token variable\">`</span></span><br>info    - Not serving HTTPS</code></pre>\n<p><img src=\"/img/posts/use-vscode-to-remote-coding/vscode-2.webp\" alt=\"\"></p>\n<p>由瀏覽器可以看到登入頁面，輸入隨機產生的密碼後登入</p>\n<h2 id=\"set-password\"><a class=\"direct-link\" href=\"#set-password\">#</a> Set Password</h2>\n<p>由 Step 2 執行後的結果可以看到，在 code-server 預設上，每次執行會隨機產生一組密碼，要登入就需要輸入。這麼做雖然保障安全性，但是非常麻煩。所幸 code-server 會自行讀取環境變數來設置密碼，因此只需要將使用的密碼設定在環境變數，就能固定用這組密碼登入</p>\n<pre><code>export PASSWORD=&quot;******&quot;\ncode-server\n</code></pre>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>code-server 還有其他選項可以設定，就不一一細講了，有興趣可以自己翻GitHub。Remote coding 的優點在 GitHub 上也講得很清楚：</p>\n<blockquote>\n<ul>\n<li>Consistent environment: Code on your Chromebook, tablet, and laptop with a consistent dev environment. develop more easily for Linux if you have a Windows or Mac, and pick up where you left off when switching workstations.</li>\n<li>Server-powered: Take advantage of large cloud servers to speed up tests, compilations, downloads, and more. Preserve battery life when you're on the go since all intensive computation runs on your server.</li>\n</ul>\n</blockquote>\n<p>你可以在任何地點、任何裝置上，從上次暫停的部分繼續 coding；你可以使用雲端裝置的運算能力，協助你進行編譯、測試，而且省下裝置的電量。這意味著你可以移動－－只要有網路的話，所在的地方就是辦公室，不用限定在一格一格死氣沉沉的辦公間或是某張特定的桌子上。</p>\n<p>這很讓人振奮不是嗎？要說技術如何改變生活，我想這就是個例子。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://github.com/cdr/code-server\">GitHub: code-server</a></li>\n</ul>\n",
      "date_published": "2019-11-17T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/coding-by-your-smartphone/",
      "url": "https://blog.kenwsc.com/posts/coding-by-your-smartphone/",
      "title": "全世界都是你的工作室：GCP 的雲端開發環境",
      "content_html": "<p>最近看到 Heron 的 Medium 在討論使用 iPad 來開發程式，深深被 Thin Client 給感動了。如果能從硬體裝置中解放，不用開發程式前還需要花費大把時間精力來架設環境，那我們就能更快驗證，更快學習，更快迭代，把時間花在重要而有價值的事上。</p>\n<p>Thin Client 的概念說來單純，我們可以將所有能連上網路的介面都可以當成終端，在傳統開發環境中，終端跟運算是放在同一台機器上，輸入完成後，使用機器的資源來進行運算，像是編譯程式、執行與提供服務；但自從有了雲端後，可以將這類運算都交由雲端處理，只要有個合用的終端介面能輸入與呈現資訊，就能得到運算結果。</p>\n<h2 id=\"apply-gcp-free-plan\"><a class=\"direct-link\" href=\"#apply-gcp-free-plan\">#</a> Apply GCP free plan</h2>\n<p>既然運算資源放在雲端，首先要申請一個雲端帳戶，這邊以 GCP 的免費方案為例，首先點選 GCP 的免費試用</p>\n<p><img src=\"/img/posts/coding-by-your-smartphone/gcp-1.webp\" alt=\"\"></p>\n<p>GCP 的免費方案提供 $300 刀的額度，還有 12 個月的使用時間，可以使用 GCP 上所有服務，如果是小型或低成本的運算，甚至不用動到 $300 的費用。</p>\n<p>選擇國家/地區後，按[繼續]進入第二頁</p>\n<p><img src=\"/img/posts/coding-by-your-smartphone/gcp-2.webp\" alt=\"\"></p>\n<p>第二頁要填入個人資訊，還需要一張信用卡卡號。依照 Google 的說法，信用卡是為了驗證身分。要注意 GCP 不支援 JCB，請用 Visa/Master Card 來申請。</p>\n<h2 id=\"create-project\"><a class=\"direct-link\" href=\"#create-project\">#</a> Create Project</h2>\n<p>進入 GCP 首頁後，可以先創建一個新的 Project，來放置要測試的東西，點選 Google Cloud Platform 旁的 Project 名稱，再點選跳出視窗右上角的 New Project</p>\n<p><img src=\"/img/posts/coding-by-your-smartphone/gcp-3.webp\" alt=\"\"></p>\n<p>填入 Project name 跟要放置的 Folder，例如 Linux VM，完成 Project 的建置。</p>\n<p><img src=\"/img/posts/coding-by-your-smartphone/gcp-4.webp\" alt=\"\"></p>\n<h2 id=\"create-vm-instance\"><a class=\"direct-link\" href=\"#create-vm-instance\">#</a> Create VM instance</h2>\n<p>有了 Project 後，可以在裡面創建需要的雲端服務，因為主要目的是驗證 Thin Client 是否可行，選擇創建一個 VM 實例來進行登入。要創建 VM 實例可以點選 Menu 中的 Compute Engine &gt; VM Instances，選擇 Create</p>\n<p><img src=\"/img/posts/coding-by-your-smartphone/gcp-5.webp\" alt=\"\"></p>\n<p>Create 的選項有很多，參照 GCP 的免費方案說明，使用 Region 為 us-central1 (Iowa)，Machine Type 為 f1-micro</p>\n<p><img src=\"/img/posts/coding-by-your-smartphone/gcp-6.webp\" alt=\"\"></p>\n<p>Boot Disk 看個人習慣，我平常用的環境是 Ubuntu 18.04 LTS，這邊選同樣的，如果有習慣 Debian 或其他 Distribution 的人，也可以自行選擇</p>\n<p><img src=\"/img/posts/coding-by-your-smartphone/gcp-7.webp\" alt=\"\"></p>\n<p>點選[Create]，完成 VM 創建。</p>\n<h2 id=\"setup-ssh\"><a class=\"direct-link\" href=\"#setup-ssh\">#</a> Setup SSH</h2>\n<p>在終端安裝 SSH 的 Client，例如 Windows 常用的 putty，或者 Termius 這款 App。沒有 SSH Key 的人需要使用程式產生出 SSH Key，再將 Private Key 指定給 SSH Client，同時將 Public Key 放置到雲端。產生 Key 的步驟就不多說了，Windows 下的使用者可以用 PuTTYgen 來產生，Linux 使用者可以用 ssh-keygen。</p>\n<p>有 Public Key 後，要將它放到雲端，方便以後登入。選擇 Compute Engine 中的 Metadata，點選 SSH Keys，可以管理金鑰。點選 Add SSH keys 來加入自己的 Public Key</p>\n<p><img src=\"/img/posts/coding-by-your-smartphone/gcp-8.webp\" alt=\"\"></p>\n<p>加入後回到 VM instances，查看對應的 External IP，使用 SSH Client 輸入 user@address，登入 VM instance，記得 user 是要 key 對應的 user，address 是要 External IP。驗證看看能否登入。</p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>自從雲端的商業模式建立起來後，許多做法都會跟著改變，這是一個思維上的轉換，以前需要的東西有可能被淘汰掉，而新的需求會被創造出來。如果可以用 GCP 處理掉伺服器，我沒必要再去購買伺服器的硬體來自行架設網站，不但比較便宜，也省掉 Maintain 的 Effort。同時，高效能對 Laptop 也不會再是議題，取而代之的，應該是穩定而快速的網路服務配上輕便的終端顯示器。</p>\n<p>最後放張完成圖，紀念一下。</p>\n<p><img src=\"/img/posts/coding-by-your-smartphone/gcp-9.webp\" alt=\"\"></p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://blog.heron.me/coding-on-ipad-d264c5c6325e\">拿 iPad 取代筆電做程式開發</a></li>\n<li><a href=\"https://cloud.google.com/free/docs/gcp-free-tier?hl=zh-tw\">GCP 免費方案</a></li>\n</ul>\n",
      "date_published": "2019-10-11T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/visualize-your-redmine-data/",
      "url": "https://blog.kenwsc.com/posts/visualize-your-redmine-data/",
      "title": "掌握 Redmine 的活動指標：繪製熱度圖",
      "content_html": "<p>我們平常使用 Redmine 來管理專案，當需要進行 Review 或討論如何改善時，常常需要基於 Redmine 的數據。由這些數據分析，也能得知團隊執行狀況是否順利。但是 Redmine 本身並沒有整合 Dashboard 的功能，因此需要透過 RESTful API 來取得專案資料，再使用第三方軟體繪製成圖表。</p>\n<h2 id=\"%E5%AE%89%E8%A3%9D-python-redmine\"><a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D-python-redmine\">#</a> 安裝 python-redmine</h2>\n<p>由於 Python 是我熟悉的腳本語言，選擇用 Python 來進行 Proof of Concept，首先安裝相關的 Python 套件</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">python -m pip <span class=\"token function\">install</span> python-redmine</code></pre>\n<p>如果電腦有支援 pip 指令，可以直接用</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">pip3 <span class=\"token function\">install</span> python-redmine</code></pre>\n<p>來安裝。</p>\n<p>Windows 的 pip 使用可能跟 Ubuntu 不同，至少我還沒找到用法，這邊選擇用 option-m 的模組執行方式，來執行 python 內的 pip module，效果跟 pip 相同，只是命令比較不直覺。</p>\n<h2 id=\"%E7%99%BB%E5%85%A5-redmine\"><a class=\"direct-link\" href=\"#%E7%99%BB%E5%85%A5-redmine\">#</a> 登入 redmine</h2>\n<p>python-redmine 已經將 redmine 的 API 指令封裝成 python 的語法，直接調用即可，我們先使用帳號密碼登入 redmine</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> redminelib <span class=\"token keyword\">import</span> Redmine<br>redmine <span class=\"token operator\">=</span> Redmine<span class=\"token punctuation\">(</span><span class=\"token string\">'http://demo.redmine.org'</span><span class=\"token punctuation\">,</span> username<span class=\"token operator\">=</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>第一個參數填入 redmine 所在的 url，後面帶自己的帳號與密碼，如果無法登入，可以參考官網說明，請管理員將 REST API 打開。</p>\n<h2 id=\"%E5%8F%96%E5%BE%97-issue-%E5%88%97%E8%A1%A8\"><a class=\"direct-link\" href=\"#%E5%8F%96%E5%BE%97-issue-%E5%88%97%E8%A1%A8\">#</a> 取得 issue 列表</h2>\n<p>我的目標是取得 redmine 上的所有 issue。其中包含 assign 給我的 issue 量、我已經處理完成的 issue 量，藉此來觀察專案的成果。</p>\n<p>首先是 assign 給我的數量</p>\n<pre class=\"language-py\"><code class=\"language-py\">issues <span class=\"token operator\">=</span> redmine<span class=\"token punctuation\">.</span>issue<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><br>    project_id<span class=\"token operator\">=</span><span class=\"token string\">'demo'</span><span class=\"token punctuation\">,</span><br>    status_id<span class=\"token operator\">=</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span><br>    assigned_to_id<span class=\"token operator\">=</span>me<br><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total opened count is: \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>issues<span class=\"token punctuation\">.</span>total_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>filter 可以設定要取回的 issues 條件；我要取回的是在 demo 專案下、任意狀態、assign 給我的 issues。</p>\n<p>同樣的，我們也可以取得我已經完成的 issue</p>\n<pre class=\"language-py\"><code class=\"language-py\">issues_closed <span class=\"token operator\">=</span> redmine<span class=\"token punctuation\">.</span>issue<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><br>    project_id<span class=\"token operator\">=</span><span class=\"token string\">'demo'</span><span class=\"token punctuation\">,</span><br>    status_id<span class=\"token operator\">=</span><span class=\"token string\">'closed'</span><span class=\"token punctuation\">,</span><br>    assigned_to_id<span class=\"token operator\">=</span><span class=\"token string\">'me'</span><br><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total closed count is: \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>issues_closed<span class=\"token punctuation\">.</span>total_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"%E7%95%AB%E5%87%BA-heatmap\"><a class=\"direct-link\" href=\"#%E7%95%AB%E5%87%BA-heatmap\">#</a> 畫出 Heatmap</h2>\n<p>接著，我希望可以將平常在 redmine 上的活動畫成 heatmap，畢竟對專案而言，活躍度是非常重要的指標，而活躍度的指標之一就是更新頻率。遍歷所有的 issue，查詢底下的 journal 是否是由我發出，如果是的話，在 heatmap data array 的對應欄位 +1，藉此統計活動狀況。</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> re<br><span class=\"token keyword\">import</span> datetime<br><span class=\"token keyword\">import</span> numpy<br>week_start <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">(</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%V\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>week_end <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">(</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%V\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>week_duration <span class=\"token operator\">=</span> week_end <span class=\"token operator\">-</span> week_start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><br>journal_ken <span class=\"token operator\">=</span> <span class=\"token number\">0</span><br>data_arr <span class=\"token operator\">=</span> numpy<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> week_duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>p <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(\\d{4})-(\\d{2})-(\\d{2})\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">for</span> issue <span class=\"token keyword\">in</span> issues<span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">for</span> resource <span class=\"token keyword\">in</span> issue<span class=\"token punctuation\">.</span>journals<span class=\"token punctuation\">.</span>_resources<span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> resource<span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Ken Chen\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">continue</span><br>        match <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">[</span><span class=\"token string\">'created_on'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2019</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">continue</span><br>        journal_ken <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><br>        week <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">(</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%V\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>        weekday <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">(</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>        data_arr<span class=\"token punctuation\">[</span>weekday<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>week <span class=\"token operator\">-</span> week_start<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total journal of Ken is: \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>journal_ken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>week_start 、 week_end 、 week_duration 用來限制時間範圍，使用正則表達式來判斷 journal 的時間是否落在指定的區段， journal_ken 用來統計總數。</p>\n<p>得到資料陣列後，就能使用 seaborn 畫成圖</p>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> seaborn <span class=\"token keyword\">as</span> sns<span class=\"token punctuation\">;</span> sns<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt<br>ax <span class=\"token operator\">=</span> sns<span class=\"token punctuation\">.</span>heatmap<span class=\"token punctuation\">(</span><br>    data_arr<br><span class=\"token punctuation\">)</span><br>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p><img src=\"/img/posts/visualize-your-redmine-data/heatmap-1.webp\" alt=\"\"></p>\n<h2 id=\"%E4%BF%AE%E9%A3%BE-heatmap\"><a class=\"direct-link\" href=\"#%E4%BF%AE%E9%A3%BE-heatmap\">#</a> 修飾 Heatmap</h2>\n<p>預設圖片跟想要呈現的效果有段落差，如果直接拿出去，大概會立刻被打槍，這邊需要進行一些美化，使用 seaborn 的參數來調整</p>\n<pre class=\"language-py\"><code class=\"language-py\">data_masks <span class=\"token operator\">=</span> numpy<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> week_duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>week_duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">if</span> data_arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> data_masks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><br>ax <span class=\"token operator\">=</span> sns<span class=\"token punctuation\">.</span>heatmap<span class=\"token punctuation\">(</span><br>    data_arr<span class=\"token punctuation\">,</span> <br>    cmap <span class=\"token operator\">=</span> <span class=\"token string\">'Blues'</span><span class=\"token punctuation\">,</span> <br>    mask<span class=\"token operator\">=</span>data_masks<span class=\"token punctuation\">,</span> <br>    yticklabels <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Sun\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Mon\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Tue\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Wed\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Thu\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Fri\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Sat\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <br>    linewidths <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <br>    square <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span><br>    cbar <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><br><span class=\"token punctuation\">)</span><br>ax<span class=\"token punctuation\">.</span>set_ylim<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><br>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>修改顏色；加入遮罩遮掉值是 0 的區段；加入 y 軸標示；加粗格線；讓顯示的區塊為方形；拿掉色彩條。 ax.set_ylim 則是因為 matplotlib 本身的 Bug 會導致圖片只畫一半</p>\n<p><img src=\"/img/posts/visualize-your-redmine-data/bug-1.webp\" alt=\"\"></p>\n<p>如果不想用開發中的版本，要不就等 3.1.2 版，要不就退回 3.1.0 版，要不就使用 ax.set_ylim 。我不太想動版本，只好乖乖使用指令來調整。</p>\n<p>當一切就緒後，我們就可以得到</p>\n<p><img src=\"/img/posts/visualize-your-redmine-data/heatmap-2.webp\" alt=\"\"></p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>稍微用 python 開個小小的 side project，就能體會到用 python 來驗證概念的威力。由於有完整的生態系，python 適合快速開發，快速驗證，很快就能知道自己的想法是否行得通，不用花費一堆時間蓋完基礎建設後，才發現由於需要的 API 沒開出來，導致專案 Fail。</p>\n<p>資料視覺化真的是很有意思的題目，如果有機會的話，很想將整個團隊的資料即時視覺處理，跑專案時只要進到戰情室就能一目了然。</p>\n<p>最後，我對 python 不支援 var++ 的用法有點意見，對 C 語言的工程師來講不太友善。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"http://www.redmine.org/\">Redmine</a></li>\n<li><a href=\"https://python-redmine.com/\">Python-Redmine</a></li>\n<li><a href=\"https://seaborn.pydata.org/generated/seaborn.heatmap.html\">seaborn.heatmap</a></li>\n</ul>\n",
      "date_published": "2019-08-31T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/using-physical-disc-with-virtualbox/",
      "url": "https://blog.kenwsc.com/posts/using-physical-disc-with-virtualbox/",
      "title": "用 VirtualBox 開啟實體硬碟中的 Windows",
      "content_html": "<p>如果用 Linux 當開發環境，常常會碰到一個問題：因為一般企業使用的管理系統沒有 Linux 版本，導致有些操作必須使用 Windows 來完成。對於大部分的應用來說，在 VirtualBox 內安裝 Windows 可能就能解決，問題是，通常 VirtualBox 的 Windows 都是由工程師自行安裝，不是正式授權；再來，在 VirtualBox 內安裝 Windows，意味加上原來預設的 Windows，硬碟內要有兩套 Windows，這真的讓人很難接受，一套已經很佔空間了，居然還要兩套？</p>\n<p>於是我有個想法，要是 VirtualBox 可以用實體空間來開機的話，就能直接在 VirtualBox 執行原本配置的系統，如此一來，可以用 IT 已經安裝好的授權軟體不說，也省掉了後續資料交換的麻煩。Google 後發現還真的有這種應用，當然馬上試試看。</p>\n<h2 id=\"%E5%88%97%E5%87%BA%E5%88%86%E5%8D%80\"><a class=\"direct-link\" href=\"#%E5%88%97%E5%87%BA%E5%88%86%E5%8D%80\">#</a> 列出分區</h2>\n<p>首先因為是使用硬碟的資料，我們需要確認 Windows 安裝在哪個 Partition，使用 fdisk -l 列出所有 Partition 的狀態</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken:~$ <span class=\"token function\">sudo</span> <span class=\"token function\">fdisk</span> -l /dev/nvme0n1<br>Disk /dev/nvme0n1: <span class=\"token number\">119.2</span> GiB, <span class=\"token number\">128035676160</span> bytes, <span class=\"token number\">250069680</span> sectors<br>Units: sectors of <span class=\"token number\">1</span> * <span class=\"token number\">512</span> <span class=\"token operator\">=</span> <span class=\"token number\">512</span> bytes<br>Sector size <span class=\"token punctuation\">(</span>logical/physical<span class=\"token punctuation\">)</span>: <span class=\"token number\">512</span> bytes / <span class=\"token number\">512</span> bytes<br>I/O size <span class=\"token punctuation\">(</span>minimum/optimal<span class=\"token punctuation\">)</span>: <span class=\"token number\">512</span> bytes / <span class=\"token number\">512</span> bytes<br>Disklabel type: gpt<br>Disk identifier: 664C31C9-8F24-4D89-B16A-426FDCDBB716<br>Device             Start       End   Sectors  Size Type<br>/dev/nvme0n1p1      <span class=\"token number\">2048</span>    <span class=\"token number\">534527</span>    <span class=\"token number\">532480</span>  260M EFI System<br>/dev/nvme0n1p2    <span class=\"token number\">534528</span>    <span class=\"token number\">567295</span>     <span class=\"token number\">32768</span>   16M Microsoft reserved<br>/dev/nvme0n1p3    <span class=\"token number\">567296</span> <span class=\"token number\">111706111</span> <span class=\"token number\">111138816</span>   53G Microsoft basic data<br>/dev/nvme0n1p4 <span class=\"token number\">248020992</span> <span class=\"token number\">250068991</span>   <span class=\"token number\">2048000</span> 1000M Windows recovery environment<br>/dev/nvme0n1p5 <span class=\"token number\">111706112</span> <span class=\"token number\">112504831</span>    <span class=\"token number\">798720</span>  390M Linux filesystem<br>/dev/nvme0n1p6 <span class=\"token number\">112504832</span> <span class=\"token number\">144502783</span>  <span class=\"token number\">31997952</span> <span class=\"token number\">15</span>.3G Linux swap<br>/dev/nvme0n1p7 <span class=\"token number\">144502784</span> <span class=\"token number\">248020991</span> <span class=\"token number\">103518208</span> <span class=\"token number\">49</span>.4G Linux filesystem</code></pre>\n<p>可以看到 Windows 的資料位於 dev/nvme0n1</p>\n<h2 id=\"%E5%89%B5%E5%BB%BA-vmdk-%E6%AA%94\"><a class=\"direct-link\" href=\"#%E5%89%B5%E5%BB%BA-vmdk-%E6%AA%94\">#</a> 創建 VMDK 檔</h2>\n<p>接著，為了讓 VirtualBox 可以從實體硬碟開機，我們需要建立 vmdk 檔來表示實體硬碟。使用 VirtualBox 指令</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ken:~$ <span class=\"token function\">sudo</span> VBoxManage internalcommands createrawvmdk -filename ~/vmdk/windows_10.vmdk -rawdisk /dev/nvme0n1p1<br>RAW <span class=\"token function\">host</span> disk access VMDK <span class=\"token function\">file</span> /home/ken/vmdk/windows_10.vmdk created successfully.</code></pre>\n<h2 id=\"%E5%89%B5%E5%BB%BA%E8%99%9B%E6%93%AC%E6%A9%9F\"><a class=\"direct-link\" href=\"#%E5%89%B5%E5%BB%BA%E8%99%9B%E6%93%AC%E6%A9%9F\">#</a> 創建虛擬機</h2>\n<p>再來，開啟 VirtualBox，用剛剛建好的 vmdk 檔來開機</p>\n<p><img src=\"/img/posts/using-physical-disc-with-virtualbox/virtualbox-1.webp\" alt=\"\"></p>\n<p>這邊要注意，雖然我們的系統安裝在 SSD，使用的是 NVMe，但 VirtualBox 的 NVMe 似乎有問題，因此這邊選擇用 SATA</p>\n<p><img src=\"/img/posts/using-physical-disc-with-virtualbox/virtualbox-2.webp\" alt=\"\"></p>\n<p>前面看到 nvme0n1 開頭是 EFI，因此記得要 Enable EFI</p>\n<p><img src=\"/img/posts/using-physical-disc-with-virtualbox/virtualbox-3.webp\" alt=\"\"></p>\n<h2 id=\"%E5%95%9F%E5%8B%95%E8%99%9B%E6%93%AC%E6%A9%9F\"><a class=\"direct-link\" href=\"#%E5%95%9F%E5%8B%95%E8%99%9B%E6%93%AC%E6%A9%9F\">#</a> 啟動虛擬機</h2>\n<p>設定都完成後，只要開啟 Virtual Machine，應該能看到 GRUB 的畫面，選擇 Windows Boot Manager，進入 Windows，完工。</p>\n<p><img src=\"/img/posts/using-physical-disc-with-virtualbox/virtualbox-4.webp\" alt=\"\"></p>\n<h2 id=\"%E5%B0%8F%E7%B5%90\"><a class=\"direct-link\" href=\"#%E5%B0%8F%E7%B5%90\">#</a> 小結</h2>\n<p>使用 VirtualBox 開啟 Windows 後，就能省掉很多資料交換的麻煩，但畢竟是 Virtual Machine，使用上不比 Native，可能會有些狀況；另外，我電腦的 Windows 跟 Ubuntu 開機都安裝在 SSD，要用 EFI 從 dev/nvme0n1 開機，但如果可以的話，最好將兩個系統切開，免得不小心開到 Ubuntu，造成資料損壞。</p>\n<h2 id=\"reference\"><a class=\"direct-link\" href=\"#reference\">#</a> Reference</h2>\n<ul>\n<li><a href=\"https://www.jamieweb.net/blog/booting-a-physical-windows-10-disk-using-virtualbox-on-linux/\">Booting a Physical Windows 10 Disk Using VirtualBox on Linux</a></li>\n<li><a href=\"https://www.serverwatch.com/server-tutorials/using-a-physical-hard-drive-with-a-virtualbox-vm.html\">Using a Physical Hard Drive with a VirtualBox VM</a></li>\n</ul>\n",
      "date_published": "2019-06-10T00:00:00-00:00"
    },{
      "id": "https://blog.kenwsc.com/posts/setup-openwrt-on-virtualbox/",
      "url": "https://blog.kenwsc.com/posts/setup-openwrt-on-virtualbox/",
      "title": "在 VirtualBox 上建置 Openwrt",
      "content_html": "<p>現在工作會用到 Openwrt 當開發平台，但用起來一直卡卡的，想找時間從頭操作一次，看能不能深入理解系統的運作，說起來工作的重點就是不斷追求 balance，既能符合商業需求，又能持續成長。趁著年假有空，來玩玩看 Openwrt 有什麼特色。</p>\n<p>首先是下載 Openwrt 並編譯，現在的 Openwrt 已經用 git 做版控，可以用 git clone 來放到自己的開發目錄</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://git.openwrt.org/openwrt/openwrt.git<br><span class=\"token builtin class-name\">cd</span> openwrt</code></pre>\n<p><img src=\"/img/posts/setup-openwrt-on-virtualbox/console-1.webp\" alt=\"\"></p>\n<p>剛下載下來的 Source code 沒有包含相關的 package，例如 python、driver 等等，因為後續開發會需要用到，先使用 feeds來更新並安裝 package</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">./scripts/feeds update<br>./scripts/feeds <span class=\"token function\">install</span> -a</code></pre>\n<p>feeds是 Openwrt 內建的 script，如果想知道 command 的意思，可以用 help 。剛接觸 Linux 的人可能會不習慣看 help 來理解 command，可是用習慣之後，有問題能自己解，不用爬 Stack Overflow，對 Coding 幫助其實很大</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">./scripts/feeds -h<br><span class=\"token function\">install</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>package<span class=\"token operator\">></span>: Install a package<br><span class=\"token punctuation\">..</span>.<br>update -a<span class=\"token operator\">|</span><span class=\"token operator\">&lt;</span>feedname<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">></span>: Update packages and lists of feeds <span class=\"token keyword\">in</span> feeds.conf <span class=\"token builtin class-name\">.</span></code></pre>\n<p>由 help 內容可以知道，update 是更新追蹤的 package list； install 則是安裝 package，如果沒有安裝， menuconfing 時就會看不到相關的 package ，因此這邊全部裝起來</p>\n<p>接著進行環境準備，輸入 make defconfig 來檢查相關的 tool 有沒有 Ready，並產生設定文件 .config</p>\n<p>再來使用 make menuconfig 來選擇要編譯的 package，找不到 package 的話可以用 / 加關鍵字搜尋，搜尋有支援 regular exp 喔！這邊先選擇 python3 、LuCI 、GDB ， Target 用 x86 ，印象檔格式用 ext4</p>\n<p><img src=\"/img/posts/setup-openwrt-on-virtualbox/console-2.webp\" alt=\"\"></p>\n<p>之後用 make -j8 全速編譯</p>\n<p><img src=\"/img/posts/setup-openwrt-on-virtualbox/console-3.webp\" alt=\"\"></p>\n<p>編譯完得到映像壓縮檔，解壓縮</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">gunzip openwrt-x86-generic-combined-ext4.img.gz </code></pre>\n<p>得到映像檔，為了讓 VirtualBox 可以掛載，要用 vboxmanage轉換為 vdi 格式</p>\n<p>vboxmanage convertfromraw --format VDI openwrt-x86-generic-combined-ext4.img openwrt_x86.vdi<br>\n再來開啟 VirtualBox，建立 Virtual Machine</p>\n<p><img src=\"/img/posts/setup-openwrt-on-virtualbox/vm-1.webp\" alt=\"\"></p>\n<p>選擇 Type 為 Linux ，版本為 Linux 2.6 / 3.x / 4.x (32-bit) ，一路 Next 完成掛載</p>\n<p>開啟 VirtualBox，可以看到</p>\n<p><img src=\"/img/posts/setup-openwrt-on-virtualbox/vm-2.webp\" alt=\"\"></p>\n<p>完成！已經在 VirtualBox 上掛載剛剛編譯好的 Openwrt 了！</p>\n",
      "date_published": "2019-02-03T00:00:00-00:00"
    }
  ]
}
